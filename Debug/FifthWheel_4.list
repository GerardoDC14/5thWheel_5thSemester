
FifthWheel_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc8  08009e90  08009e90  00019e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc58  0800bc58  00020298  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc58  0800bc58  00020298  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc58  0800bc58  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800bc60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000298  0800bef8  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800bef8  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008964  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e52  00000000  00000000  00028c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ab  00000000  00000000  0002b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012bd4  00000000  00000000  0002ba4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c93f  00000000  00000000  0003e61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00068351  00000000  00000000  0004af5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003294  00000000  00000000  000b32b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b6544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000298 	.word	0x20000298
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009e74 	.word	0x08009e74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000029c 	.word	0x2000029c
 8000104:	08009e74 	.word	0x08009e74

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe8b 	bl	8002158 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fddb 	bl	8002008 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe7d 	bl	8002158 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe73 	bl	8002158 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe03 	bl	800208c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fdf9 	bl	800208c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb59 	bl	8000b68 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fae5 	bl	8000a90 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb4b 	bl	8000b68 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb41 	bl	8000b68 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faf1 	bl	8000adc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae7 	bl	8000adc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fadd>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	4647      	mov	r7, r8
 8000520:	46ce      	mov	lr, r9
 8000522:	024a      	lsls	r2, r1, #9
 8000524:	0243      	lsls	r3, r0, #9
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	0fc4      	lsrs	r4, r0, #31
 800052a:	0a50      	lsrs	r0, r2, #9
 800052c:	4680      	mov	r8, r0
 800052e:	0048      	lsls	r0, r1, #1
 8000530:	0a5b      	lsrs	r3, r3, #9
 8000532:	0e00      	lsrs	r0, r0, #24
 8000534:	0992      	lsrs	r2, r2, #6
 8000536:	4694      	mov	ip, r2
 8000538:	b580      	push	{r7, lr}
 800053a:	001e      	movs	r6, r3
 800053c:	4681      	mov	r9, r0
 800053e:	0002      	movs	r2, r0
 8000540:	0e2d      	lsrs	r5, r5, #24
 8000542:	00df      	lsls	r7, r3, #3
 8000544:	0fc9      	lsrs	r1, r1, #31
 8000546:	428c      	cmp	r4, r1
 8000548:	d024      	beq.n	8000594 <__aeabi_fadd+0x78>
 800054a:	1a28      	subs	r0, r5, r0
 800054c:	2800      	cmp	r0, #0
 800054e:	dd0e      	ble.n	800056e <__aeabi_fadd+0x52>
 8000550:	2a00      	cmp	r2, #0
 8000552:	d13e      	bne.n	80005d2 <__aeabi_fadd+0xb6>
 8000554:	4662      	mov	r2, ip
 8000556:	2a00      	cmp	r2, #0
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x40>
 800055a:	e0fd      	b.n	8000758 <__aeabi_fadd+0x23c>
 800055c:	1e42      	subs	r2, r0, #1
 800055e:	2801      	cmp	r0, #1
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0x48>
 8000562:	e137      	b.n	80007d4 <__aeabi_fadd+0x2b8>
 8000564:	28ff      	cmp	r0, #255	; 0xff
 8000566:	d100      	bne.n	800056a <__aeabi_fadd+0x4e>
 8000568:	e0a9      	b.n	80006be <__aeabi_fadd+0x1a2>
 800056a:	0010      	movs	r0, r2
 800056c:	e039      	b.n	80005e2 <__aeabi_fadd+0xc6>
 800056e:	2800      	cmp	r0, #0
 8000570:	d063      	beq.n	800063a <__aeabi_fadd+0x11e>
 8000572:	464b      	mov	r3, r9
 8000574:	1b52      	subs	r2, r2, r5
 8000576:	2d00      	cmp	r5, #0
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x60>
 800057a:	e0e0      	b.n	800073e <__aeabi_fadd+0x222>
 800057c:	2f00      	cmp	r7, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x66>
 8000580:	e0ce      	b.n	8000720 <__aeabi_fadd+0x204>
 8000582:	1e53      	subs	r3, r2, #1
 8000584:	2a01      	cmp	r2, #1
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x6e>
 8000588:	e155      	b.n	8000836 <__aeabi_fadd+0x31a>
 800058a:	2aff      	cmp	r2, #255	; 0xff
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x74>
 800058e:	e094      	b.n	80006ba <__aeabi_fadd+0x19e>
 8000590:	001a      	movs	r2, r3
 8000592:	e0d9      	b.n	8000748 <__aeabi_fadd+0x22c>
 8000594:	1a2a      	subs	r2, r5, r0
 8000596:	2a00      	cmp	r2, #0
 8000598:	dc00      	bgt.n	800059c <__aeabi_fadd+0x80>
 800059a:	e099      	b.n	80006d0 <__aeabi_fadd+0x1b4>
 800059c:	2800      	cmp	r0, #0
 800059e:	d062      	beq.n	8000666 <__aeabi_fadd+0x14a>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x8a>
 80005a4:	e08b      	b.n	80006be <__aeabi_fadd+0x1a2>
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	4661      	mov	r1, ip
 80005aa:	04db      	lsls	r3, r3, #19
 80005ac:	4319      	orrs	r1, r3
 80005ae:	468c      	mov	ip, r1
 80005b0:	2a1b      	cmp	r2, #27
 80005b2:	dc00      	bgt.n	80005b6 <__aeabi_fadd+0x9a>
 80005b4:	e0d2      	b.n	800075c <__aeabi_fadd+0x240>
 80005b6:	2301      	movs	r3, #1
 80005b8:	19db      	adds	r3, r3, r7
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	d56a      	bpl.n	8000694 <__aeabi_fadd+0x178>
 80005be:	3501      	adds	r5, #1
 80005c0:	2dff      	cmp	r5, #255	; 0xff
 80005c2:	d05b      	beq.n	800067c <__aeabi_fadd+0x160>
 80005c4:	2201      	movs	r2, #1
 80005c6:	49a3      	ldr	r1, [pc, #652]	; (8000854 <__aeabi_fadd+0x338>)
 80005c8:	401a      	ands	r2, r3
 80005ca:	085b      	lsrs	r3, r3, #1
 80005cc:	400b      	ands	r3, r1
 80005ce:	4313      	orrs	r3, r2
 80005d0:	e01c      	b.n	800060c <__aeabi_fadd+0xf0>
 80005d2:	2dff      	cmp	r5, #255	; 0xff
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0xbc>
 80005d6:	e072      	b.n	80006be <__aeabi_fadd+0x1a2>
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	4662      	mov	r2, ip
 80005dc:	04db      	lsls	r3, r3, #19
 80005de:	431a      	orrs	r2, r3
 80005e0:	4694      	mov	ip, r2
 80005e2:	281b      	cmp	r0, #27
 80005e4:	dc00      	bgt.n	80005e8 <__aeabi_fadd+0xcc>
 80005e6:	e090      	b.n	800070a <__aeabi_fadd+0x1ee>
 80005e8:	2301      	movs	r3, #1
 80005ea:	1afb      	subs	r3, r7, r3
 80005ec:	015a      	lsls	r2, r3, #5
 80005ee:	d551      	bpl.n	8000694 <__aeabi_fadd+0x178>
 80005f0:	019b      	lsls	r3, r3, #6
 80005f2:	099e      	lsrs	r6, r3, #6
 80005f4:	0030      	movs	r0, r6
 80005f6:	f002 fdcf 	bl	8003198 <__clzsi2>
 80005fa:	0033      	movs	r3, r6
 80005fc:	3805      	subs	r0, #5
 80005fe:	4083      	lsls	r3, r0
 8000600:	4285      	cmp	r5, r0
 8000602:	dc00      	bgt.n	8000606 <__aeabi_fadd+0xea>
 8000604:	e075      	b.n	80006f2 <__aeabi_fadd+0x1d6>
 8000606:	4a94      	ldr	r2, [pc, #592]	; (8000858 <__aeabi_fadd+0x33c>)
 8000608:	1a2d      	subs	r5, r5, r0
 800060a:	4013      	ands	r3, r2
 800060c:	075a      	lsls	r2, r3, #29
 800060e:	d004      	beq.n	800061a <__aeabi_fadd+0xfe>
 8000610:	220f      	movs	r2, #15
 8000612:	401a      	ands	r2, r3
 8000614:	2a04      	cmp	r2, #4
 8000616:	d000      	beq.n	800061a <__aeabi_fadd+0xfe>
 8000618:	3304      	adds	r3, #4
 800061a:	015a      	lsls	r2, r3, #5
 800061c:	d53c      	bpl.n	8000698 <__aeabi_fadd+0x17c>
 800061e:	1c68      	adds	r0, r5, #1
 8000620:	2dfe      	cmp	r5, #254	; 0xfe
 8000622:	d02b      	beq.n	800067c <__aeabi_fadd+0x160>
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	0a5e      	lsrs	r6, r3, #9
 8000628:	b2c0      	uxtb	r0, r0
 800062a:	05c0      	lsls	r0, r0, #23
 800062c:	4330      	orrs	r0, r6
 800062e:	07e4      	lsls	r4, r4, #31
 8000630:	4320      	orrs	r0, r4
 8000632:	bcc0      	pop	{r6, r7}
 8000634:	46b9      	mov	r9, r7
 8000636:	46b0      	mov	r8, r6
 8000638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800063a:	20fe      	movs	r0, #254	; 0xfe
 800063c:	1c6a      	adds	r2, r5, #1
 800063e:	4210      	tst	r0, r2
 8000640:	d172      	bne.n	8000728 <__aeabi_fadd+0x20c>
 8000642:	2d00      	cmp	r5, #0
 8000644:	d000      	beq.n	8000648 <__aeabi_fadd+0x12c>
 8000646:	e0ae      	b.n	80007a6 <__aeabi_fadd+0x28a>
 8000648:	2f00      	cmp	r7, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x132>
 800064c:	e0ec      	b.n	8000828 <__aeabi_fadd+0x30c>
 800064e:	4663      	mov	r3, ip
 8000650:	2000      	movs	r0, #0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0e9      	beq.n	800062a <__aeabi_fadd+0x10e>
 8000656:	1afb      	subs	r3, r7, r3
 8000658:	015a      	lsls	r2, r3, #5
 800065a:	d400      	bmi.n	800065e <__aeabi_fadd+0x142>
 800065c:	e0f3      	b.n	8000846 <__aeabi_fadd+0x32a>
 800065e:	4663      	mov	r3, ip
 8000660:	000c      	movs	r4, r1
 8000662:	1bdb      	subs	r3, r3, r7
 8000664:	e7d2      	b.n	800060c <__aeabi_fadd+0xf0>
 8000666:	4661      	mov	r1, ip
 8000668:	2900      	cmp	r1, #0
 800066a:	d05b      	beq.n	8000724 <__aeabi_fadd+0x208>
 800066c:	1e51      	subs	r1, r2, #1
 800066e:	2a01      	cmp	r2, #1
 8000670:	d100      	bne.n	8000674 <__aeabi_fadd+0x158>
 8000672:	e0a7      	b.n	80007c4 <__aeabi_fadd+0x2a8>
 8000674:	2aff      	cmp	r2, #255	; 0xff
 8000676:	d022      	beq.n	80006be <__aeabi_fadd+0x1a2>
 8000678:	000a      	movs	r2, r1
 800067a:	e799      	b.n	80005b0 <__aeabi_fadd+0x94>
 800067c:	20ff      	movs	r0, #255	; 0xff
 800067e:	2600      	movs	r6, #0
 8000680:	e7d3      	b.n	800062a <__aeabi_fadd+0x10e>
 8000682:	21fe      	movs	r1, #254	; 0xfe
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	4211      	tst	r1, r2
 8000688:	d073      	beq.n	8000772 <__aeabi_fadd+0x256>
 800068a:	2aff      	cmp	r2, #255	; 0xff
 800068c:	d0f6      	beq.n	800067c <__aeabi_fadd+0x160>
 800068e:	0015      	movs	r5, r2
 8000690:	4467      	add	r7, ip
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	075a      	lsls	r2, r3, #29
 8000696:	d1bb      	bne.n	8000610 <__aeabi_fadd+0xf4>
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	2dff      	cmp	r5, #255	; 0xff
 800069c:	d00f      	beq.n	80006be <__aeabi_fadd+0x1a2>
 800069e:	025b      	lsls	r3, r3, #9
 80006a0:	0a5e      	lsrs	r6, r3, #9
 80006a2:	b2e8      	uxtb	r0, r5
 80006a4:	e7c1      	b.n	800062a <__aeabi_fadd+0x10e>
 80006a6:	4662      	mov	r2, ip
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d008      	beq.n	80006be <__aeabi_fadd+0x1a2>
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	03d2      	lsls	r2, r2, #15
 80006b0:	4213      	tst	r3, r2
 80006b2:	d004      	beq.n	80006be <__aeabi_fadd+0x1a2>
 80006b4:	4640      	mov	r0, r8
 80006b6:	4210      	tst	r0, r2
 80006b8:	d101      	bne.n	80006be <__aeabi_fadd+0x1a2>
 80006ba:	000c      	movs	r4, r1
 80006bc:	4643      	mov	r3, r8
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0dc      	beq.n	800067c <__aeabi_fadd+0x160>
 80006c2:	2680      	movs	r6, #128	; 0x80
 80006c4:	03f6      	lsls	r6, r6, #15
 80006c6:	431e      	orrs	r6, r3
 80006c8:	0276      	lsls	r6, r6, #9
 80006ca:	20ff      	movs	r0, #255	; 0xff
 80006cc:	0a76      	lsrs	r6, r6, #9
 80006ce:	e7ac      	b.n	800062a <__aeabi_fadd+0x10e>
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d0d6      	beq.n	8000682 <__aeabi_fadd+0x166>
 80006d4:	1b42      	subs	r2, r0, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d05c      	beq.n	8000794 <__aeabi_fadd+0x278>
 80006da:	28ff      	cmp	r0, #255	; 0xff
 80006dc:	d0ee      	beq.n	80006bc <__aeabi_fadd+0x1a0>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	04db      	lsls	r3, r3, #19
 80006e2:	431f      	orrs	r7, r3
 80006e4:	2a1b      	cmp	r2, #27
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_fadd+0x1ce>
 80006e8:	e082      	b.n	80007f0 <__aeabi_fadd+0x2d4>
 80006ea:	2301      	movs	r3, #1
 80006ec:	464d      	mov	r5, r9
 80006ee:	4463      	add	r3, ip
 80006f0:	e763      	b.n	80005ba <__aeabi_fadd+0x9e>
 80006f2:	2220      	movs	r2, #32
 80006f4:	1b40      	subs	r0, r0, r5
 80006f6:	3001      	adds	r0, #1
 80006f8:	1a12      	subs	r2, r2, r0
 80006fa:	0019      	movs	r1, r3
 80006fc:	4093      	lsls	r3, r2
 80006fe:	40c1      	lsrs	r1, r0
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	4193      	sbcs	r3, r2
 8000704:	2500      	movs	r5, #0
 8000706:	430b      	orrs	r3, r1
 8000708:	e780      	b.n	800060c <__aeabi_fadd+0xf0>
 800070a:	2320      	movs	r3, #32
 800070c:	4661      	mov	r1, ip
 800070e:	1a1b      	subs	r3, r3, r0
 8000710:	4099      	lsls	r1, r3
 8000712:	4662      	mov	r2, ip
 8000714:	000b      	movs	r3, r1
 8000716:	40c2      	lsrs	r2, r0
 8000718:	1e59      	subs	r1, r3, #1
 800071a:	418b      	sbcs	r3, r1
 800071c:	4313      	orrs	r3, r2
 800071e:	e764      	b.n	80005ea <__aeabi_fadd+0xce>
 8000720:	000c      	movs	r4, r1
 8000722:	4643      	mov	r3, r8
 8000724:	0015      	movs	r5, r2
 8000726:	e7b8      	b.n	800069a <__aeabi_fadd+0x17e>
 8000728:	4663      	mov	r3, ip
 800072a:	1afe      	subs	r6, r7, r3
 800072c:	0173      	lsls	r3, r6, #5
 800072e:	d445      	bmi.n	80007bc <__aeabi_fadd+0x2a0>
 8000730:	2e00      	cmp	r6, #0
 8000732:	d000      	beq.n	8000736 <__aeabi_fadd+0x21a>
 8000734:	e75e      	b.n	80005f4 <__aeabi_fadd+0xd8>
 8000736:	2400      	movs	r4, #0
 8000738:	2000      	movs	r0, #0
 800073a:	2600      	movs	r6, #0
 800073c:	e775      	b.n	800062a <__aeabi_fadd+0x10e>
 800073e:	2bff      	cmp	r3, #255	; 0xff
 8000740:	d0bb      	beq.n	80006ba <__aeabi_fadd+0x19e>
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	04db      	lsls	r3, r3, #19
 8000746:	431f      	orrs	r7, r3
 8000748:	2a1b      	cmp	r2, #27
 800074a:	dd47      	ble.n	80007dc <__aeabi_fadd+0x2c0>
 800074c:	2301      	movs	r3, #1
 800074e:	4662      	mov	r2, ip
 8000750:	000c      	movs	r4, r1
 8000752:	464d      	mov	r5, r9
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	e749      	b.n	80005ec <__aeabi_fadd+0xd0>
 8000758:	0005      	movs	r5, r0
 800075a:	e79e      	b.n	800069a <__aeabi_fadd+0x17e>
 800075c:	4661      	mov	r1, ip
 800075e:	2320      	movs	r3, #32
 8000760:	40d1      	lsrs	r1, r2
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	4662      	mov	r2, ip
 8000766:	409a      	lsls	r2, r3
 8000768:	0013      	movs	r3, r2
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	4193      	sbcs	r3, r2
 800076e:	430b      	orrs	r3, r1
 8000770:	e722      	b.n	80005b8 <__aeabi_fadd+0x9c>
 8000772:	2d00      	cmp	r5, #0
 8000774:	d146      	bne.n	8000804 <__aeabi_fadd+0x2e8>
 8000776:	2f00      	cmp	r7, #0
 8000778:	d062      	beq.n	8000840 <__aeabi_fadd+0x324>
 800077a:	4663      	mov	r3, ip
 800077c:	2000      	movs	r0, #0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_fadd+0x268>
 8000782:	e752      	b.n	800062a <__aeabi_fadd+0x10e>
 8000784:	003b      	movs	r3, r7
 8000786:	4463      	add	r3, ip
 8000788:	015a      	lsls	r2, r3, #5
 800078a:	d583      	bpl.n	8000694 <__aeabi_fadd+0x178>
 800078c:	4a32      	ldr	r2, [pc, #200]	; (8000858 <__aeabi_fadd+0x33c>)
 800078e:	3501      	adds	r5, #1
 8000790:	4013      	ands	r3, r2
 8000792:	e77f      	b.n	8000694 <__aeabi_fadd+0x178>
 8000794:	2f00      	cmp	r7, #0
 8000796:	d0c4      	beq.n	8000722 <__aeabi_fadd+0x206>
 8000798:	1e53      	subs	r3, r2, #1
 800079a:	2a01      	cmp	r2, #1
 800079c:	d012      	beq.n	80007c4 <__aeabi_fadd+0x2a8>
 800079e:	2aff      	cmp	r2, #255	; 0xff
 80007a0:	d08c      	beq.n	80006bc <__aeabi_fadd+0x1a0>
 80007a2:	001a      	movs	r2, r3
 80007a4:	e79e      	b.n	80006e4 <__aeabi_fadd+0x1c8>
 80007a6:	2f00      	cmp	r7, #0
 80007a8:	d000      	beq.n	80007ac <__aeabi_fadd+0x290>
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fadd+0x18a>
 80007ac:	4663      	mov	r3, ip
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d183      	bne.n	80006ba <__aeabi_fadd+0x19e>
 80007b2:	2680      	movs	r6, #128	; 0x80
 80007b4:	2400      	movs	r4, #0
 80007b6:	20ff      	movs	r0, #255	; 0xff
 80007b8:	03f6      	lsls	r6, r6, #15
 80007ba:	e736      	b.n	800062a <__aeabi_fadd+0x10e>
 80007bc:	4663      	mov	r3, ip
 80007be:	000c      	movs	r4, r1
 80007c0:	1bde      	subs	r6, r3, r7
 80007c2:	e717      	b.n	80005f4 <__aeabi_fadd+0xd8>
 80007c4:	003b      	movs	r3, r7
 80007c6:	4463      	add	r3, ip
 80007c8:	2501      	movs	r5, #1
 80007ca:	015a      	lsls	r2, r3, #5
 80007cc:	d400      	bmi.n	80007d0 <__aeabi_fadd+0x2b4>
 80007ce:	e761      	b.n	8000694 <__aeabi_fadd+0x178>
 80007d0:	2502      	movs	r5, #2
 80007d2:	e6f7      	b.n	80005c4 <__aeabi_fadd+0xa8>
 80007d4:	4663      	mov	r3, ip
 80007d6:	2501      	movs	r5, #1
 80007d8:	1afb      	subs	r3, r7, r3
 80007da:	e707      	b.n	80005ec <__aeabi_fadd+0xd0>
 80007dc:	2320      	movs	r3, #32
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	0038      	movs	r0, r7
 80007e2:	409f      	lsls	r7, r3
 80007e4:	003b      	movs	r3, r7
 80007e6:	40d0      	lsrs	r0, r2
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	4193      	sbcs	r3, r2
 80007ec:	4303      	orrs	r3, r0
 80007ee:	e7ae      	b.n	800074e <__aeabi_fadd+0x232>
 80007f0:	2320      	movs	r3, #32
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	0039      	movs	r1, r7
 80007f6:	409f      	lsls	r7, r3
 80007f8:	003b      	movs	r3, r7
 80007fa:	40d1      	lsrs	r1, r2
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	4193      	sbcs	r3, r2
 8000800:	430b      	orrs	r3, r1
 8000802:	e773      	b.n	80006ec <__aeabi_fadd+0x1d0>
 8000804:	2f00      	cmp	r7, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2ee>
 8000808:	e758      	b.n	80006bc <__aeabi_fadd+0x1a0>
 800080a:	4662      	mov	r2, ip
 800080c:	2a00      	cmp	r2, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x2f6>
 8000810:	e755      	b.n	80006be <__aeabi_fadd+0x1a2>
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4213      	tst	r3, r2
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x300>
 800081a:	e750      	b.n	80006be <__aeabi_fadd+0x1a2>
 800081c:	4641      	mov	r1, r8
 800081e:	4211      	tst	r1, r2
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x308>
 8000822:	e74c      	b.n	80006be <__aeabi_fadd+0x1a2>
 8000824:	4643      	mov	r3, r8
 8000826:	e74a      	b.n	80006be <__aeabi_fadd+0x1a2>
 8000828:	4663      	mov	r3, ip
 800082a:	2b00      	cmp	r3, #0
 800082c:	d083      	beq.n	8000736 <__aeabi_fadd+0x21a>
 800082e:	000c      	movs	r4, r1
 8000830:	4646      	mov	r6, r8
 8000832:	2000      	movs	r0, #0
 8000834:	e6f9      	b.n	800062a <__aeabi_fadd+0x10e>
 8000836:	4663      	mov	r3, ip
 8000838:	000c      	movs	r4, r1
 800083a:	1bdb      	subs	r3, r3, r7
 800083c:	3501      	adds	r5, #1
 800083e:	e6d5      	b.n	80005ec <__aeabi_fadd+0xd0>
 8000840:	4646      	mov	r6, r8
 8000842:	2000      	movs	r0, #0
 8000844:	e6f1      	b.n	800062a <__aeabi_fadd+0x10e>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d000      	beq.n	800084c <__aeabi_fadd+0x330>
 800084a:	e723      	b.n	8000694 <__aeabi_fadd+0x178>
 800084c:	2400      	movs	r4, #0
 800084e:	2600      	movs	r6, #0
 8000850:	e6eb      	b.n	800062a <__aeabi_fadd+0x10e>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	7dffffff 	.word	0x7dffffff
 8000858:	fbffffff 	.word	0xfbffffff

0800085c <__aeabi_fdiv>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	464f      	mov	r7, r9
 8000860:	4646      	mov	r6, r8
 8000862:	46d6      	mov	lr, sl
 8000864:	0245      	lsls	r5, r0, #9
 8000866:	b5c0      	push	{r6, r7, lr}
 8000868:	0047      	lsls	r7, r0, #1
 800086a:	1c0c      	adds	r4, r1, #0
 800086c:	0a6d      	lsrs	r5, r5, #9
 800086e:	0e3f      	lsrs	r7, r7, #24
 8000870:	0fc6      	lsrs	r6, r0, #31
 8000872:	2f00      	cmp	r7, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fdiv+0x1c>
 8000876:	e06f      	b.n	8000958 <__aeabi_fdiv+0xfc>
 8000878:	2fff      	cmp	r7, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fdiv+0x22>
 800087c:	e074      	b.n	8000968 <__aeabi_fdiv+0x10c>
 800087e:	2300      	movs	r3, #0
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	4699      	mov	r9, r3
 8000884:	469a      	mov	sl, r3
 8000886:	00ed      	lsls	r5, r5, #3
 8000888:	04d2      	lsls	r2, r2, #19
 800088a:	4315      	orrs	r5, r2
 800088c:	3f7f      	subs	r7, #127	; 0x7f
 800088e:	0263      	lsls	r3, r4, #9
 8000890:	0a5b      	lsrs	r3, r3, #9
 8000892:	4698      	mov	r8, r3
 8000894:	0063      	lsls	r3, r4, #1
 8000896:	0e1b      	lsrs	r3, r3, #24
 8000898:	0fe4      	lsrs	r4, r4, #31
 800089a:	2b00      	cmp	r3, #0
 800089c:	d04d      	beq.n	800093a <__aeabi_fdiv+0xde>
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	d045      	beq.n	800092e <__aeabi_fdiv+0xd2>
 80008a2:	4642      	mov	r2, r8
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	00d2      	lsls	r2, r2, #3
 80008a8:	04c9      	lsls	r1, r1, #19
 80008aa:	4311      	orrs	r1, r2
 80008ac:	4688      	mov	r8, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	3b7f      	subs	r3, #127	; 0x7f
 80008b2:	0031      	movs	r1, r6
 80008b4:	1aff      	subs	r7, r7, r3
 80008b6:	464b      	mov	r3, r9
 80008b8:	4061      	eors	r1, r4
 80008ba:	b2c9      	uxtb	r1, r1
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d900      	bls.n	80008c2 <__aeabi_fdiv+0x66>
 80008c0:	e0b8      	b.n	8000a34 <__aeabi_fdiv+0x1d8>
 80008c2:	4870      	ldr	r0, [pc, #448]	; (8000a84 <__aeabi_fdiv+0x228>)
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	58c3      	ldr	r3, [r0, r3]
 80008c8:	469f      	mov	pc, r3
 80008ca:	2300      	movs	r3, #0
 80008cc:	4698      	mov	r8, r3
 80008ce:	0026      	movs	r6, r4
 80008d0:	4645      	mov	r5, r8
 80008d2:	4692      	mov	sl, r2
 80008d4:	4653      	mov	r3, sl
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d100      	bne.n	80008dc <__aeabi_fdiv+0x80>
 80008da:	e08d      	b.n	80009f8 <__aeabi_fdiv+0x19c>
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d100      	bne.n	80008e2 <__aeabi_fdiv+0x86>
 80008e0:	e0a1      	b.n	8000a26 <__aeabi_fdiv+0x1ca>
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d018      	beq.n	8000918 <__aeabi_fdiv+0xbc>
 80008e6:	003b      	movs	r3, r7
 80008e8:	337f      	adds	r3, #127	; 0x7f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd6d      	ble.n	80009ca <__aeabi_fdiv+0x16e>
 80008ee:	076a      	lsls	r2, r5, #29
 80008f0:	d004      	beq.n	80008fc <__aeabi_fdiv+0xa0>
 80008f2:	220f      	movs	r2, #15
 80008f4:	402a      	ands	r2, r5
 80008f6:	2a04      	cmp	r2, #4
 80008f8:	d000      	beq.n	80008fc <__aeabi_fdiv+0xa0>
 80008fa:	3504      	adds	r5, #4
 80008fc:	012a      	lsls	r2, r5, #4
 80008fe:	d503      	bpl.n	8000908 <__aeabi_fdiv+0xac>
 8000900:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <__aeabi_fdiv+0x22c>)
 8000902:	401d      	ands	r5, r3
 8000904:	003b      	movs	r3, r7
 8000906:	3380      	adds	r3, #128	; 0x80
 8000908:	2bfe      	cmp	r3, #254	; 0xfe
 800090a:	dd00      	ble.n	800090e <__aeabi_fdiv+0xb2>
 800090c:	e074      	b.n	80009f8 <__aeabi_fdiv+0x19c>
 800090e:	01aa      	lsls	r2, r5, #6
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	b2d8      	uxtb	r0, r3
 8000914:	e002      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000916:	000e      	movs	r6, r1
 8000918:	2000      	movs	r0, #0
 800091a:	2200      	movs	r2, #0
 800091c:	05c0      	lsls	r0, r0, #23
 800091e:	07f6      	lsls	r6, r6, #31
 8000920:	4310      	orrs	r0, r2
 8000922:	4330      	orrs	r0, r6
 8000924:	bce0      	pop	{r5, r6, r7}
 8000926:	46ba      	mov	sl, r7
 8000928:	46b1      	mov	r9, r6
 800092a:	46a8      	mov	r8, r5
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092e:	4643      	mov	r3, r8
 8000930:	2b00      	cmp	r3, #0
 8000932:	d13f      	bne.n	80009b4 <__aeabi_fdiv+0x158>
 8000934:	2202      	movs	r2, #2
 8000936:	3fff      	subs	r7, #255	; 0xff
 8000938:	e003      	b.n	8000942 <__aeabi_fdiv+0xe6>
 800093a:	4643      	mov	r3, r8
 800093c:	2b00      	cmp	r3, #0
 800093e:	d12d      	bne.n	800099c <__aeabi_fdiv+0x140>
 8000940:	2201      	movs	r2, #1
 8000942:	0031      	movs	r1, r6
 8000944:	464b      	mov	r3, r9
 8000946:	4061      	eors	r1, r4
 8000948:	b2c9      	uxtb	r1, r1
 800094a:	4313      	orrs	r3, r2
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d838      	bhi.n	80009c2 <__aeabi_fdiv+0x166>
 8000950:	484e      	ldr	r0, [pc, #312]	; (8000a8c <__aeabi_fdiv+0x230>)
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	58c3      	ldr	r3, [r0, r3]
 8000956:	469f      	mov	pc, r3
 8000958:	2d00      	cmp	r5, #0
 800095a:	d113      	bne.n	8000984 <__aeabi_fdiv+0x128>
 800095c:	2304      	movs	r3, #4
 800095e:	4699      	mov	r9, r3
 8000960:	3b03      	subs	r3, #3
 8000962:	2700      	movs	r7, #0
 8000964:	469a      	mov	sl, r3
 8000966:	e792      	b.n	800088e <__aeabi_fdiv+0x32>
 8000968:	2d00      	cmp	r5, #0
 800096a:	d105      	bne.n	8000978 <__aeabi_fdiv+0x11c>
 800096c:	2308      	movs	r3, #8
 800096e:	4699      	mov	r9, r3
 8000970:	3b06      	subs	r3, #6
 8000972:	27ff      	movs	r7, #255	; 0xff
 8000974:	469a      	mov	sl, r3
 8000976:	e78a      	b.n	800088e <__aeabi_fdiv+0x32>
 8000978:	230c      	movs	r3, #12
 800097a:	4699      	mov	r9, r3
 800097c:	3b09      	subs	r3, #9
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e784      	b.n	800088e <__aeabi_fdiv+0x32>
 8000984:	0028      	movs	r0, r5
 8000986:	f002 fc07 	bl	8003198 <__clzsi2>
 800098a:	2776      	movs	r7, #118	; 0x76
 800098c:	1f43      	subs	r3, r0, #5
 800098e:	409d      	lsls	r5, r3
 8000990:	2300      	movs	r3, #0
 8000992:	427f      	negs	r7, r7
 8000994:	4699      	mov	r9, r3
 8000996:	469a      	mov	sl, r3
 8000998:	1a3f      	subs	r7, r7, r0
 800099a:	e778      	b.n	800088e <__aeabi_fdiv+0x32>
 800099c:	4640      	mov	r0, r8
 800099e:	f002 fbfb 	bl	8003198 <__clzsi2>
 80009a2:	4642      	mov	r2, r8
 80009a4:	1f43      	subs	r3, r0, #5
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2376      	movs	r3, #118	; 0x76
 80009aa:	425b      	negs	r3, r3
 80009ac:	4690      	mov	r8, r2
 80009ae:	1a1b      	subs	r3, r3, r0
 80009b0:	2200      	movs	r2, #0
 80009b2:	e77e      	b.n	80008b2 <__aeabi_fdiv+0x56>
 80009b4:	2303      	movs	r3, #3
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4691      	mov	r9, r2
 80009bc:	33fc      	adds	r3, #252	; 0xfc
 80009be:	2203      	movs	r2, #3
 80009c0:	e777      	b.n	80008b2 <__aeabi_fdiv+0x56>
 80009c2:	000e      	movs	r6, r1
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	2200      	movs	r2, #0
 80009c8:	e7a8      	b.n	800091c <__aeabi_fdiv+0xc0>
 80009ca:	2201      	movs	r2, #1
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b1b      	cmp	r3, #27
 80009d0:	dca2      	bgt.n	8000918 <__aeabi_fdiv+0xbc>
 80009d2:	379e      	adds	r7, #158	; 0x9e
 80009d4:	002a      	movs	r2, r5
 80009d6:	40bd      	lsls	r5, r7
 80009d8:	40da      	lsrs	r2, r3
 80009da:	1e6b      	subs	r3, r5, #1
 80009dc:	419d      	sbcs	r5, r3
 80009de:	4315      	orrs	r5, r2
 80009e0:	076a      	lsls	r2, r5, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fdiv+0x192>
 80009e4:	220f      	movs	r2, #15
 80009e6:	402a      	ands	r2, r5
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fdiv+0x192>
 80009ec:	3504      	adds	r5, #4
 80009ee:	016a      	lsls	r2, r5, #5
 80009f0:	d544      	bpl.n	8000a7c <__aeabi_fdiv+0x220>
 80009f2:	2001      	movs	r0, #1
 80009f4:	2200      	movs	r2, #0
 80009f6:	e791      	b.n	800091c <__aeabi_fdiv+0xc0>
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	2200      	movs	r2, #0
 80009fc:	e78e      	b.n	800091c <__aeabi_fdiv+0xc0>
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	2600      	movs	r6, #0
 8000a02:	20ff      	movs	r0, #255	; 0xff
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	e789      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4698      	mov	r8, r3
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	03d2      	lsls	r2, r2, #15
 8000a10:	4215      	tst	r5, r2
 8000a12:	d008      	beq.n	8000a26 <__aeabi_fdiv+0x1ca>
 8000a14:	4643      	mov	r3, r8
 8000a16:	4213      	tst	r3, r2
 8000a18:	d105      	bne.n	8000a26 <__aeabi_fdiv+0x1ca>
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	0252      	lsls	r2, r2, #9
 8000a1e:	0026      	movs	r6, r4
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	0a52      	lsrs	r2, r2, #9
 8000a24:	e77a      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	03d2      	lsls	r2, r2, #15
 8000a2a:	432a      	orrs	r2, r5
 8000a2c:	0252      	lsls	r2, r2, #9
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	0a52      	lsrs	r2, r2, #9
 8000a32:	e773      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a34:	4642      	mov	r2, r8
 8000a36:	016b      	lsls	r3, r5, #5
 8000a38:	0155      	lsls	r5, r2, #5
 8000a3a:	42ab      	cmp	r3, r5
 8000a3c:	d21a      	bcs.n	8000a74 <__aeabi_fdiv+0x218>
 8000a3e:	201b      	movs	r0, #27
 8000a40:	2200      	movs	r2, #0
 8000a42:	3f01      	subs	r7, #1
 8000a44:	2601      	movs	r6, #1
 8000a46:	001c      	movs	r4, r3
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2c00      	cmp	r4, #0
 8000a4e:	db01      	blt.n	8000a54 <__aeabi_fdiv+0x1f8>
 8000a50:	429d      	cmp	r5, r3
 8000a52:	d801      	bhi.n	8000a58 <__aeabi_fdiv+0x1fc>
 8000a54:	1b5b      	subs	r3, r3, r5
 8000a56:	4332      	orrs	r2, r6
 8000a58:	3801      	subs	r0, #1
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	d1f3      	bne.n	8000a46 <__aeabi_fdiv+0x1ea>
 8000a5e:	1e58      	subs	r0, r3, #1
 8000a60:	4183      	sbcs	r3, r0
 8000a62:	4313      	orrs	r3, r2
 8000a64:	001d      	movs	r5, r3
 8000a66:	003b      	movs	r3, r7
 8000a68:	337f      	adds	r3, #127	; 0x7f
 8000a6a:	000e      	movs	r6, r1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd00      	ble.n	8000a72 <__aeabi_fdiv+0x216>
 8000a70:	e73d      	b.n	80008ee <__aeabi_fdiv+0x92>
 8000a72:	e7aa      	b.n	80009ca <__aeabi_fdiv+0x16e>
 8000a74:	201a      	movs	r0, #26
 8000a76:	2201      	movs	r2, #1
 8000a78:	1b5b      	subs	r3, r3, r5
 8000a7a:	e7e3      	b.n	8000a44 <__aeabi_fdiv+0x1e8>
 8000a7c:	01aa      	lsls	r2, r5, #6
 8000a7e:	2000      	movs	r0, #0
 8000a80:	0a52      	lsrs	r2, r2, #9
 8000a82:	e74b      	b.n	800091c <__aeabi_fdiv+0xc0>
 8000a84:	08009ee8 	.word	0x08009ee8
 8000a88:	f7ffffff 	.word	0xf7ffffff
 8000a8c:	08009f28 	.word	0x08009f28

08000a90 <__eqsf2>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	0042      	lsls	r2, r0, #1
 8000a94:	0245      	lsls	r5, r0, #9
 8000a96:	024e      	lsls	r6, r1, #9
 8000a98:	004c      	lsls	r4, r1, #1
 8000a9a:	0fc3      	lsrs	r3, r0, #31
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0a76      	lsrs	r6, r6, #9
 8000aa4:	0e24      	lsrs	r4, r4, #24
 8000aa6:	0fc9      	lsrs	r1, r1, #31
 8000aa8:	2aff      	cmp	r2, #255	; 0xff
 8000aaa:	d006      	beq.n	8000aba <__eqsf2+0x2a>
 8000aac:	2cff      	cmp	r4, #255	; 0xff
 8000aae:	d003      	beq.n	8000ab8 <__eqsf2+0x28>
 8000ab0:	42a2      	cmp	r2, r4
 8000ab2:	d101      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ab4:	42b5      	cmp	r5, r6
 8000ab6:	d006      	beq.n	8000ac6 <__eqsf2+0x36>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x28>
 8000abe:	2cff      	cmp	r4, #255	; 0xff
 8000ac0:	d1fa      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d006      	beq.n	8000ad8 <__eqsf2+0x48>
 8000aca:	2001      	movs	r0, #1
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d1f3      	bne.n	8000ab8 <__eqsf2+0x28>
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	1e43      	subs	r3, r0, #1
 8000ad4:	4198      	sbcs	r0, r3
 8000ad6:	e7ef      	b.n	8000ab8 <__eqsf2+0x28>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7ed      	b.n	8000ab8 <__eqsf2+0x28>

08000adc <__gesf2>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0245      	lsls	r5, r0, #9
 8000ae2:	024e      	lsls	r6, r1, #9
 8000ae4:	004c      	lsls	r4, r1, #1
 8000ae6:	0fc3      	lsrs	r3, r0, #31
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a76      	lsrs	r6, r6, #9
 8000aee:	0e24      	lsrs	r4, r4, #24
 8000af0:	0fc8      	lsrs	r0, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d01b      	beq.n	8000b2e <__gesf2+0x52>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d00e      	beq.n	8000b18 <__gesf2+0x3c>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11b      	bne.n	8000b36 <__gesf2+0x5a>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d101      	bne.n	8000b06 <__gesf2+0x2a>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x64>
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d00c      	beq.n	8000b24 <__gesf2+0x48>
 8000b0a:	4283      	cmp	r3, r0
 8000b0c:	d01c      	beq.n	8000b48 <__gesf2+0x6c>
 8000b0e:	2102      	movs	r1, #2
 8000b10:	1e58      	subs	r0, r3, #1
 8000b12:	4008      	ands	r0, r1
 8000b14:	3801      	subs	r0, #1
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d122      	bne.n	8000b62 <__gesf2+0x86>
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d1f4      	bne.n	8000b0a <__gesf2+0x2e>
 8000b20:	2d00      	cmp	r5, #0
 8000b22:	d1f2      	bne.n	8000b0a <__gesf2+0x2e>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d1f6      	bne.n	8000b16 <__gesf2+0x3a>
 8000b28:	2001      	movs	r0, #1
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	e7f3      	b.n	8000b16 <__gesf2+0x3a>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d117      	bne.n	8000b62 <__gesf2+0x86>
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d0f0      	beq.n	8000b18 <__gesf2+0x3c>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d1e7      	bne.n	8000b0a <__gesf2+0x2e>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d1e5      	bne.n	8000b0a <__gesf2+0x2e>
 8000b3e:	e7e6      	b.n	8000b0e <__gesf2+0x32>
 8000b40:	2000      	movs	r0, #0
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d0e7      	beq.n	8000b16 <__gesf2+0x3a>
 8000b46:	e7e2      	b.n	8000b0e <__gesf2+0x32>
 8000b48:	42a2      	cmp	r2, r4
 8000b4a:	dc05      	bgt.n	8000b58 <__gesf2+0x7c>
 8000b4c:	dbea      	blt.n	8000b24 <__gesf2+0x48>
 8000b4e:	42b5      	cmp	r5, r6
 8000b50:	d802      	bhi.n	8000b58 <__gesf2+0x7c>
 8000b52:	d3e7      	bcc.n	8000b24 <__gesf2+0x48>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e7de      	b.n	8000b16 <__gesf2+0x3a>
 8000b58:	4243      	negs	r3, r0
 8000b5a:	4158      	adcs	r0, r3
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7d9      	b.n	8000b16 <__gesf2+0x3a>
 8000b62:	2002      	movs	r0, #2
 8000b64:	4240      	negs	r0, r0
 8000b66:	e7d6      	b.n	8000b16 <__gesf2+0x3a>

08000b68 <__lesf2>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	024e      	lsls	r6, r1, #9
 8000b70:	004c      	lsls	r4, r1, #1
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	0e12      	lsrs	r2, r2, #24
 8000b78:	0a76      	lsrs	r6, r6, #9
 8000b7a:	0e24      	lsrs	r4, r4, #24
 8000b7c:	0fc8      	lsrs	r0, r1, #31
 8000b7e:	2aff      	cmp	r2, #255	; 0xff
 8000b80:	d00b      	beq.n	8000b9a <__lesf2+0x32>
 8000b82:	2cff      	cmp	r4, #255	; 0xff
 8000b84:	d00d      	beq.n	8000ba2 <__lesf2+0x3a>
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d11f      	bne.n	8000bca <__lesf2+0x62>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d116      	bne.n	8000bbc <__lesf2+0x54>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d114      	bne.n	8000bbc <__lesf2+0x54>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d010      	beq.n	8000bba <__lesf2+0x52>
 8000b98:	e009      	b.n	8000bae <__lesf2+0x46>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d10c      	bne.n	8000bb8 <__lesf2+0x50>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d113      	bne.n	8000bca <__lesf2+0x62>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d108      	bne.n	8000bb8 <__lesf2+0x50>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d008      	beq.n	8000bbc <__lesf2+0x54>
 8000baa:	4283      	cmp	r3, r0
 8000bac:	d012      	beq.n	8000bd4 <__lesf2+0x6c>
 8000bae:	2102      	movs	r1, #2
 8000bb0:	1e58      	subs	r0, r3, #1
 8000bb2:	4008      	ands	r0, r1
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	e000      	b.n	8000bba <__lesf2+0x52>
 8000bb8:	2002      	movs	r0, #2
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d1f4      	bne.n	8000baa <__lesf2+0x42>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d1fa      	bne.n	8000bba <__lesf2+0x52>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	e7f7      	b.n	8000bba <__lesf2+0x52>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d1ed      	bne.n	8000baa <__lesf2+0x42>
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d1eb      	bne.n	8000baa <__lesf2+0x42>
 8000bd2:	e7ec      	b.n	8000bae <__lesf2+0x46>
 8000bd4:	42a2      	cmp	r2, r4
 8000bd6:	dc05      	bgt.n	8000be4 <__lesf2+0x7c>
 8000bd8:	dbf2      	blt.n	8000bc0 <__lesf2+0x58>
 8000bda:	42b5      	cmp	r5, r6
 8000bdc:	d802      	bhi.n	8000be4 <__lesf2+0x7c>
 8000bde:	d3ef      	bcc.n	8000bc0 <__lesf2+0x58>
 8000be0:	2000      	movs	r0, #0
 8000be2:	e7ea      	b.n	8000bba <__lesf2+0x52>
 8000be4:	4243      	negs	r3, r0
 8000be6:	4158      	adcs	r0, r3
 8000be8:	0040      	lsls	r0, r0, #1
 8000bea:	3801      	subs	r0, #1
 8000bec:	e7e5      	b.n	8000bba <__lesf2+0x52>
 8000bee:	46c0      	nop			; (mov r8, r8)

08000bf0 <__aeabi_fmul>:
 8000bf0:	0243      	lsls	r3, r0, #9
 8000bf2:	0a5b      	lsrs	r3, r3, #9
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	464f      	mov	r7, r9
 8000bf8:	4646      	mov	r6, r8
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	46d6      	mov	lr, sl
 8000bfe:	0fc3      	lsrs	r3, r0, #31
 8000c00:	0045      	lsls	r5, r0, #1
 8000c02:	4698      	mov	r8, r3
 8000c04:	b5c0      	push	{r6, r7, lr}
 8000c06:	464b      	mov	r3, r9
 8000c08:	1c0f      	adds	r7, r1, #0
 8000c0a:	0e2d      	lsrs	r5, r5, #24
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fmul+0x20>
 8000c0e:	e0cb      	b.n	8000da8 <__aeabi_fmul+0x1b8>
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fmul+0x26>
 8000c14:	e0cf      	b.n	8000db6 <__aeabi_fmul+0x1c6>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	04d2      	lsls	r2, r2, #19
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	4691      	mov	r9, r2
 8000c22:	2600      	movs	r6, #0
 8000c24:	469a      	mov	sl, r3
 8000c26:	3d7f      	subs	r5, #127	; 0x7f
 8000c28:	027c      	lsls	r4, r7, #9
 8000c2a:	007b      	lsls	r3, r7, #1
 8000c2c:	0a64      	lsrs	r4, r4, #9
 8000c2e:	0e1b      	lsrs	r3, r3, #24
 8000c30:	0fff      	lsrs	r7, r7, #31
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fmul+0x48>
 8000c36:	e0a9      	b.n	8000d8c <__aeabi_fmul+0x19c>
 8000c38:	2bff      	cmp	r3, #255	; 0xff
 8000c3a:	d011      	beq.n	8000c60 <__aeabi_fmul+0x70>
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	00e4      	lsls	r4, r4, #3
 8000c40:	04d2      	lsls	r2, r2, #19
 8000c42:	4314      	orrs	r4, r2
 8000c44:	4642      	mov	r2, r8
 8000c46:	3b7f      	subs	r3, #127	; 0x7f
 8000c48:	195b      	adds	r3, r3, r5
 8000c4a:	407a      	eors	r2, r7
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	1c5d      	adds	r5, r3, #1
 8000c52:	2e0a      	cmp	r6, #10
 8000c54:	dd13      	ble.n	8000c7e <__aeabi_fmul+0x8e>
 8000c56:	003a      	movs	r2, r7
 8000c58:	2e0b      	cmp	r6, #11
 8000c5a:	d047      	beq.n	8000cec <__aeabi_fmul+0xfc>
 8000c5c:	4647      	mov	r7, r8
 8000c5e:	e03f      	b.n	8000ce0 <__aeabi_fmul+0xf0>
 8000c60:	002b      	movs	r3, r5
 8000c62:	33ff      	adds	r3, #255	; 0xff
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d11e      	bne.n	8000ca6 <__aeabi_fmul+0xb6>
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4316      	orrs	r6, r2
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	3501      	adds	r5, #1
 8000c70:	407a      	eors	r2, r7
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	35ff      	adds	r5, #255	; 0xff
 8000c76:	2e0a      	cmp	r6, #10
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_fmul+0x8c>
 8000c7a:	e0e4      	b.n	8000e46 <__aeabi_fmul+0x256>
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	2e02      	cmp	r6, #2
 8000c80:	dc1c      	bgt.n	8000cbc <__aeabi_fmul+0xcc>
 8000c82:	3e01      	subs	r6, #1
 8000c84:	2e01      	cmp	r6, #1
 8000c86:	d842      	bhi.n	8000d0e <__aeabi_fmul+0x11e>
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d03d      	beq.n	8000d08 <__aeabi_fmul+0x118>
 8000c8c:	2801      	cmp	r0, #1
 8000c8e:	d166      	bne.n	8000d5e <__aeabi_fmul+0x16e>
 8000c90:	2000      	movs	r0, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	05c0      	lsls	r0, r0, #23
 8000c96:	4308      	orrs	r0, r1
 8000c98:	07d2      	lsls	r2, r2, #31
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	bce0      	pop	{r5, r6, r7}
 8000c9e:	46ba      	mov	sl, r7
 8000ca0:	46b1      	mov	r9, r6
 8000ca2:	46a8      	mov	r8, r5
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4316      	orrs	r6, r2
 8000caa:	4642      	mov	r2, r8
 8000cac:	3501      	adds	r5, #1
 8000cae:	407a      	eors	r2, r7
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	35ff      	adds	r5, #255	; 0xff
 8000cb4:	2e0a      	cmp	r6, #10
 8000cb6:	dd00      	ble.n	8000cba <__aeabi_fmul+0xca>
 8000cb8:	e0e4      	b.n	8000e84 <__aeabi_fmul+0x294>
 8000cba:	2003      	movs	r0, #3
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	40b1      	lsls	r1, r6
 8000cc0:	26a6      	movs	r6, #166	; 0xa6
 8000cc2:	00f6      	lsls	r6, r6, #3
 8000cc4:	4231      	tst	r1, r6
 8000cc6:	d10a      	bne.n	8000cde <__aeabi_fmul+0xee>
 8000cc8:	2690      	movs	r6, #144	; 0x90
 8000cca:	00b6      	lsls	r6, r6, #2
 8000ccc:	4231      	tst	r1, r6
 8000cce:	d116      	bne.n	8000cfe <__aeabi_fmul+0x10e>
 8000cd0:	3eb9      	subs	r6, #185	; 0xb9
 8000cd2:	3eff      	subs	r6, #255	; 0xff
 8000cd4:	420e      	tst	r6, r1
 8000cd6:	d01a      	beq.n	8000d0e <__aeabi_fmul+0x11e>
 8000cd8:	46a1      	mov	r9, r4
 8000cda:	4682      	mov	sl, r0
 8000cdc:	e000      	b.n	8000ce0 <__aeabi_fmul+0xf0>
 8000cde:	0017      	movs	r7, r2
 8000ce0:	4653      	mov	r3, sl
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d00f      	beq.n	8000d08 <__aeabi_fmul+0x118>
 8000ce8:	464c      	mov	r4, r9
 8000cea:	4650      	mov	r0, sl
 8000cec:	2803      	cmp	r0, #3
 8000cee:	d1cd      	bne.n	8000c8c <__aeabi_fmul+0x9c>
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	03c9      	lsls	r1, r1, #15
 8000cf4:	4321      	orrs	r1, r4
 8000cf6:	0249      	lsls	r1, r1, #9
 8000cf8:	20ff      	movs	r0, #255	; 0xff
 8000cfa:	0a49      	lsrs	r1, r1, #9
 8000cfc:	e7ca      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	2200      	movs	r2, #0
 8000d02:	20ff      	movs	r0, #255	; 0xff
 8000d04:	03c9      	lsls	r1, r1, #15
 8000d06:	e7c5      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000d08:	20ff      	movs	r0, #255	; 0xff
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	e7c2      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	4649      	mov	r1, r9
 8000d12:	0424      	lsls	r4, r4, #16
 8000d14:	0c24      	lsrs	r4, r4, #16
 8000d16:	0027      	movs	r7, r4
 8000d18:	0c0e      	lsrs	r6, r1, #16
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	0c09      	lsrs	r1, r1, #16
 8000d1e:	4374      	muls	r4, r6
 8000d20:	434f      	muls	r7, r1
 8000d22:	4346      	muls	r6, r0
 8000d24:	4348      	muls	r0, r1
 8000d26:	0c39      	lsrs	r1, r7, #16
 8000d28:	1900      	adds	r0, r0, r4
 8000d2a:	1809      	adds	r1, r1, r0
 8000d2c:	428c      	cmp	r4, r1
 8000d2e:	d903      	bls.n	8000d38 <__aeabi_fmul+0x148>
 8000d30:	2080      	movs	r0, #128	; 0x80
 8000d32:	0240      	lsls	r0, r0, #9
 8000d34:	4684      	mov	ip, r0
 8000d36:	4466      	add	r6, ip
 8000d38:	043f      	lsls	r7, r7, #16
 8000d3a:	0408      	lsls	r0, r1, #16
 8000d3c:	0c3f      	lsrs	r7, r7, #16
 8000d3e:	19c0      	adds	r0, r0, r7
 8000d40:	0184      	lsls	r4, r0, #6
 8000d42:	1e67      	subs	r7, r4, #1
 8000d44:	41bc      	sbcs	r4, r7
 8000d46:	0c09      	lsrs	r1, r1, #16
 8000d48:	0e80      	lsrs	r0, r0, #26
 8000d4a:	1989      	adds	r1, r1, r6
 8000d4c:	4304      	orrs	r4, r0
 8000d4e:	0189      	lsls	r1, r1, #6
 8000d50:	430c      	orrs	r4, r1
 8000d52:	0109      	lsls	r1, r1, #4
 8000d54:	d571      	bpl.n	8000e3a <__aeabi_fmul+0x24a>
 8000d56:	2301      	movs	r3, #1
 8000d58:	0861      	lsrs	r1, r4, #1
 8000d5a:	401c      	ands	r4, r3
 8000d5c:	430c      	orrs	r4, r1
 8000d5e:	002b      	movs	r3, r5
 8000d60:	337f      	adds	r3, #127	; 0x7f
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dd51      	ble.n	8000e0a <__aeabi_fmul+0x21a>
 8000d66:	0761      	lsls	r1, r4, #29
 8000d68:	d004      	beq.n	8000d74 <__aeabi_fmul+0x184>
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	4021      	ands	r1, r4
 8000d6e:	2904      	cmp	r1, #4
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fmul+0x184>
 8000d72:	3404      	adds	r4, #4
 8000d74:	0121      	lsls	r1, r4, #4
 8000d76:	d503      	bpl.n	8000d80 <__aeabi_fmul+0x190>
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <__aeabi_fmul+0x298>)
 8000d7a:	401c      	ands	r4, r3
 8000d7c:	002b      	movs	r3, r5
 8000d7e:	3380      	adds	r3, #128	; 0x80
 8000d80:	2bfe      	cmp	r3, #254	; 0xfe
 8000d82:	dcc1      	bgt.n	8000d08 <__aeabi_fmul+0x118>
 8000d84:	01a1      	lsls	r1, r4, #6
 8000d86:	0a49      	lsrs	r1, r1, #9
 8000d88:	b2d8      	uxtb	r0, r3
 8000d8a:	e783      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d12c      	bne.n	8000dea <__aeabi_fmul+0x1fa>
 8000d90:	2301      	movs	r3, #1
 8000d92:	4642      	mov	r2, r8
 8000d94:	431e      	orrs	r6, r3
 8000d96:	002b      	movs	r3, r5
 8000d98:	407a      	eors	r2, r7
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	1c5d      	adds	r5, r3, #1
 8000da0:	2e0a      	cmp	r6, #10
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_fmul+0x1b6>
 8000da4:	e757      	b.n	8000c56 <__aeabi_fmul+0x66>
 8000da6:	e76a      	b.n	8000c7e <__aeabi_fmul+0x8e>
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d110      	bne.n	8000dce <__aeabi_fmul+0x1de>
 8000dac:	2301      	movs	r3, #1
 8000dae:	2604      	movs	r6, #4
 8000db0:	2500      	movs	r5, #0
 8000db2:	469a      	mov	sl, r3
 8000db4:	e738      	b.n	8000c28 <__aeabi_fmul+0x38>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d104      	bne.n	8000dc4 <__aeabi_fmul+0x1d4>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	2608      	movs	r6, #8
 8000dbe:	25ff      	movs	r5, #255	; 0xff
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	e731      	b.n	8000c28 <__aeabi_fmul+0x38>
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	260c      	movs	r6, #12
 8000dc8:	25ff      	movs	r5, #255	; 0xff
 8000dca:	469a      	mov	sl, r3
 8000dcc:	e72c      	b.n	8000c28 <__aeabi_fmul+0x38>
 8000dce:	4648      	mov	r0, r9
 8000dd0:	f002 f9e2 	bl	8003198 <__clzsi2>
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	1f43      	subs	r3, r0, #5
 8000dd8:	2576      	movs	r5, #118	; 0x76
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	2300      	movs	r3, #0
 8000dde:	426d      	negs	r5, r5
 8000de0:	4691      	mov	r9, r2
 8000de2:	2600      	movs	r6, #0
 8000de4:	469a      	mov	sl, r3
 8000de6:	1a2d      	subs	r5, r5, r0
 8000de8:	e71e      	b.n	8000c28 <__aeabi_fmul+0x38>
 8000dea:	0020      	movs	r0, r4
 8000dec:	f002 f9d4 	bl	8003198 <__clzsi2>
 8000df0:	4642      	mov	r2, r8
 8000df2:	1f43      	subs	r3, r0, #5
 8000df4:	409c      	lsls	r4, r3
 8000df6:	1a2b      	subs	r3, r5, r0
 8000df8:	3b76      	subs	r3, #118	; 0x76
 8000dfa:	407a      	eors	r2, r7
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	1c5d      	adds	r5, r3, #1
 8000e02:	2e0a      	cmp	r6, #10
 8000e04:	dd00      	ble.n	8000e08 <__aeabi_fmul+0x218>
 8000e06:	e726      	b.n	8000c56 <__aeabi_fmul+0x66>
 8000e08:	e739      	b.n	8000c7e <__aeabi_fmul+0x8e>
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	1acb      	subs	r3, r1, r3
 8000e0e:	2b1b      	cmp	r3, #27
 8000e10:	dd00      	ble.n	8000e14 <__aeabi_fmul+0x224>
 8000e12:	e73d      	b.n	8000c90 <__aeabi_fmul+0xa0>
 8000e14:	359e      	adds	r5, #158	; 0x9e
 8000e16:	0021      	movs	r1, r4
 8000e18:	40ac      	lsls	r4, r5
 8000e1a:	40d9      	lsrs	r1, r3
 8000e1c:	1e63      	subs	r3, r4, #1
 8000e1e:	419c      	sbcs	r4, r3
 8000e20:	4321      	orrs	r1, r4
 8000e22:	074b      	lsls	r3, r1, #29
 8000e24:	d004      	beq.n	8000e30 <__aeabi_fmul+0x240>
 8000e26:	230f      	movs	r3, #15
 8000e28:	400b      	ands	r3, r1
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_fmul+0x240>
 8000e2e:	3104      	adds	r1, #4
 8000e30:	014b      	lsls	r3, r1, #5
 8000e32:	d504      	bpl.n	8000e3e <__aeabi_fmul+0x24e>
 8000e34:	2001      	movs	r0, #1
 8000e36:	2100      	movs	r1, #0
 8000e38:	e72c      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000e3a:	001d      	movs	r5, r3
 8000e3c:	e78f      	b.n	8000d5e <__aeabi_fmul+0x16e>
 8000e3e:	0189      	lsls	r1, r1, #6
 8000e40:	2000      	movs	r0, #0
 8000e42:	0a49      	lsrs	r1, r1, #9
 8000e44:	e726      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000e46:	2302      	movs	r3, #2
 8000e48:	2e0f      	cmp	r6, #15
 8000e4a:	d10c      	bne.n	8000e66 <__aeabi_fmul+0x276>
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	464b      	mov	r3, r9
 8000e50:	03c9      	lsls	r1, r1, #15
 8000e52:	420b      	tst	r3, r1
 8000e54:	d00d      	beq.n	8000e72 <__aeabi_fmul+0x282>
 8000e56:	420c      	tst	r4, r1
 8000e58:	d10b      	bne.n	8000e72 <__aeabi_fmul+0x282>
 8000e5a:	4321      	orrs	r1, r4
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	003a      	movs	r2, r7
 8000e60:	20ff      	movs	r0, #255	; 0xff
 8000e62:	0a49      	lsrs	r1, r1, #9
 8000e64:	e716      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000e66:	2e0b      	cmp	r6, #11
 8000e68:	d000      	beq.n	8000e6c <__aeabi_fmul+0x27c>
 8000e6a:	e6f7      	b.n	8000c5c <__aeabi_fmul+0x6c>
 8000e6c:	46a1      	mov	r9, r4
 8000e6e:	469a      	mov	sl, r3
 8000e70:	e736      	b.n	8000ce0 <__aeabi_fmul+0xf0>
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	464b      	mov	r3, r9
 8000e76:	03c9      	lsls	r1, r1, #15
 8000e78:	4319      	orrs	r1, r3
 8000e7a:	0249      	lsls	r1, r1, #9
 8000e7c:	4642      	mov	r2, r8
 8000e7e:	20ff      	movs	r0, #255	; 0xff
 8000e80:	0a49      	lsrs	r1, r1, #9
 8000e82:	e707      	b.n	8000c94 <__aeabi_fmul+0xa4>
 8000e84:	2303      	movs	r3, #3
 8000e86:	e7df      	b.n	8000e48 <__aeabi_fmul+0x258>
 8000e88:	f7ffffff 	.word	0xf7ffffff

08000e8c <__aeabi_fsub>:
 8000e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8e:	46c6      	mov	lr, r8
 8000e90:	0243      	lsls	r3, r0, #9
 8000e92:	0a5b      	lsrs	r3, r3, #9
 8000e94:	0045      	lsls	r5, r0, #1
 8000e96:	00da      	lsls	r2, r3, #3
 8000e98:	0fc4      	lsrs	r4, r0, #31
 8000e9a:	0248      	lsls	r0, r1, #9
 8000e9c:	004f      	lsls	r7, r1, #1
 8000e9e:	4694      	mov	ip, r2
 8000ea0:	0a42      	lsrs	r2, r0, #9
 8000ea2:	001e      	movs	r6, r3
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	b500      	push	{lr}
 8000ea8:	0e2d      	lsrs	r5, r5, #24
 8000eaa:	0e3f      	lsrs	r7, r7, #24
 8000eac:	0fc9      	lsrs	r1, r1, #31
 8000eae:	0980      	lsrs	r0, r0, #6
 8000eb0:	2fff      	cmp	r7, #255	; 0xff
 8000eb2:	d059      	beq.n	8000f68 <__aeabi_fsub+0xdc>
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4051      	eors	r1, r2
 8000eb8:	428c      	cmp	r4, r1
 8000eba:	d039      	beq.n	8000f30 <__aeabi_fsub+0xa4>
 8000ebc:	1bea      	subs	r2, r5, r7
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	dd58      	ble.n	8000f74 <__aeabi_fsub+0xe8>
 8000ec2:	2f00      	cmp	r7, #0
 8000ec4:	d068      	beq.n	8000f98 <__aeabi_fsub+0x10c>
 8000ec6:	2dff      	cmp	r5, #255	; 0xff
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_fsub+0x40>
 8000eca:	e0d1      	b.n	8001070 <__aeabi_fsub+0x1e4>
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	04db      	lsls	r3, r3, #19
 8000ed0:	4318      	orrs	r0, r3
 8000ed2:	2a1b      	cmp	r2, #27
 8000ed4:	dc00      	bgt.n	8000ed8 <__aeabi_fsub+0x4c>
 8000ed6:	e0e3      	b.n	80010a0 <__aeabi_fsub+0x214>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4662      	mov	r2, ip
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	015a      	lsls	r2, r3, #5
 8000ee0:	d400      	bmi.n	8000ee4 <__aeabi_fsub+0x58>
 8000ee2:	e0ac      	b.n	800103e <__aeabi_fsub+0x1b2>
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	099e      	lsrs	r6, r3, #6
 8000ee8:	0030      	movs	r0, r6
 8000eea:	f002 f955 	bl	8003198 <__clzsi2>
 8000eee:	0033      	movs	r3, r6
 8000ef0:	3805      	subs	r0, #5
 8000ef2:	4083      	lsls	r3, r0
 8000ef4:	4285      	cmp	r5, r0
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0x6e>
 8000ef8:	e0c6      	b.n	8001088 <__aeabi_fsub+0x1fc>
 8000efa:	4ab2      	ldr	r2, [pc, #712]	; (80011c4 <__aeabi_fsub+0x338>)
 8000efc:	1a2d      	subs	r5, r5, r0
 8000efe:	4013      	ands	r3, r2
 8000f00:	075a      	lsls	r2, r3, #29
 8000f02:	d004      	beq.n	8000f0e <__aeabi_fsub+0x82>
 8000f04:	220f      	movs	r2, #15
 8000f06:	401a      	ands	r2, r3
 8000f08:	2a04      	cmp	r2, #4
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_fsub+0x82>
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	015a      	lsls	r2, r3, #5
 8000f10:	d400      	bmi.n	8000f14 <__aeabi_fsub+0x88>
 8000f12:	e097      	b.n	8001044 <__aeabi_fsub+0x1b8>
 8000f14:	1c6a      	adds	r2, r5, #1
 8000f16:	2dfe      	cmp	r5, #254	; 0xfe
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0x90>
 8000f1a:	e084      	b.n	8001026 <__aeabi_fsub+0x19a>
 8000f1c:	019b      	lsls	r3, r3, #6
 8000f1e:	0a5e      	lsrs	r6, r3, #9
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	05d0      	lsls	r0, r2, #23
 8000f24:	4330      	orrs	r0, r6
 8000f26:	07e4      	lsls	r4, r4, #31
 8000f28:	4320      	orrs	r0, r4
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	46b8      	mov	r8, r7
 8000f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f30:	1bea      	subs	r2, r5, r7
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	dd41      	ble.n	8000fba <__aeabi_fsub+0x12e>
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	d06b      	beq.n	8001012 <__aeabi_fsub+0x186>
 8000f3a:	2dff      	cmp	r5, #255	; 0xff
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0xb4>
 8000f3e:	e097      	b.n	8001070 <__aeabi_fsub+0x1e4>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	04db      	lsls	r3, r3, #19
 8000f44:	4318      	orrs	r0, r3
 8000f46:	2a1b      	cmp	r2, #27
 8000f48:	dc00      	bgt.n	8000f4c <__aeabi_fsub+0xc0>
 8000f4a:	e0cc      	b.n	80010e6 <__aeabi_fsub+0x25a>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	4463      	add	r3, ip
 8000f50:	015a      	lsls	r2, r3, #5
 8000f52:	d574      	bpl.n	800103e <__aeabi_fsub+0x1b2>
 8000f54:	3501      	adds	r5, #1
 8000f56:	2dff      	cmp	r5, #255	; 0xff
 8000f58:	d065      	beq.n	8001026 <__aeabi_fsub+0x19a>
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	499a      	ldr	r1, [pc, #616]	; (80011c8 <__aeabi_fsub+0x33c>)
 8000f5e:	401a      	ands	r2, r3
 8000f60:	085b      	lsrs	r3, r3, #1
 8000f62:	400b      	ands	r3, r1
 8000f64:	4313      	orrs	r3, r2
 8000f66:	e7cb      	b.n	8000f00 <__aeabi_fsub+0x74>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d01f      	beq.n	8000fac <__aeabi_fsub+0x120>
 8000f6c:	428c      	cmp	r4, r1
 8000f6e:	d022      	beq.n	8000fb6 <__aeabi_fsub+0x12a>
 8000f70:	002a      	movs	r2, r5
 8000f72:	3aff      	subs	r2, #255	; 0xff
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d035      	beq.n	8000fe4 <__aeabi_fsub+0x158>
 8000f78:	1b7a      	subs	r2, r7, r5
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fsub+0xf4>
 8000f7e:	e099      	b.n	80010b4 <__aeabi_fsub+0x228>
 8000f80:	4663      	mov	r3, ip
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0xfc>
 8000f86:	e0dd      	b.n	8001144 <__aeabi_fsub+0x2b8>
 8000f88:	1e53      	subs	r3, r2, #1
 8000f8a:	2a01      	cmp	r2, #1
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x104>
 8000f8e:	e105      	b.n	800119c <__aeabi_fsub+0x310>
 8000f90:	2aff      	cmp	r2, #255	; 0xff
 8000f92:	d06b      	beq.n	800106c <__aeabi_fsub+0x1e0>
 8000f94:	001a      	movs	r2, r3
 8000f96:	e094      	b.n	80010c2 <__aeabi_fsub+0x236>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d073      	beq.n	8001084 <__aeabi_fsub+0x1f8>
 8000f9c:	1e51      	subs	r1, r2, #1
 8000f9e:	2a01      	cmp	r2, #1
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0x118>
 8000fa2:	e0df      	b.n	8001164 <__aeabi_fsub+0x2d8>
 8000fa4:	2aff      	cmp	r2, #255	; 0xff
 8000fa6:	d063      	beq.n	8001070 <__aeabi_fsub+0x1e4>
 8000fa8:	000a      	movs	r2, r1
 8000faa:	e792      	b.n	8000ed2 <__aeabi_fsub+0x46>
 8000fac:	2201      	movs	r2, #1
 8000fae:	4051      	eors	r1, r2
 8000fb0:	42a1      	cmp	r1, r4
 8000fb2:	d000      	beq.n	8000fb6 <__aeabi_fsub+0x12a>
 8000fb4:	e782      	b.n	8000ebc <__aeabi_fsub+0x30>
 8000fb6:	002a      	movs	r2, r5
 8000fb8:	3aff      	subs	r2, #255	; 0xff
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d036      	beq.n	800102c <__aeabi_fsub+0x1a0>
 8000fbe:	1b7a      	subs	r2, r7, r5
 8000fc0:	2d00      	cmp	r5, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x13a>
 8000fc4:	e0aa      	b.n	800111c <__aeabi_fsub+0x290>
 8000fc6:	2fff      	cmp	r7, #255	; 0xff
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0x140>
 8000fca:	e0da      	b.n	8001182 <__aeabi_fsub+0x2f6>
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	4661      	mov	r1, ip
 8000fd0:	04db      	lsls	r3, r3, #19
 8000fd2:	4319      	orrs	r1, r3
 8000fd4:	468c      	mov	ip, r1
 8000fd6:	2a1b      	cmp	r2, #27
 8000fd8:	dc00      	bgt.n	8000fdc <__aeabi_fsub+0x150>
 8000fda:	e0d4      	b.n	8001186 <__aeabi_fsub+0x2fa>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	003d      	movs	r5, r7
 8000fe0:	181b      	adds	r3, r3, r0
 8000fe2:	e7b5      	b.n	8000f50 <__aeabi_fsub+0xc4>
 8000fe4:	27fe      	movs	r7, #254	; 0xfe
 8000fe6:	1c6a      	adds	r2, r5, #1
 8000fe8:	4217      	tst	r7, r2
 8000fea:	d171      	bne.n	80010d0 <__aeabi_fsub+0x244>
 8000fec:	2d00      	cmp	r5, #0
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_fsub+0x166>
 8000ff0:	e09e      	b.n	8001130 <__aeabi_fsub+0x2a4>
 8000ff2:	4663      	mov	r3, ip
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x16e>
 8000ff8:	e0d5      	b.n	80011a6 <__aeabi_fsub+0x31a>
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x176>
 8001000:	e78f      	b.n	8000f22 <__aeabi_fsub+0x96>
 8001002:	1a1b      	subs	r3, r3, r0
 8001004:	015e      	lsls	r6, r3, #5
 8001006:	d400      	bmi.n	800100a <__aeabi_fsub+0x17e>
 8001008:	e0d6      	b.n	80011b8 <__aeabi_fsub+0x32c>
 800100a:	4663      	mov	r3, ip
 800100c:	000c      	movs	r4, r1
 800100e:	1ac3      	subs	r3, r0, r3
 8001010:	e776      	b.n	8000f00 <__aeabi_fsub+0x74>
 8001012:	2800      	cmp	r0, #0
 8001014:	d036      	beq.n	8001084 <__aeabi_fsub+0x1f8>
 8001016:	1e51      	subs	r1, r2, #1
 8001018:	2a01      	cmp	r2, #1
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0x192>
 800101c:	e09a      	b.n	8001154 <__aeabi_fsub+0x2c8>
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d026      	beq.n	8001070 <__aeabi_fsub+0x1e4>
 8001022:	000a      	movs	r2, r1
 8001024:	e78f      	b.n	8000f46 <__aeabi_fsub+0xba>
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	2600      	movs	r6, #0
 800102a:	e77a      	b.n	8000f22 <__aeabi_fsub+0x96>
 800102c:	27fe      	movs	r7, #254	; 0xfe
 800102e:	1c6a      	adds	r2, r5, #1
 8001030:	4217      	tst	r7, r2
 8001032:	d062      	beq.n	80010fa <__aeabi_fsub+0x26e>
 8001034:	2aff      	cmp	r2, #255	; 0xff
 8001036:	d0f6      	beq.n	8001026 <__aeabi_fsub+0x19a>
 8001038:	0015      	movs	r5, r2
 800103a:	4460      	add	r0, ip
 800103c:	0843      	lsrs	r3, r0, #1
 800103e:	075a      	lsls	r2, r3, #29
 8001040:	d000      	beq.n	8001044 <__aeabi_fsub+0x1b8>
 8001042:	e75f      	b.n	8000f04 <__aeabi_fsub+0x78>
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	2dff      	cmp	r5, #255	; 0xff
 8001048:	d012      	beq.n	8001070 <__aeabi_fsub+0x1e4>
 800104a:	025b      	lsls	r3, r3, #9
 800104c:	0a5e      	lsrs	r6, r3, #9
 800104e:	b2ea      	uxtb	r2, r5
 8001050:	e767      	b.n	8000f22 <__aeabi_fsub+0x96>
 8001052:	4662      	mov	r2, ip
 8001054:	2a00      	cmp	r2, #0
 8001056:	d100      	bne.n	800105a <__aeabi_fsub+0x1ce>
 8001058:	e093      	b.n	8001182 <__aeabi_fsub+0x2f6>
 800105a:	2800      	cmp	r0, #0
 800105c:	d008      	beq.n	8001070 <__aeabi_fsub+0x1e4>
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	03d2      	lsls	r2, r2, #15
 8001062:	4213      	tst	r3, r2
 8001064:	d004      	beq.n	8001070 <__aeabi_fsub+0x1e4>
 8001066:	4640      	mov	r0, r8
 8001068:	4210      	tst	r0, r2
 800106a:	d101      	bne.n	8001070 <__aeabi_fsub+0x1e4>
 800106c:	000c      	movs	r4, r1
 800106e:	4643      	mov	r3, r8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0d8      	beq.n	8001026 <__aeabi_fsub+0x19a>
 8001074:	2680      	movs	r6, #128	; 0x80
 8001076:	03f6      	lsls	r6, r6, #15
 8001078:	431e      	orrs	r6, r3
 800107a:	0276      	lsls	r6, r6, #9
 800107c:	22ff      	movs	r2, #255	; 0xff
 800107e:	0a76      	lsrs	r6, r6, #9
 8001080:	e74f      	b.n	8000f22 <__aeabi_fsub+0x96>
 8001082:	4643      	mov	r3, r8
 8001084:	0015      	movs	r5, r2
 8001086:	e7de      	b.n	8001046 <__aeabi_fsub+0x1ba>
 8001088:	2220      	movs	r2, #32
 800108a:	1b40      	subs	r0, r0, r5
 800108c:	3001      	adds	r0, #1
 800108e:	1a12      	subs	r2, r2, r0
 8001090:	0019      	movs	r1, r3
 8001092:	4093      	lsls	r3, r2
 8001094:	40c1      	lsrs	r1, r0
 8001096:	1e5a      	subs	r2, r3, #1
 8001098:	4193      	sbcs	r3, r2
 800109a:	2500      	movs	r5, #0
 800109c:	430b      	orrs	r3, r1
 800109e:	e72f      	b.n	8000f00 <__aeabi_fsub+0x74>
 80010a0:	2320      	movs	r3, #32
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	0001      	movs	r1, r0
 80010a6:	4098      	lsls	r0, r3
 80010a8:	0003      	movs	r3, r0
 80010aa:	40d1      	lsrs	r1, r2
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	4193      	sbcs	r3, r2
 80010b0:	430b      	orrs	r3, r1
 80010b2:	e712      	b.n	8000eda <__aeabi_fsub+0x4e>
 80010b4:	2fff      	cmp	r7, #255	; 0xff
 80010b6:	d0d9      	beq.n	800106c <__aeabi_fsub+0x1e0>
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	4664      	mov	r4, ip
 80010bc:	04db      	lsls	r3, r3, #19
 80010be:	431c      	orrs	r4, r3
 80010c0:	46a4      	mov	ip, r4
 80010c2:	2a1b      	cmp	r2, #27
 80010c4:	dd52      	ble.n	800116c <__aeabi_fsub+0x2e0>
 80010c6:	2301      	movs	r3, #1
 80010c8:	000c      	movs	r4, r1
 80010ca:	003d      	movs	r5, r7
 80010cc:	1ac3      	subs	r3, r0, r3
 80010ce:	e706      	b.n	8000ede <__aeabi_fsub+0x52>
 80010d0:	4663      	mov	r3, ip
 80010d2:	1a1e      	subs	r6, r3, r0
 80010d4:	0173      	lsls	r3, r6, #5
 80010d6:	d439      	bmi.n	800114c <__aeabi_fsub+0x2c0>
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d000      	beq.n	80010de <__aeabi_fsub+0x252>
 80010dc:	e704      	b.n	8000ee8 <__aeabi_fsub+0x5c>
 80010de:	2400      	movs	r4, #0
 80010e0:	2200      	movs	r2, #0
 80010e2:	2600      	movs	r6, #0
 80010e4:	e71d      	b.n	8000f22 <__aeabi_fsub+0x96>
 80010e6:	2320      	movs	r3, #32
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	0001      	movs	r1, r0
 80010ec:	4098      	lsls	r0, r3
 80010ee:	0003      	movs	r3, r0
 80010f0:	40d1      	lsrs	r1, r2
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	4193      	sbcs	r3, r2
 80010f6:	430b      	orrs	r3, r1
 80010f8:	e729      	b.n	8000f4e <__aeabi_fsub+0xc2>
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	d1a9      	bne.n	8001052 <__aeabi_fsub+0x1c6>
 80010fe:	4663      	mov	r3, ip
 8001100:	2b00      	cmp	r3, #0
 8001102:	d056      	beq.n	80011b2 <__aeabi_fsub+0x326>
 8001104:	2200      	movs	r2, #0
 8001106:	2800      	cmp	r0, #0
 8001108:	d100      	bne.n	800110c <__aeabi_fsub+0x280>
 800110a:	e70a      	b.n	8000f22 <__aeabi_fsub+0x96>
 800110c:	0003      	movs	r3, r0
 800110e:	4463      	add	r3, ip
 8001110:	015a      	lsls	r2, r3, #5
 8001112:	d594      	bpl.n	800103e <__aeabi_fsub+0x1b2>
 8001114:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <__aeabi_fsub+0x338>)
 8001116:	3501      	adds	r5, #1
 8001118:	4013      	ands	r3, r2
 800111a:	e790      	b.n	800103e <__aeabi_fsub+0x1b2>
 800111c:	4663      	mov	r3, ip
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0af      	beq.n	8001082 <__aeabi_fsub+0x1f6>
 8001122:	1e53      	subs	r3, r2, #1
 8001124:	2a01      	cmp	r2, #1
 8001126:	d015      	beq.n	8001154 <__aeabi_fsub+0x2c8>
 8001128:	2aff      	cmp	r2, #255	; 0xff
 800112a:	d02a      	beq.n	8001182 <__aeabi_fsub+0x2f6>
 800112c:	001a      	movs	r2, r3
 800112e:	e752      	b.n	8000fd6 <__aeabi_fsub+0x14a>
 8001130:	4662      	mov	r2, ip
 8001132:	2a00      	cmp	r2, #0
 8001134:	d191      	bne.n	800105a <__aeabi_fsub+0x1ce>
 8001136:	2800      	cmp	r0, #0
 8001138:	d198      	bne.n	800106c <__aeabi_fsub+0x1e0>
 800113a:	2680      	movs	r6, #128	; 0x80
 800113c:	2400      	movs	r4, #0
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	03f6      	lsls	r6, r6, #15
 8001142:	e6ee      	b.n	8000f22 <__aeabi_fsub+0x96>
 8001144:	000c      	movs	r4, r1
 8001146:	4643      	mov	r3, r8
 8001148:	0015      	movs	r5, r2
 800114a:	e77c      	b.n	8001046 <__aeabi_fsub+0x1ba>
 800114c:	4663      	mov	r3, ip
 800114e:	000c      	movs	r4, r1
 8001150:	1ac6      	subs	r6, r0, r3
 8001152:	e6c9      	b.n	8000ee8 <__aeabi_fsub+0x5c>
 8001154:	0003      	movs	r3, r0
 8001156:	4463      	add	r3, ip
 8001158:	2501      	movs	r5, #1
 800115a:	015a      	lsls	r2, r3, #5
 800115c:	d400      	bmi.n	8001160 <__aeabi_fsub+0x2d4>
 800115e:	e76e      	b.n	800103e <__aeabi_fsub+0x1b2>
 8001160:	2502      	movs	r5, #2
 8001162:	e6fa      	b.n	8000f5a <__aeabi_fsub+0xce>
 8001164:	4663      	mov	r3, ip
 8001166:	2501      	movs	r5, #1
 8001168:	1a1b      	subs	r3, r3, r0
 800116a:	e6b8      	b.n	8000ede <__aeabi_fsub+0x52>
 800116c:	4664      	mov	r4, ip
 800116e:	2320      	movs	r3, #32
 8001170:	40d4      	lsrs	r4, r2
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	4662      	mov	r2, ip
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	4193      	sbcs	r3, r2
 800117e:	4323      	orrs	r3, r4
 8001180:	e7a2      	b.n	80010c8 <__aeabi_fsub+0x23c>
 8001182:	4643      	mov	r3, r8
 8001184:	e774      	b.n	8001070 <__aeabi_fsub+0x1e4>
 8001186:	4661      	mov	r1, ip
 8001188:	2320      	movs	r3, #32
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	4662      	mov	r2, ip
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	4193      	sbcs	r3, r2
 8001198:	430b      	orrs	r3, r1
 800119a:	e720      	b.n	8000fde <__aeabi_fsub+0x152>
 800119c:	4663      	mov	r3, ip
 800119e:	000c      	movs	r4, r1
 80011a0:	2501      	movs	r5, #1
 80011a2:	1ac3      	subs	r3, r0, r3
 80011a4:	e69b      	b.n	8000ede <__aeabi_fsub+0x52>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d099      	beq.n	80010de <__aeabi_fsub+0x252>
 80011aa:	000c      	movs	r4, r1
 80011ac:	4646      	mov	r6, r8
 80011ae:	2200      	movs	r2, #0
 80011b0:	e6b7      	b.n	8000f22 <__aeabi_fsub+0x96>
 80011b2:	4646      	mov	r6, r8
 80011b4:	2200      	movs	r2, #0
 80011b6:	e6b4      	b.n	8000f22 <__aeabi_fsub+0x96>
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x332>
 80011bc:	e73f      	b.n	800103e <__aeabi_fsub+0x1b2>
 80011be:	2400      	movs	r4, #0
 80011c0:	2600      	movs	r6, #0
 80011c2:	e6ae      	b.n	8000f22 <__aeabi_fsub+0x96>
 80011c4:	fbffffff 	.word	0xfbffffff
 80011c8:	7dffffff 	.word	0x7dffffff

080011cc <__aeabi_fcmpun>:
 80011cc:	0243      	lsls	r3, r0, #9
 80011ce:	024a      	lsls	r2, r1, #9
 80011d0:	0040      	lsls	r0, r0, #1
 80011d2:	0049      	lsls	r1, r1, #1
 80011d4:	0a5b      	lsrs	r3, r3, #9
 80011d6:	0a52      	lsrs	r2, r2, #9
 80011d8:	0e09      	lsrs	r1, r1, #24
 80011da:	0e00      	lsrs	r0, r0, #24
 80011dc:	28ff      	cmp	r0, #255	; 0xff
 80011de:	d006      	beq.n	80011ee <__aeabi_fcmpun+0x22>
 80011e0:	2000      	movs	r0, #0
 80011e2:	29ff      	cmp	r1, #255	; 0xff
 80011e4:	d102      	bne.n	80011ec <__aeabi_fcmpun+0x20>
 80011e6:	1e53      	subs	r3, r2, #1
 80011e8:	419a      	sbcs	r2, r3
 80011ea:	0010      	movs	r0, r2
 80011ec:	4770      	bx	lr
 80011ee:	38fe      	subs	r0, #254	; 0xfe
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1fb      	bne.n	80011ec <__aeabi_fcmpun+0x20>
 80011f4:	e7f4      	b.n	80011e0 <__aeabi_fcmpun+0x14>
 80011f6:	46c0      	nop			; (mov r8, r8)

080011f8 <__aeabi_f2iz>:
 80011f8:	0241      	lsls	r1, r0, #9
 80011fa:	0042      	lsls	r2, r0, #1
 80011fc:	0fc3      	lsrs	r3, r0, #31
 80011fe:	0a49      	lsrs	r1, r1, #9
 8001200:	2000      	movs	r0, #0
 8001202:	0e12      	lsrs	r2, r2, #24
 8001204:	2a7e      	cmp	r2, #126	; 0x7e
 8001206:	dd03      	ble.n	8001210 <__aeabi_f2iz+0x18>
 8001208:	2a9d      	cmp	r2, #157	; 0x9d
 800120a:	dd02      	ble.n	8001212 <__aeabi_f2iz+0x1a>
 800120c:	4a09      	ldr	r2, [pc, #36]	; (8001234 <__aeabi_f2iz+0x3c>)
 800120e:	1898      	adds	r0, r3, r2
 8001210:	4770      	bx	lr
 8001212:	2080      	movs	r0, #128	; 0x80
 8001214:	0400      	lsls	r0, r0, #16
 8001216:	4301      	orrs	r1, r0
 8001218:	2a95      	cmp	r2, #149	; 0x95
 800121a:	dc07      	bgt.n	800122c <__aeabi_f2iz+0x34>
 800121c:	2096      	movs	r0, #150	; 0x96
 800121e:	1a82      	subs	r2, r0, r2
 8001220:	40d1      	lsrs	r1, r2
 8001222:	4248      	negs	r0, r1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f3      	bne.n	8001210 <__aeabi_f2iz+0x18>
 8001228:	0008      	movs	r0, r1
 800122a:	e7f1      	b.n	8001210 <__aeabi_f2iz+0x18>
 800122c:	3a96      	subs	r2, #150	; 0x96
 800122e:	4091      	lsls	r1, r2
 8001230:	e7f7      	b.n	8001222 <__aeabi_f2iz+0x2a>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	7fffffff 	.word	0x7fffffff

08001238 <__aeabi_i2f>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	2800      	cmp	r0, #0
 800123c:	d013      	beq.n	8001266 <__aeabi_i2f+0x2e>
 800123e:	17c3      	asrs	r3, r0, #31
 8001240:	18c5      	adds	r5, r0, r3
 8001242:	405d      	eors	r5, r3
 8001244:	0fc4      	lsrs	r4, r0, #31
 8001246:	0028      	movs	r0, r5
 8001248:	f001 ffa6 	bl	8003198 <__clzsi2>
 800124c:	239e      	movs	r3, #158	; 0x9e
 800124e:	0001      	movs	r1, r0
 8001250:	1a1b      	subs	r3, r3, r0
 8001252:	2b96      	cmp	r3, #150	; 0x96
 8001254:	dc0f      	bgt.n	8001276 <__aeabi_i2f+0x3e>
 8001256:	2808      	cmp	r0, #8
 8001258:	d031      	beq.n	80012be <__aeabi_i2f+0x86>
 800125a:	3908      	subs	r1, #8
 800125c:	408d      	lsls	r5, r1
 800125e:	026d      	lsls	r5, r5, #9
 8001260:	0a6d      	lsrs	r5, r5, #9
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	e002      	b.n	800126c <__aeabi_i2f+0x34>
 8001266:	2400      	movs	r4, #0
 8001268:	2000      	movs	r0, #0
 800126a:	2500      	movs	r5, #0
 800126c:	05c0      	lsls	r0, r0, #23
 800126e:	4328      	orrs	r0, r5
 8001270:	07e4      	lsls	r4, r4, #31
 8001272:	4320      	orrs	r0, r4
 8001274:	bd70      	pop	{r4, r5, r6, pc}
 8001276:	2b99      	cmp	r3, #153	; 0x99
 8001278:	dd0c      	ble.n	8001294 <__aeabi_i2f+0x5c>
 800127a:	2205      	movs	r2, #5
 800127c:	1a12      	subs	r2, r2, r0
 800127e:	0028      	movs	r0, r5
 8001280:	40d0      	lsrs	r0, r2
 8001282:	0002      	movs	r2, r0
 8001284:	0008      	movs	r0, r1
 8001286:	301b      	adds	r0, #27
 8001288:	4085      	lsls	r5, r0
 800128a:	0028      	movs	r0, r5
 800128c:	1e45      	subs	r5, r0, #1
 800128e:	41a8      	sbcs	r0, r5
 8001290:	4302      	orrs	r2, r0
 8001292:	0015      	movs	r5, r2
 8001294:	2905      	cmp	r1, #5
 8001296:	dc16      	bgt.n	80012c6 <__aeabi_i2f+0x8e>
 8001298:	002a      	movs	r2, r5
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <__aeabi_i2f+0xa0>)
 800129c:	4002      	ands	r2, r0
 800129e:	076e      	lsls	r6, r5, #29
 80012a0:	d009      	beq.n	80012b6 <__aeabi_i2f+0x7e>
 80012a2:	260f      	movs	r6, #15
 80012a4:	4035      	ands	r5, r6
 80012a6:	2d04      	cmp	r5, #4
 80012a8:	d005      	beq.n	80012b6 <__aeabi_i2f+0x7e>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0155      	lsls	r5, r2, #5
 80012ae:	d502      	bpl.n	80012b6 <__aeabi_i2f+0x7e>
 80012b0:	239f      	movs	r3, #159	; 0x9f
 80012b2:	4002      	ands	r2, r0
 80012b4:	1a5b      	subs	r3, r3, r1
 80012b6:	0192      	lsls	r2, r2, #6
 80012b8:	0a55      	lsrs	r5, r2, #9
 80012ba:	b2d8      	uxtb	r0, r3
 80012bc:	e7d6      	b.n	800126c <__aeabi_i2f+0x34>
 80012be:	026d      	lsls	r5, r5, #9
 80012c0:	2096      	movs	r0, #150	; 0x96
 80012c2:	0a6d      	lsrs	r5, r5, #9
 80012c4:	e7d2      	b.n	800126c <__aeabi_i2f+0x34>
 80012c6:	1f4a      	subs	r2, r1, #5
 80012c8:	4095      	lsls	r5, r2
 80012ca:	002a      	movs	r2, r5
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <__aeabi_i2f+0xa0>)
 80012ce:	4002      	ands	r2, r0
 80012d0:	076e      	lsls	r6, r5, #29
 80012d2:	d0f0      	beq.n	80012b6 <__aeabi_i2f+0x7e>
 80012d4:	e7e5      	b.n	80012a2 <__aeabi_i2f+0x6a>
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	fbffffff 	.word	0xfbffffff

080012dc <__aeabi_ui2f>:
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	1e04      	subs	r4, r0, #0
 80012e0:	d00e      	beq.n	8001300 <__aeabi_ui2f+0x24>
 80012e2:	f001 ff59 	bl	8003198 <__clzsi2>
 80012e6:	239e      	movs	r3, #158	; 0x9e
 80012e8:	0001      	movs	r1, r0
 80012ea:	1a1b      	subs	r3, r3, r0
 80012ec:	2b96      	cmp	r3, #150	; 0x96
 80012ee:	dc0c      	bgt.n	800130a <__aeabi_ui2f+0x2e>
 80012f0:	2808      	cmp	r0, #8
 80012f2:	d02c      	beq.n	800134e <__aeabi_ui2f+0x72>
 80012f4:	3908      	subs	r1, #8
 80012f6:	408c      	lsls	r4, r1
 80012f8:	0264      	lsls	r4, r4, #9
 80012fa:	0a64      	lsrs	r4, r4, #9
 80012fc:	b2d8      	uxtb	r0, r3
 80012fe:	e001      	b.n	8001304 <__aeabi_ui2f+0x28>
 8001300:	2000      	movs	r0, #0
 8001302:	2400      	movs	r4, #0
 8001304:	05c0      	lsls	r0, r0, #23
 8001306:	4320      	orrs	r0, r4
 8001308:	bd70      	pop	{r4, r5, r6, pc}
 800130a:	2b99      	cmp	r3, #153	; 0x99
 800130c:	dd0a      	ble.n	8001324 <__aeabi_ui2f+0x48>
 800130e:	0002      	movs	r2, r0
 8001310:	0020      	movs	r0, r4
 8001312:	321b      	adds	r2, #27
 8001314:	4090      	lsls	r0, r2
 8001316:	0002      	movs	r2, r0
 8001318:	1e50      	subs	r0, r2, #1
 800131a:	4182      	sbcs	r2, r0
 800131c:	2005      	movs	r0, #5
 800131e:	1a40      	subs	r0, r0, r1
 8001320:	40c4      	lsrs	r4, r0
 8001322:	4314      	orrs	r4, r2
 8001324:	2905      	cmp	r1, #5
 8001326:	dc16      	bgt.n	8001356 <__aeabi_ui2f+0x7a>
 8001328:	0022      	movs	r2, r4
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <__aeabi_ui2f+0x8c>)
 800132c:	4002      	ands	r2, r0
 800132e:	0765      	lsls	r5, r4, #29
 8001330:	d009      	beq.n	8001346 <__aeabi_ui2f+0x6a>
 8001332:	250f      	movs	r5, #15
 8001334:	402c      	ands	r4, r5
 8001336:	2c04      	cmp	r4, #4
 8001338:	d005      	beq.n	8001346 <__aeabi_ui2f+0x6a>
 800133a:	3204      	adds	r2, #4
 800133c:	0154      	lsls	r4, r2, #5
 800133e:	d502      	bpl.n	8001346 <__aeabi_ui2f+0x6a>
 8001340:	239f      	movs	r3, #159	; 0x9f
 8001342:	4002      	ands	r2, r0
 8001344:	1a5b      	subs	r3, r3, r1
 8001346:	0192      	lsls	r2, r2, #6
 8001348:	0a54      	lsrs	r4, r2, #9
 800134a:	b2d8      	uxtb	r0, r3
 800134c:	e7da      	b.n	8001304 <__aeabi_ui2f+0x28>
 800134e:	0264      	lsls	r4, r4, #9
 8001350:	2096      	movs	r0, #150	; 0x96
 8001352:	0a64      	lsrs	r4, r4, #9
 8001354:	e7d6      	b.n	8001304 <__aeabi_ui2f+0x28>
 8001356:	1f4a      	subs	r2, r1, #5
 8001358:	4094      	lsls	r4, r2
 800135a:	0022      	movs	r2, r4
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <__aeabi_ui2f+0x8c>)
 800135e:	4002      	ands	r2, r0
 8001360:	0765      	lsls	r5, r4, #29
 8001362:	d0f0      	beq.n	8001346 <__aeabi_ui2f+0x6a>
 8001364:	e7e5      	b.n	8001332 <__aeabi_ui2f+0x56>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	fbffffff 	.word	0xfbffffff

0800136c <__aeabi_dadd>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	464f      	mov	r7, r9
 8001370:	4646      	mov	r6, r8
 8001372:	46d6      	mov	lr, sl
 8001374:	0004      	movs	r4, r0
 8001376:	b5c0      	push	{r6, r7, lr}
 8001378:	001f      	movs	r7, r3
 800137a:	030b      	lsls	r3, r1, #12
 800137c:	0010      	movs	r0, r2
 800137e:	004e      	lsls	r6, r1, #1
 8001380:	0a5b      	lsrs	r3, r3, #9
 8001382:	0fcd      	lsrs	r5, r1, #31
 8001384:	0f61      	lsrs	r1, r4, #29
 8001386:	007a      	lsls	r2, r7, #1
 8001388:	4319      	orrs	r1, r3
 800138a:	00e3      	lsls	r3, r4, #3
 800138c:	033c      	lsls	r4, r7, #12
 800138e:	0fff      	lsrs	r7, r7, #31
 8001390:	46bc      	mov	ip, r7
 8001392:	0a64      	lsrs	r4, r4, #9
 8001394:	0f47      	lsrs	r7, r0, #29
 8001396:	4327      	orrs	r7, r4
 8001398:	0d76      	lsrs	r6, r6, #21
 800139a:	0d52      	lsrs	r2, r2, #21
 800139c:	00c0      	lsls	r0, r0, #3
 800139e:	46b9      	mov	r9, r7
 80013a0:	4680      	mov	r8, r0
 80013a2:	1ab7      	subs	r7, r6, r2
 80013a4:	4565      	cmp	r5, ip
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x3e>
 80013a8:	e09b      	b.n	80014e2 <__aeabi_dadd+0x176>
 80013aa:	2f00      	cmp	r7, #0
 80013ac:	dc00      	bgt.n	80013b0 <__aeabi_dadd+0x44>
 80013ae:	e084      	b.n	80014ba <__aeabi_dadd+0x14e>
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dadd+0x4a>
 80013b4:	e0be      	b.n	8001534 <__aeabi_dadd+0x1c8>
 80013b6:	4ac8      	ldr	r2, [pc, #800]	; (80016d8 <__aeabi_dadd+0x36c>)
 80013b8:	4296      	cmp	r6, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x52>
 80013bc:	e124      	b.n	8001608 <__aeabi_dadd+0x29c>
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	464c      	mov	r4, r9
 80013c2:	0412      	lsls	r2, r2, #16
 80013c4:	4314      	orrs	r4, r2
 80013c6:	46a1      	mov	r9, r4
 80013c8:	2f38      	cmp	r7, #56	; 0x38
 80013ca:	dd00      	ble.n	80013ce <__aeabi_dadd+0x62>
 80013cc:	e167      	b.n	800169e <__aeabi_dadd+0x332>
 80013ce:	2f1f      	cmp	r7, #31
 80013d0:	dd00      	ble.n	80013d4 <__aeabi_dadd+0x68>
 80013d2:	e1d6      	b.n	8001782 <__aeabi_dadd+0x416>
 80013d4:	2220      	movs	r2, #32
 80013d6:	464c      	mov	r4, r9
 80013d8:	1bd2      	subs	r2, r2, r7
 80013da:	4094      	lsls	r4, r2
 80013dc:	46a2      	mov	sl, r4
 80013de:	4644      	mov	r4, r8
 80013e0:	40fc      	lsrs	r4, r7
 80013e2:	0020      	movs	r0, r4
 80013e4:	4654      	mov	r4, sl
 80013e6:	4304      	orrs	r4, r0
 80013e8:	4640      	mov	r0, r8
 80013ea:	4090      	lsls	r0, r2
 80013ec:	1e42      	subs	r2, r0, #1
 80013ee:	4190      	sbcs	r0, r2
 80013f0:	464a      	mov	r2, r9
 80013f2:	40fa      	lsrs	r2, r7
 80013f4:	4304      	orrs	r4, r0
 80013f6:	1a89      	subs	r1, r1, r2
 80013f8:	1b1c      	subs	r4, r3, r4
 80013fa:	42a3      	cmp	r3, r4
 80013fc:	4192      	sbcs	r2, r2
 80013fe:	4252      	negs	r2, r2
 8001400:	1a8b      	subs	r3, r1, r2
 8001402:	469a      	mov	sl, r3
 8001404:	4653      	mov	r3, sl
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	d400      	bmi.n	800140c <__aeabi_dadd+0xa0>
 800140a:	e0d4      	b.n	80015b6 <__aeabi_dadd+0x24a>
 800140c:	4653      	mov	r3, sl
 800140e:	025a      	lsls	r2, r3, #9
 8001410:	0a53      	lsrs	r3, r2, #9
 8001412:	469a      	mov	sl, r3
 8001414:	4653      	mov	r3, sl
 8001416:	2b00      	cmp	r3, #0
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0xb0>
 800141a:	e104      	b.n	8001626 <__aeabi_dadd+0x2ba>
 800141c:	4650      	mov	r0, sl
 800141e:	f001 febb 	bl	8003198 <__clzsi2>
 8001422:	0003      	movs	r3, r0
 8001424:	3b08      	subs	r3, #8
 8001426:	2220      	movs	r2, #32
 8001428:	0020      	movs	r0, r4
 800142a:	1ad2      	subs	r2, r2, r3
 800142c:	4651      	mov	r1, sl
 800142e:	40d0      	lsrs	r0, r2
 8001430:	4099      	lsls	r1, r3
 8001432:	0002      	movs	r2, r0
 8001434:	409c      	lsls	r4, r3
 8001436:	430a      	orrs	r2, r1
 8001438:	42b3      	cmp	r3, r6
 800143a:	da00      	bge.n	800143e <__aeabi_dadd+0xd2>
 800143c:	e102      	b.n	8001644 <__aeabi_dadd+0x2d8>
 800143e:	1b9b      	subs	r3, r3, r6
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	291f      	cmp	r1, #31
 8001444:	dd00      	ble.n	8001448 <__aeabi_dadd+0xdc>
 8001446:	e0a7      	b.n	8001598 <__aeabi_dadd+0x22c>
 8001448:	2320      	movs	r3, #32
 800144a:	0010      	movs	r0, r2
 800144c:	0026      	movs	r6, r4
 800144e:	1a5b      	subs	r3, r3, r1
 8001450:	409c      	lsls	r4, r3
 8001452:	4098      	lsls	r0, r3
 8001454:	40ce      	lsrs	r6, r1
 8001456:	40ca      	lsrs	r2, r1
 8001458:	1e63      	subs	r3, r4, #1
 800145a:	419c      	sbcs	r4, r3
 800145c:	4330      	orrs	r0, r6
 800145e:	4692      	mov	sl, r2
 8001460:	2600      	movs	r6, #0
 8001462:	4304      	orrs	r4, r0
 8001464:	0763      	lsls	r3, r4, #29
 8001466:	d009      	beq.n	800147c <__aeabi_dadd+0x110>
 8001468:	230f      	movs	r3, #15
 800146a:	4023      	ands	r3, r4
 800146c:	2b04      	cmp	r3, #4
 800146e:	d005      	beq.n	800147c <__aeabi_dadd+0x110>
 8001470:	1d23      	adds	r3, r4, #4
 8001472:	42a3      	cmp	r3, r4
 8001474:	41a4      	sbcs	r4, r4
 8001476:	4264      	negs	r4, r4
 8001478:	44a2      	add	sl, r4
 800147a:	001c      	movs	r4, r3
 800147c:	4653      	mov	r3, sl
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	d400      	bmi.n	8001484 <__aeabi_dadd+0x118>
 8001482:	e09b      	b.n	80015bc <__aeabi_dadd+0x250>
 8001484:	4b94      	ldr	r3, [pc, #592]	; (80016d8 <__aeabi_dadd+0x36c>)
 8001486:	3601      	adds	r6, #1
 8001488:	429e      	cmp	r6, r3
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x122>
 800148c:	e0b8      	b.n	8001600 <__aeabi_dadd+0x294>
 800148e:	4653      	mov	r3, sl
 8001490:	4992      	ldr	r1, [pc, #584]	; (80016dc <__aeabi_dadd+0x370>)
 8001492:	08e4      	lsrs	r4, r4, #3
 8001494:	400b      	ands	r3, r1
 8001496:	0019      	movs	r1, r3
 8001498:	075b      	lsls	r3, r3, #29
 800149a:	4323      	orrs	r3, r4
 800149c:	0572      	lsls	r2, r6, #21
 800149e:	024c      	lsls	r4, r1, #9
 80014a0:	0b24      	lsrs	r4, r4, #12
 80014a2:	0d52      	lsrs	r2, r2, #21
 80014a4:	0512      	lsls	r2, r2, #20
 80014a6:	07ed      	lsls	r5, r5, #31
 80014a8:	4322      	orrs	r2, r4
 80014aa:	432a      	orrs	r2, r5
 80014ac:	0018      	movs	r0, r3
 80014ae:	0011      	movs	r1, r2
 80014b0:	bce0      	pop	{r5, r6, r7}
 80014b2:	46ba      	mov	sl, r7
 80014b4:	46b1      	mov	r9, r6
 80014b6:	46a8      	mov	r8, r5
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	2f00      	cmp	r7, #0
 80014bc:	d048      	beq.n	8001550 <__aeabi_dadd+0x1e4>
 80014be:	1b97      	subs	r7, r2, r6
 80014c0:	2e00      	cmp	r6, #0
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x15a>
 80014c4:	e10e      	b.n	80016e4 <__aeabi_dadd+0x378>
 80014c6:	000c      	movs	r4, r1
 80014c8:	431c      	orrs	r4, r3
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x162>
 80014cc:	e1b7      	b.n	800183e <__aeabi_dadd+0x4d2>
 80014ce:	1e7c      	subs	r4, r7, #1
 80014d0:	2f01      	cmp	r7, #1
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x16a>
 80014d4:	e226      	b.n	8001924 <__aeabi_dadd+0x5b8>
 80014d6:	4d80      	ldr	r5, [pc, #512]	; (80016d8 <__aeabi_dadd+0x36c>)
 80014d8:	42af      	cmp	r7, r5
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x172>
 80014dc:	e1d5      	b.n	800188a <__aeabi_dadd+0x51e>
 80014de:	0027      	movs	r7, r4
 80014e0:	e107      	b.n	80016f2 <__aeabi_dadd+0x386>
 80014e2:	2f00      	cmp	r7, #0
 80014e4:	dc00      	bgt.n	80014e8 <__aeabi_dadd+0x17c>
 80014e6:	e0b2      	b.n	800164e <__aeabi_dadd+0x2e2>
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d047      	beq.n	800157c <__aeabi_dadd+0x210>
 80014ec:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <__aeabi_dadd+0x36c>)
 80014ee:	4296      	cmp	r6, r2
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x188>
 80014f2:	e089      	b.n	8001608 <__aeabi_dadd+0x29c>
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	464c      	mov	r4, r9
 80014f8:	0412      	lsls	r2, r2, #16
 80014fa:	4314      	orrs	r4, r2
 80014fc:	46a1      	mov	r9, r4
 80014fe:	2f38      	cmp	r7, #56	; 0x38
 8001500:	dc6b      	bgt.n	80015da <__aeabi_dadd+0x26e>
 8001502:	2f1f      	cmp	r7, #31
 8001504:	dc00      	bgt.n	8001508 <__aeabi_dadd+0x19c>
 8001506:	e16e      	b.n	80017e6 <__aeabi_dadd+0x47a>
 8001508:	003a      	movs	r2, r7
 800150a:	4648      	mov	r0, r9
 800150c:	3a20      	subs	r2, #32
 800150e:	40d0      	lsrs	r0, r2
 8001510:	4684      	mov	ip, r0
 8001512:	2f20      	cmp	r7, #32
 8001514:	d007      	beq.n	8001526 <__aeabi_dadd+0x1ba>
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	4648      	mov	r0, r9
 800151a:	1bd2      	subs	r2, r2, r7
 800151c:	4090      	lsls	r0, r2
 800151e:	0002      	movs	r2, r0
 8001520:	4640      	mov	r0, r8
 8001522:	4310      	orrs	r0, r2
 8001524:	4680      	mov	r8, r0
 8001526:	4640      	mov	r0, r8
 8001528:	1e42      	subs	r2, r0, #1
 800152a:	4190      	sbcs	r0, r2
 800152c:	4662      	mov	r2, ip
 800152e:	0004      	movs	r4, r0
 8001530:	4314      	orrs	r4, r2
 8001532:	e057      	b.n	80015e4 <__aeabi_dadd+0x278>
 8001534:	464a      	mov	r2, r9
 8001536:	4302      	orrs	r2, r0
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x1d0>
 800153a:	e103      	b.n	8001744 <__aeabi_dadd+0x3d8>
 800153c:	1e7a      	subs	r2, r7, #1
 800153e:	2f01      	cmp	r7, #1
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x1d8>
 8001542:	e193      	b.n	800186c <__aeabi_dadd+0x500>
 8001544:	4c64      	ldr	r4, [pc, #400]	; (80016d8 <__aeabi_dadd+0x36c>)
 8001546:	42a7      	cmp	r7, r4
 8001548:	d100      	bne.n	800154c <__aeabi_dadd+0x1e0>
 800154a:	e18a      	b.n	8001862 <__aeabi_dadd+0x4f6>
 800154c:	0017      	movs	r7, r2
 800154e:	e73b      	b.n	80013c8 <__aeabi_dadd+0x5c>
 8001550:	4c63      	ldr	r4, [pc, #396]	; (80016e0 <__aeabi_dadd+0x374>)
 8001552:	1c72      	adds	r2, r6, #1
 8001554:	4222      	tst	r2, r4
 8001556:	d000      	beq.n	800155a <__aeabi_dadd+0x1ee>
 8001558:	e0e0      	b.n	800171c <__aeabi_dadd+0x3b0>
 800155a:	000a      	movs	r2, r1
 800155c:	431a      	orrs	r2, r3
 800155e:	2e00      	cmp	r6, #0
 8001560:	d000      	beq.n	8001564 <__aeabi_dadd+0x1f8>
 8001562:	e174      	b.n	800184e <__aeabi_dadd+0x4e2>
 8001564:	2a00      	cmp	r2, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dadd+0x1fe>
 8001568:	e1d0      	b.n	800190c <__aeabi_dadd+0x5a0>
 800156a:	464a      	mov	r2, r9
 800156c:	4302      	orrs	r2, r0
 800156e:	d000      	beq.n	8001572 <__aeabi_dadd+0x206>
 8001570:	e1e3      	b.n	800193a <__aeabi_dadd+0x5ce>
 8001572:	074a      	lsls	r2, r1, #29
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	4313      	orrs	r3, r2
 8001578:	08c9      	lsrs	r1, r1, #3
 800157a:	e029      	b.n	80015d0 <__aeabi_dadd+0x264>
 800157c:	464a      	mov	r2, r9
 800157e:	4302      	orrs	r2, r0
 8001580:	d100      	bne.n	8001584 <__aeabi_dadd+0x218>
 8001582:	e17d      	b.n	8001880 <__aeabi_dadd+0x514>
 8001584:	1e7a      	subs	r2, r7, #1
 8001586:	2f01      	cmp	r7, #1
 8001588:	d100      	bne.n	800158c <__aeabi_dadd+0x220>
 800158a:	e0e0      	b.n	800174e <__aeabi_dadd+0x3e2>
 800158c:	4c52      	ldr	r4, [pc, #328]	; (80016d8 <__aeabi_dadd+0x36c>)
 800158e:	42a7      	cmp	r7, r4
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x228>
 8001592:	e166      	b.n	8001862 <__aeabi_dadd+0x4f6>
 8001594:	0017      	movs	r7, r2
 8001596:	e7b2      	b.n	80014fe <__aeabi_dadd+0x192>
 8001598:	0010      	movs	r0, r2
 800159a:	3b1f      	subs	r3, #31
 800159c:	40d8      	lsrs	r0, r3
 800159e:	2920      	cmp	r1, #32
 80015a0:	d003      	beq.n	80015aa <__aeabi_dadd+0x23e>
 80015a2:	2340      	movs	r3, #64	; 0x40
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	4314      	orrs	r4, r2
 80015aa:	1e63      	subs	r3, r4, #1
 80015ac:	419c      	sbcs	r4, r3
 80015ae:	2300      	movs	r3, #0
 80015b0:	2600      	movs	r6, #0
 80015b2:	469a      	mov	sl, r3
 80015b4:	4304      	orrs	r4, r0
 80015b6:	0763      	lsls	r3, r4, #29
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x250>
 80015ba:	e755      	b.n	8001468 <__aeabi_dadd+0xfc>
 80015bc:	4652      	mov	r2, sl
 80015be:	08e3      	lsrs	r3, r4, #3
 80015c0:	0752      	lsls	r2, r2, #29
 80015c2:	4313      	orrs	r3, r2
 80015c4:	4652      	mov	r2, sl
 80015c6:	0037      	movs	r7, r6
 80015c8:	08d1      	lsrs	r1, r2, #3
 80015ca:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <__aeabi_dadd+0x36c>)
 80015cc:	4297      	cmp	r7, r2
 80015ce:	d01f      	beq.n	8001610 <__aeabi_dadd+0x2a4>
 80015d0:	0309      	lsls	r1, r1, #12
 80015d2:	057a      	lsls	r2, r7, #21
 80015d4:	0b0c      	lsrs	r4, r1, #12
 80015d6:	0d52      	lsrs	r2, r2, #21
 80015d8:	e764      	b.n	80014a4 <__aeabi_dadd+0x138>
 80015da:	4642      	mov	r2, r8
 80015dc:	464c      	mov	r4, r9
 80015de:	4314      	orrs	r4, r2
 80015e0:	1e62      	subs	r2, r4, #1
 80015e2:	4194      	sbcs	r4, r2
 80015e4:	18e4      	adds	r4, r4, r3
 80015e6:	429c      	cmp	r4, r3
 80015e8:	4192      	sbcs	r2, r2
 80015ea:	4252      	negs	r2, r2
 80015ec:	4692      	mov	sl, r2
 80015ee:	448a      	add	sl, r1
 80015f0:	4653      	mov	r3, sl
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	d5df      	bpl.n	80015b6 <__aeabi_dadd+0x24a>
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <__aeabi_dadd+0x36c>)
 80015f8:	3601      	adds	r6, #1
 80015fa:	429e      	cmp	r6, r3
 80015fc:	d000      	beq.n	8001600 <__aeabi_dadd+0x294>
 80015fe:	e0b3      	b.n	8001768 <__aeabi_dadd+0x3fc>
 8001600:	0032      	movs	r2, r6
 8001602:	2400      	movs	r4, #0
 8001604:	2300      	movs	r3, #0
 8001606:	e74d      	b.n	80014a4 <__aeabi_dadd+0x138>
 8001608:	074a      	lsls	r2, r1, #29
 800160a:	08db      	lsrs	r3, r3, #3
 800160c:	4313      	orrs	r3, r2
 800160e:	08c9      	lsrs	r1, r1, #3
 8001610:	001a      	movs	r2, r3
 8001612:	430a      	orrs	r2, r1
 8001614:	d100      	bne.n	8001618 <__aeabi_dadd+0x2ac>
 8001616:	e200      	b.n	8001a1a <__aeabi_dadd+0x6ae>
 8001618:	2480      	movs	r4, #128	; 0x80
 800161a:	0324      	lsls	r4, r4, #12
 800161c:	430c      	orrs	r4, r1
 800161e:	0324      	lsls	r4, r4, #12
 8001620:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <__aeabi_dadd+0x36c>)
 8001622:	0b24      	lsrs	r4, r4, #12
 8001624:	e73e      	b.n	80014a4 <__aeabi_dadd+0x138>
 8001626:	0020      	movs	r0, r4
 8001628:	f001 fdb6 	bl	8003198 <__clzsi2>
 800162c:	0003      	movs	r3, r0
 800162e:	3318      	adds	r3, #24
 8001630:	2b1f      	cmp	r3, #31
 8001632:	dc00      	bgt.n	8001636 <__aeabi_dadd+0x2ca>
 8001634:	e6f7      	b.n	8001426 <__aeabi_dadd+0xba>
 8001636:	0022      	movs	r2, r4
 8001638:	3808      	subs	r0, #8
 800163a:	4082      	lsls	r2, r0
 800163c:	2400      	movs	r4, #0
 800163e:	42b3      	cmp	r3, r6
 8001640:	db00      	blt.n	8001644 <__aeabi_dadd+0x2d8>
 8001642:	e6fc      	b.n	800143e <__aeabi_dadd+0xd2>
 8001644:	1af6      	subs	r6, r6, r3
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <__aeabi_dadd+0x370>)
 8001648:	401a      	ands	r2, r3
 800164a:	4692      	mov	sl, r2
 800164c:	e70a      	b.n	8001464 <__aeabi_dadd+0xf8>
 800164e:	2f00      	cmp	r7, #0
 8001650:	d02b      	beq.n	80016aa <__aeabi_dadd+0x33e>
 8001652:	1b97      	subs	r7, r2, r6
 8001654:	2e00      	cmp	r6, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x2ee>
 8001658:	e0b8      	b.n	80017cc <__aeabi_dadd+0x460>
 800165a:	4c1f      	ldr	r4, [pc, #124]	; (80016d8 <__aeabi_dadd+0x36c>)
 800165c:	42a2      	cmp	r2, r4
 800165e:	d100      	bne.n	8001662 <__aeabi_dadd+0x2f6>
 8001660:	e11c      	b.n	800189c <__aeabi_dadd+0x530>
 8001662:	2480      	movs	r4, #128	; 0x80
 8001664:	0424      	lsls	r4, r4, #16
 8001666:	4321      	orrs	r1, r4
 8001668:	2f38      	cmp	r7, #56	; 0x38
 800166a:	dd00      	ble.n	800166e <__aeabi_dadd+0x302>
 800166c:	e11e      	b.n	80018ac <__aeabi_dadd+0x540>
 800166e:	2f1f      	cmp	r7, #31
 8001670:	dd00      	ble.n	8001674 <__aeabi_dadd+0x308>
 8001672:	e19e      	b.n	80019b2 <__aeabi_dadd+0x646>
 8001674:	2620      	movs	r6, #32
 8001676:	000c      	movs	r4, r1
 8001678:	1bf6      	subs	r6, r6, r7
 800167a:	0018      	movs	r0, r3
 800167c:	40b3      	lsls	r3, r6
 800167e:	40b4      	lsls	r4, r6
 8001680:	40f8      	lsrs	r0, r7
 8001682:	1e5e      	subs	r6, r3, #1
 8001684:	41b3      	sbcs	r3, r6
 8001686:	40f9      	lsrs	r1, r7
 8001688:	4304      	orrs	r4, r0
 800168a:	431c      	orrs	r4, r3
 800168c:	4489      	add	r9, r1
 800168e:	4444      	add	r4, r8
 8001690:	4544      	cmp	r4, r8
 8001692:	419b      	sbcs	r3, r3
 8001694:	425b      	negs	r3, r3
 8001696:	444b      	add	r3, r9
 8001698:	469a      	mov	sl, r3
 800169a:	0016      	movs	r6, r2
 800169c:	e7a8      	b.n	80015f0 <__aeabi_dadd+0x284>
 800169e:	4642      	mov	r2, r8
 80016a0:	464c      	mov	r4, r9
 80016a2:	4314      	orrs	r4, r2
 80016a4:	1e62      	subs	r2, r4, #1
 80016a6:	4194      	sbcs	r4, r2
 80016a8:	e6a6      	b.n	80013f8 <__aeabi_dadd+0x8c>
 80016aa:	4c0d      	ldr	r4, [pc, #52]	; (80016e0 <__aeabi_dadd+0x374>)
 80016ac:	1c72      	adds	r2, r6, #1
 80016ae:	4222      	tst	r2, r4
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x348>
 80016b2:	e0a8      	b.n	8001806 <__aeabi_dadd+0x49a>
 80016b4:	000a      	movs	r2, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	2e00      	cmp	r6, #0
 80016ba:	d000      	beq.n	80016be <__aeabi_dadd+0x352>
 80016bc:	e10a      	b.n	80018d4 <__aeabi_dadd+0x568>
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x358>
 80016c2:	e15e      	b.n	8001982 <__aeabi_dadd+0x616>
 80016c4:	464a      	mov	r2, r9
 80016c6:	4302      	orrs	r2, r0
 80016c8:	d000      	beq.n	80016cc <__aeabi_dadd+0x360>
 80016ca:	e161      	b.n	8001990 <__aeabi_dadd+0x624>
 80016cc:	074a      	lsls	r2, r1, #29
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	08c9      	lsrs	r1, r1, #3
 80016d4:	e77c      	b.n	80015d0 <__aeabi_dadd+0x264>
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	000007ff 	.word	0x000007ff
 80016dc:	ff7fffff 	.word	0xff7fffff
 80016e0:	000007fe 	.word	0x000007fe
 80016e4:	4ccf      	ldr	r4, [pc, #828]	; (8001a24 <__aeabi_dadd+0x6b8>)
 80016e6:	42a2      	cmp	r2, r4
 80016e8:	d100      	bne.n	80016ec <__aeabi_dadd+0x380>
 80016ea:	e0ce      	b.n	800188a <__aeabi_dadd+0x51e>
 80016ec:	2480      	movs	r4, #128	; 0x80
 80016ee:	0424      	lsls	r4, r4, #16
 80016f0:	4321      	orrs	r1, r4
 80016f2:	2f38      	cmp	r7, #56	; 0x38
 80016f4:	dc5b      	bgt.n	80017ae <__aeabi_dadd+0x442>
 80016f6:	2f1f      	cmp	r7, #31
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dadd+0x390>
 80016fa:	e0dc      	b.n	80018b6 <__aeabi_dadd+0x54a>
 80016fc:	2520      	movs	r5, #32
 80016fe:	000c      	movs	r4, r1
 8001700:	1bed      	subs	r5, r5, r7
 8001702:	001e      	movs	r6, r3
 8001704:	40ab      	lsls	r3, r5
 8001706:	40ac      	lsls	r4, r5
 8001708:	40fe      	lsrs	r6, r7
 800170a:	1e5d      	subs	r5, r3, #1
 800170c:	41ab      	sbcs	r3, r5
 800170e:	4334      	orrs	r4, r6
 8001710:	40f9      	lsrs	r1, r7
 8001712:	431c      	orrs	r4, r3
 8001714:	464b      	mov	r3, r9
 8001716:	1a5b      	subs	r3, r3, r1
 8001718:	4699      	mov	r9, r3
 800171a:	e04c      	b.n	80017b6 <__aeabi_dadd+0x44a>
 800171c:	464a      	mov	r2, r9
 800171e:	1a1c      	subs	r4, r3, r0
 8001720:	1a88      	subs	r0, r1, r2
 8001722:	42a3      	cmp	r3, r4
 8001724:	4192      	sbcs	r2, r2
 8001726:	4252      	negs	r2, r2
 8001728:	4692      	mov	sl, r2
 800172a:	0002      	movs	r2, r0
 800172c:	4650      	mov	r0, sl
 800172e:	1a12      	subs	r2, r2, r0
 8001730:	4692      	mov	sl, r2
 8001732:	0212      	lsls	r2, r2, #8
 8001734:	d478      	bmi.n	8001828 <__aeabi_dadd+0x4bc>
 8001736:	4653      	mov	r3, sl
 8001738:	4323      	orrs	r3, r4
 800173a:	d000      	beq.n	800173e <__aeabi_dadd+0x3d2>
 800173c:	e66a      	b.n	8001414 <__aeabi_dadd+0xa8>
 800173e:	2100      	movs	r1, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e745      	b.n	80015d0 <__aeabi_dadd+0x264>
 8001744:	074a      	lsls	r2, r1, #29
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	4313      	orrs	r3, r2
 800174a:	08c9      	lsrs	r1, r1, #3
 800174c:	e73d      	b.n	80015ca <__aeabi_dadd+0x25e>
 800174e:	181c      	adds	r4, r3, r0
 8001750:	429c      	cmp	r4, r3
 8001752:	419b      	sbcs	r3, r3
 8001754:	4449      	add	r1, r9
 8001756:	468a      	mov	sl, r1
 8001758:	425b      	negs	r3, r3
 800175a:	449a      	add	sl, r3
 800175c:	4653      	mov	r3, sl
 800175e:	2601      	movs	r6, #1
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	d400      	bmi.n	8001766 <__aeabi_dadd+0x3fa>
 8001764:	e727      	b.n	80015b6 <__aeabi_dadd+0x24a>
 8001766:	2602      	movs	r6, #2
 8001768:	4652      	mov	r2, sl
 800176a:	4baf      	ldr	r3, [pc, #700]	; (8001a28 <__aeabi_dadd+0x6bc>)
 800176c:	2101      	movs	r1, #1
 800176e:	401a      	ands	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	4021      	ands	r1, r4
 8001774:	0862      	lsrs	r2, r4, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	07dc      	lsls	r4, r3, #31
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	469a      	mov	sl, r3
 800177e:	4314      	orrs	r4, r2
 8001780:	e670      	b.n	8001464 <__aeabi_dadd+0xf8>
 8001782:	003a      	movs	r2, r7
 8001784:	464c      	mov	r4, r9
 8001786:	3a20      	subs	r2, #32
 8001788:	40d4      	lsrs	r4, r2
 800178a:	46a4      	mov	ip, r4
 800178c:	2f20      	cmp	r7, #32
 800178e:	d007      	beq.n	80017a0 <__aeabi_dadd+0x434>
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	4648      	mov	r0, r9
 8001794:	1bd2      	subs	r2, r2, r7
 8001796:	4090      	lsls	r0, r2
 8001798:	0002      	movs	r2, r0
 800179a:	4640      	mov	r0, r8
 800179c:	4310      	orrs	r0, r2
 800179e:	4680      	mov	r8, r0
 80017a0:	4640      	mov	r0, r8
 80017a2:	1e42      	subs	r2, r0, #1
 80017a4:	4190      	sbcs	r0, r2
 80017a6:	4662      	mov	r2, ip
 80017a8:	0004      	movs	r4, r0
 80017aa:	4314      	orrs	r4, r2
 80017ac:	e624      	b.n	80013f8 <__aeabi_dadd+0x8c>
 80017ae:	4319      	orrs	r1, r3
 80017b0:	000c      	movs	r4, r1
 80017b2:	1e63      	subs	r3, r4, #1
 80017b4:	419c      	sbcs	r4, r3
 80017b6:	4643      	mov	r3, r8
 80017b8:	1b1c      	subs	r4, r3, r4
 80017ba:	45a0      	cmp	r8, r4
 80017bc:	419b      	sbcs	r3, r3
 80017be:	4649      	mov	r1, r9
 80017c0:	425b      	negs	r3, r3
 80017c2:	1acb      	subs	r3, r1, r3
 80017c4:	469a      	mov	sl, r3
 80017c6:	4665      	mov	r5, ip
 80017c8:	0016      	movs	r6, r2
 80017ca:	e61b      	b.n	8001404 <__aeabi_dadd+0x98>
 80017cc:	000c      	movs	r4, r1
 80017ce:	431c      	orrs	r4, r3
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dadd+0x468>
 80017d2:	e0c7      	b.n	8001964 <__aeabi_dadd+0x5f8>
 80017d4:	1e7c      	subs	r4, r7, #1
 80017d6:	2f01      	cmp	r7, #1
 80017d8:	d100      	bne.n	80017dc <__aeabi_dadd+0x470>
 80017da:	e0f9      	b.n	80019d0 <__aeabi_dadd+0x664>
 80017dc:	4e91      	ldr	r6, [pc, #580]	; (8001a24 <__aeabi_dadd+0x6b8>)
 80017de:	42b7      	cmp	r7, r6
 80017e0:	d05c      	beq.n	800189c <__aeabi_dadd+0x530>
 80017e2:	0027      	movs	r7, r4
 80017e4:	e740      	b.n	8001668 <__aeabi_dadd+0x2fc>
 80017e6:	2220      	movs	r2, #32
 80017e8:	464c      	mov	r4, r9
 80017ea:	4640      	mov	r0, r8
 80017ec:	1bd2      	subs	r2, r2, r7
 80017ee:	4094      	lsls	r4, r2
 80017f0:	40f8      	lsrs	r0, r7
 80017f2:	4304      	orrs	r4, r0
 80017f4:	4640      	mov	r0, r8
 80017f6:	4090      	lsls	r0, r2
 80017f8:	1e42      	subs	r2, r0, #1
 80017fa:	4190      	sbcs	r0, r2
 80017fc:	464a      	mov	r2, r9
 80017fe:	40fa      	lsrs	r2, r7
 8001800:	4304      	orrs	r4, r0
 8001802:	1889      	adds	r1, r1, r2
 8001804:	e6ee      	b.n	80015e4 <__aeabi_dadd+0x278>
 8001806:	4c87      	ldr	r4, [pc, #540]	; (8001a24 <__aeabi_dadd+0x6b8>)
 8001808:	42a2      	cmp	r2, r4
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x4a2>
 800180c:	e6f9      	b.n	8001602 <__aeabi_dadd+0x296>
 800180e:	1818      	adds	r0, r3, r0
 8001810:	4298      	cmp	r0, r3
 8001812:	419b      	sbcs	r3, r3
 8001814:	4449      	add	r1, r9
 8001816:	425b      	negs	r3, r3
 8001818:	18cb      	adds	r3, r1, r3
 800181a:	07dc      	lsls	r4, r3, #31
 800181c:	0840      	lsrs	r0, r0, #1
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	469a      	mov	sl, r3
 8001822:	0016      	movs	r6, r2
 8001824:	4304      	orrs	r4, r0
 8001826:	e6c6      	b.n	80015b6 <__aeabi_dadd+0x24a>
 8001828:	4642      	mov	r2, r8
 800182a:	1ad4      	subs	r4, r2, r3
 800182c:	45a0      	cmp	r8, r4
 800182e:	4180      	sbcs	r0, r0
 8001830:	464b      	mov	r3, r9
 8001832:	4240      	negs	r0, r0
 8001834:	1a59      	subs	r1, r3, r1
 8001836:	1a0b      	subs	r3, r1, r0
 8001838:	469a      	mov	sl, r3
 800183a:	4665      	mov	r5, ip
 800183c:	e5ea      	b.n	8001414 <__aeabi_dadd+0xa8>
 800183e:	464b      	mov	r3, r9
 8001840:	464a      	mov	r2, r9
 8001842:	08c0      	lsrs	r0, r0, #3
 8001844:	075b      	lsls	r3, r3, #29
 8001846:	4665      	mov	r5, ip
 8001848:	4303      	orrs	r3, r0
 800184a:	08d1      	lsrs	r1, r2, #3
 800184c:	e6bd      	b.n	80015ca <__aeabi_dadd+0x25e>
 800184e:	2a00      	cmp	r2, #0
 8001850:	d000      	beq.n	8001854 <__aeabi_dadd+0x4e8>
 8001852:	e08e      	b.n	8001972 <__aeabi_dadd+0x606>
 8001854:	464b      	mov	r3, r9
 8001856:	4303      	orrs	r3, r0
 8001858:	d117      	bne.n	800188a <__aeabi_dadd+0x51e>
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	2500      	movs	r5, #0
 800185e:	0309      	lsls	r1, r1, #12
 8001860:	e6da      	b.n	8001618 <__aeabi_dadd+0x2ac>
 8001862:	074a      	lsls	r2, r1, #29
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	4313      	orrs	r3, r2
 8001868:	08c9      	lsrs	r1, r1, #3
 800186a:	e6d1      	b.n	8001610 <__aeabi_dadd+0x2a4>
 800186c:	1a1c      	subs	r4, r3, r0
 800186e:	464a      	mov	r2, r9
 8001870:	42a3      	cmp	r3, r4
 8001872:	419b      	sbcs	r3, r3
 8001874:	1a89      	subs	r1, r1, r2
 8001876:	425b      	negs	r3, r3
 8001878:	1acb      	subs	r3, r1, r3
 800187a:	469a      	mov	sl, r3
 800187c:	2601      	movs	r6, #1
 800187e:	e5c1      	b.n	8001404 <__aeabi_dadd+0x98>
 8001880:	074a      	lsls	r2, r1, #29
 8001882:	08db      	lsrs	r3, r3, #3
 8001884:	4313      	orrs	r3, r2
 8001886:	08c9      	lsrs	r1, r1, #3
 8001888:	e69f      	b.n	80015ca <__aeabi_dadd+0x25e>
 800188a:	4643      	mov	r3, r8
 800188c:	08d8      	lsrs	r0, r3, #3
 800188e:	464b      	mov	r3, r9
 8001890:	464a      	mov	r2, r9
 8001892:	075b      	lsls	r3, r3, #29
 8001894:	4665      	mov	r5, ip
 8001896:	4303      	orrs	r3, r0
 8001898:	08d1      	lsrs	r1, r2, #3
 800189a:	e6b9      	b.n	8001610 <__aeabi_dadd+0x2a4>
 800189c:	4643      	mov	r3, r8
 800189e:	08d8      	lsrs	r0, r3, #3
 80018a0:	464b      	mov	r3, r9
 80018a2:	464a      	mov	r2, r9
 80018a4:	075b      	lsls	r3, r3, #29
 80018a6:	4303      	orrs	r3, r0
 80018a8:	08d1      	lsrs	r1, r2, #3
 80018aa:	e6b1      	b.n	8001610 <__aeabi_dadd+0x2a4>
 80018ac:	4319      	orrs	r1, r3
 80018ae:	000c      	movs	r4, r1
 80018b0:	1e63      	subs	r3, r4, #1
 80018b2:	419c      	sbcs	r4, r3
 80018b4:	e6eb      	b.n	800168e <__aeabi_dadd+0x322>
 80018b6:	003c      	movs	r4, r7
 80018b8:	000d      	movs	r5, r1
 80018ba:	3c20      	subs	r4, #32
 80018bc:	40e5      	lsrs	r5, r4
 80018be:	2f20      	cmp	r7, #32
 80018c0:	d003      	beq.n	80018ca <__aeabi_dadd+0x55e>
 80018c2:	2440      	movs	r4, #64	; 0x40
 80018c4:	1be4      	subs	r4, r4, r7
 80018c6:	40a1      	lsls	r1, r4
 80018c8:	430b      	orrs	r3, r1
 80018ca:	001c      	movs	r4, r3
 80018cc:	1e63      	subs	r3, r4, #1
 80018ce:	419c      	sbcs	r4, r3
 80018d0:	432c      	orrs	r4, r5
 80018d2:	e770      	b.n	80017b6 <__aeabi_dadd+0x44a>
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d0e1      	beq.n	800189c <__aeabi_dadd+0x530>
 80018d8:	464a      	mov	r2, r9
 80018da:	4302      	orrs	r2, r0
 80018dc:	d0c1      	beq.n	8001862 <__aeabi_dadd+0x4f6>
 80018de:	074a      	lsls	r2, r1, #29
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	08c9      	lsrs	r1, r1, #3
 80018e8:	0312      	lsls	r2, r2, #12
 80018ea:	4211      	tst	r1, r2
 80018ec:	d008      	beq.n	8001900 <__aeabi_dadd+0x594>
 80018ee:	4648      	mov	r0, r9
 80018f0:	08c4      	lsrs	r4, r0, #3
 80018f2:	4214      	tst	r4, r2
 80018f4:	d104      	bne.n	8001900 <__aeabi_dadd+0x594>
 80018f6:	4643      	mov	r3, r8
 80018f8:	0021      	movs	r1, r4
 80018fa:	08db      	lsrs	r3, r3, #3
 80018fc:	0742      	lsls	r2, r0, #29
 80018fe:	4313      	orrs	r3, r2
 8001900:	0f5a      	lsrs	r2, r3, #29
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	0752      	lsls	r2, r2, #29
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	4313      	orrs	r3, r2
 800190a:	e681      	b.n	8001610 <__aeabi_dadd+0x2a4>
 800190c:	464b      	mov	r3, r9
 800190e:	4303      	orrs	r3, r0
 8001910:	d100      	bne.n	8001914 <__aeabi_dadd+0x5a8>
 8001912:	e714      	b.n	800173e <__aeabi_dadd+0x3d2>
 8001914:	464b      	mov	r3, r9
 8001916:	464a      	mov	r2, r9
 8001918:	08c0      	lsrs	r0, r0, #3
 800191a:	075b      	lsls	r3, r3, #29
 800191c:	4665      	mov	r5, ip
 800191e:	4303      	orrs	r3, r0
 8001920:	08d1      	lsrs	r1, r2, #3
 8001922:	e655      	b.n	80015d0 <__aeabi_dadd+0x264>
 8001924:	1ac4      	subs	r4, r0, r3
 8001926:	45a0      	cmp	r8, r4
 8001928:	4180      	sbcs	r0, r0
 800192a:	464b      	mov	r3, r9
 800192c:	4240      	negs	r0, r0
 800192e:	1a59      	subs	r1, r3, r1
 8001930:	1a0b      	subs	r3, r1, r0
 8001932:	469a      	mov	sl, r3
 8001934:	4665      	mov	r5, ip
 8001936:	2601      	movs	r6, #1
 8001938:	e564      	b.n	8001404 <__aeabi_dadd+0x98>
 800193a:	1a1c      	subs	r4, r3, r0
 800193c:	464a      	mov	r2, r9
 800193e:	42a3      	cmp	r3, r4
 8001940:	4180      	sbcs	r0, r0
 8001942:	1a8a      	subs	r2, r1, r2
 8001944:	4240      	negs	r0, r0
 8001946:	1a12      	subs	r2, r2, r0
 8001948:	4692      	mov	sl, r2
 800194a:	0212      	lsls	r2, r2, #8
 800194c:	d549      	bpl.n	80019e2 <__aeabi_dadd+0x676>
 800194e:	4642      	mov	r2, r8
 8001950:	1ad4      	subs	r4, r2, r3
 8001952:	45a0      	cmp	r8, r4
 8001954:	4180      	sbcs	r0, r0
 8001956:	464b      	mov	r3, r9
 8001958:	4240      	negs	r0, r0
 800195a:	1a59      	subs	r1, r3, r1
 800195c:	1a0b      	subs	r3, r1, r0
 800195e:	469a      	mov	sl, r3
 8001960:	4665      	mov	r5, ip
 8001962:	e57f      	b.n	8001464 <__aeabi_dadd+0xf8>
 8001964:	464b      	mov	r3, r9
 8001966:	464a      	mov	r2, r9
 8001968:	08c0      	lsrs	r0, r0, #3
 800196a:	075b      	lsls	r3, r3, #29
 800196c:	4303      	orrs	r3, r0
 800196e:	08d1      	lsrs	r1, r2, #3
 8001970:	e62b      	b.n	80015ca <__aeabi_dadd+0x25e>
 8001972:	464a      	mov	r2, r9
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	4302      	orrs	r2, r0
 8001978:	d138      	bne.n	80019ec <__aeabi_dadd+0x680>
 800197a:	074a      	lsls	r2, r1, #29
 800197c:	4313      	orrs	r3, r2
 800197e:	08c9      	lsrs	r1, r1, #3
 8001980:	e646      	b.n	8001610 <__aeabi_dadd+0x2a4>
 8001982:	464b      	mov	r3, r9
 8001984:	464a      	mov	r2, r9
 8001986:	08c0      	lsrs	r0, r0, #3
 8001988:	075b      	lsls	r3, r3, #29
 800198a:	4303      	orrs	r3, r0
 800198c:	08d1      	lsrs	r1, r2, #3
 800198e:	e61f      	b.n	80015d0 <__aeabi_dadd+0x264>
 8001990:	181c      	adds	r4, r3, r0
 8001992:	429c      	cmp	r4, r3
 8001994:	419b      	sbcs	r3, r3
 8001996:	4449      	add	r1, r9
 8001998:	468a      	mov	sl, r1
 800199a:	425b      	negs	r3, r3
 800199c:	449a      	add	sl, r3
 800199e:	4653      	mov	r3, sl
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dadd+0x63a>
 80019a4:	e607      	b.n	80015b6 <__aeabi_dadd+0x24a>
 80019a6:	4652      	mov	r2, sl
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <__aeabi_dadd+0x6bc>)
 80019aa:	2601      	movs	r6, #1
 80019ac:	401a      	ands	r2, r3
 80019ae:	4692      	mov	sl, r2
 80019b0:	e601      	b.n	80015b6 <__aeabi_dadd+0x24a>
 80019b2:	003c      	movs	r4, r7
 80019b4:	000e      	movs	r6, r1
 80019b6:	3c20      	subs	r4, #32
 80019b8:	40e6      	lsrs	r6, r4
 80019ba:	2f20      	cmp	r7, #32
 80019bc:	d003      	beq.n	80019c6 <__aeabi_dadd+0x65a>
 80019be:	2440      	movs	r4, #64	; 0x40
 80019c0:	1be4      	subs	r4, r4, r7
 80019c2:	40a1      	lsls	r1, r4
 80019c4:	430b      	orrs	r3, r1
 80019c6:	001c      	movs	r4, r3
 80019c8:	1e63      	subs	r3, r4, #1
 80019ca:	419c      	sbcs	r4, r3
 80019cc:	4334      	orrs	r4, r6
 80019ce:	e65e      	b.n	800168e <__aeabi_dadd+0x322>
 80019d0:	4443      	add	r3, r8
 80019d2:	4283      	cmp	r3, r0
 80019d4:	4180      	sbcs	r0, r0
 80019d6:	4449      	add	r1, r9
 80019d8:	468a      	mov	sl, r1
 80019da:	4240      	negs	r0, r0
 80019dc:	001c      	movs	r4, r3
 80019de:	4482      	add	sl, r0
 80019e0:	e6bc      	b.n	800175c <__aeabi_dadd+0x3f0>
 80019e2:	4653      	mov	r3, sl
 80019e4:	4323      	orrs	r3, r4
 80019e6:	d100      	bne.n	80019ea <__aeabi_dadd+0x67e>
 80019e8:	e6a9      	b.n	800173e <__aeabi_dadd+0x3d2>
 80019ea:	e5e4      	b.n	80015b6 <__aeabi_dadd+0x24a>
 80019ec:	074a      	lsls	r2, r1, #29
 80019ee:	4313      	orrs	r3, r2
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	08c9      	lsrs	r1, r1, #3
 80019f4:	0312      	lsls	r2, r2, #12
 80019f6:	4211      	tst	r1, r2
 80019f8:	d009      	beq.n	8001a0e <__aeabi_dadd+0x6a2>
 80019fa:	4648      	mov	r0, r9
 80019fc:	08c4      	lsrs	r4, r0, #3
 80019fe:	4214      	tst	r4, r2
 8001a00:	d105      	bne.n	8001a0e <__aeabi_dadd+0x6a2>
 8001a02:	4643      	mov	r3, r8
 8001a04:	4665      	mov	r5, ip
 8001a06:	0021      	movs	r1, r4
 8001a08:	08db      	lsrs	r3, r3, #3
 8001a0a:	0742      	lsls	r2, r0, #29
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	0f5a      	lsrs	r2, r3, #29
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	08db      	lsrs	r3, r3, #3
 8001a14:	0752      	lsls	r2, r2, #29
 8001a16:	4313      	orrs	r3, r2
 8001a18:	e5fa      	b.n	8001610 <__aeabi_dadd+0x2a4>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_dadd+0x6b8>)
 8001a1e:	001c      	movs	r4, r3
 8001a20:	e540      	b.n	80014a4 <__aeabi_dadd+0x138>
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	ff7fffff 	.word	0xff7fffff

08001a2c <__aeabi_ddiv>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	4657      	mov	r7, sl
 8001a30:	464e      	mov	r6, r9
 8001a32:	4645      	mov	r5, r8
 8001a34:	46de      	mov	lr, fp
 8001a36:	b5e0      	push	{r5, r6, r7, lr}
 8001a38:	030c      	lsls	r4, r1, #12
 8001a3a:	001f      	movs	r7, r3
 8001a3c:	004b      	lsls	r3, r1, #1
 8001a3e:	4681      	mov	r9, r0
 8001a40:	4692      	mov	sl, r2
 8001a42:	0005      	movs	r5, r0
 8001a44:	b085      	sub	sp, #20
 8001a46:	0b24      	lsrs	r4, r4, #12
 8001a48:	0d5b      	lsrs	r3, r3, #21
 8001a4a:	0fce      	lsrs	r6, r1, #31
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0x26>
 8001a50:	e152      	b.n	8001cf8 <__aeabi_ddiv+0x2cc>
 8001a52:	4ad2      	ldr	r2, [pc, #840]	; (8001d9c <__aeabi_ddiv+0x370>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x2e>
 8001a58:	e16e      	b.n	8001d38 <__aeabi_ddiv+0x30c>
 8001a5a:	0f42      	lsrs	r2, r0, #29
 8001a5c:	00e4      	lsls	r4, r4, #3
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0412      	lsls	r2, r2, #16
 8001a64:	4322      	orrs	r2, r4
 8001a66:	4690      	mov	r8, r2
 8001a68:	4acd      	ldr	r2, [pc, #820]	; (8001da0 <__aeabi_ddiv+0x374>)
 8001a6a:	00c5      	lsls	r5, r0, #3
 8001a6c:	4693      	mov	fp, r2
 8001a6e:	449b      	add	fp, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	4699      	mov	r9, r3
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	033c      	lsls	r4, r7, #12
 8001a78:	007b      	lsls	r3, r7, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	0b24      	lsrs	r4, r4, #12
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	0fff      	lsrs	r7, r7, #31
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_ddiv+0x5c>
 8001a86:	e11a      	b.n	8001cbe <__aeabi_ddiv+0x292>
 8001a88:	4ac4      	ldr	r2, [pc, #784]	; (8001d9c <__aeabi_ddiv+0x370>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x64>
 8001a8e:	e15e      	b.n	8001d4e <__aeabi_ddiv+0x322>
 8001a90:	0f42      	lsrs	r2, r0, #29
 8001a92:	00e4      	lsls	r4, r4, #3
 8001a94:	4322      	orrs	r2, r4
 8001a96:	2480      	movs	r4, #128	; 0x80
 8001a98:	0424      	lsls	r4, r4, #16
 8001a9a:	4314      	orrs	r4, r2
 8001a9c:	4ac0      	ldr	r2, [pc, #768]	; (8001da0 <__aeabi_ddiv+0x374>)
 8001a9e:	00c1      	lsls	r1, r0, #3
 8001aa0:	4694      	mov	ip, r2
 8001aa2:	465a      	mov	r2, fp
 8001aa4:	4463      	add	r3, ip
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	0033      	movs	r3, r6
 8001aae:	407b      	eors	r3, r7
 8001ab0:	469a      	mov	sl, r3
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d827      	bhi.n	8001b08 <__aeabi_ddiv+0xdc>
 8001ab8:	4aba      	ldr	r2, [pc, #744]	; (8001da4 <__aeabi_ddiv+0x378>)
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	58d3      	ldr	r3, [r2, r3]
 8001abe:	469f      	mov	pc, r3
 8001ac0:	46b2      	mov	sl, r6
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d016      	beq.n	8001af6 <__aeabi_ddiv+0xca>
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d100      	bne.n	8001ace <__aeabi_ddiv+0xa2>
 8001acc:	e287      	b.n	8001fde <__aeabi_ddiv+0x5b2>
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d000      	beq.n	8001ad4 <__aeabi_ddiv+0xa8>
 8001ad2:	e0d5      	b.n	8001c80 <__aeabi_ddiv+0x254>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2500      	movs	r5, #0
 8001ada:	051b      	lsls	r3, r3, #20
 8001adc:	4313      	orrs	r3, r2
 8001ade:	4652      	mov	r2, sl
 8001ae0:	07d2      	lsls	r2, r2, #31
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	0028      	movs	r0, r5
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	b005      	add	sp, #20
 8001aea:	bcf0      	pop	{r4, r5, r6, r7}
 8001aec:	46bb      	mov	fp, r7
 8001aee:	46b2      	mov	sl, r6
 8001af0:	46a9      	mov	r9, r5
 8001af2:	46a0      	mov	r8, r4
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af6:	2200      	movs	r2, #0
 8001af8:	2500      	movs	r5, #0
 8001afa:	4ba8      	ldr	r3, [pc, #672]	; (8001d9c <__aeabi_ddiv+0x370>)
 8001afc:	e7ed      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001afe:	46ba      	mov	sl, r7
 8001b00:	46a0      	mov	r8, r4
 8001b02:	000d      	movs	r5, r1
 8001b04:	9000      	str	r0, [sp, #0]
 8001b06:	e7dc      	b.n	8001ac2 <__aeabi_ddiv+0x96>
 8001b08:	4544      	cmp	r4, r8
 8001b0a:	d200      	bcs.n	8001b0e <__aeabi_ddiv+0xe2>
 8001b0c:	e1c4      	b.n	8001e98 <__aeabi_ddiv+0x46c>
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0xe6>
 8001b10:	e1bf      	b.n	8001e92 <__aeabi_ddiv+0x466>
 8001b12:	2301      	movs	r3, #1
 8001b14:	425b      	negs	r3, r3
 8001b16:	469c      	mov	ip, r3
 8001b18:	002e      	movs	r6, r5
 8001b1a:	4640      	mov	r0, r8
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	44e3      	add	fp, ip
 8001b20:	0223      	lsls	r3, r4, #8
 8001b22:	0e0c      	lsrs	r4, r1, #24
 8001b24:	431c      	orrs	r4, r3
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	4699      	mov	r9, r3
 8001b2a:	0423      	lsls	r3, r4, #16
 8001b2c:	020a      	lsls	r2, r1, #8
 8001b2e:	0c1f      	lsrs	r7, r3, #16
 8001b30:	4649      	mov	r1, r9
 8001b32:	9200      	str	r2, [sp, #0]
 8001b34:	9701      	str	r7, [sp, #4]
 8001b36:	f7fe fb89 	bl	800024c <__aeabi_uidivmod>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	437a      	muls	r2, r7
 8001b3e:	040b      	lsls	r3, r1, #16
 8001b40:	0c31      	lsrs	r1, r6, #16
 8001b42:	4680      	mov	r8, r0
 8001b44:	4319      	orrs	r1, r3
 8001b46:	428a      	cmp	r2, r1
 8001b48:	d907      	bls.n	8001b5a <__aeabi_ddiv+0x12e>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	469c      	mov	ip, r3
 8001b50:	1909      	adds	r1, r1, r4
 8001b52:	44e0      	add	r8, ip
 8001b54:	428c      	cmp	r4, r1
 8001b56:	d800      	bhi.n	8001b5a <__aeabi_ddiv+0x12e>
 8001b58:	e201      	b.n	8001f5e <__aeabi_ddiv+0x532>
 8001b5a:	1a88      	subs	r0, r1, r2
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fb75 	bl	800024c <__aeabi_uidivmod>
 8001b62:	9a01      	ldr	r2, [sp, #4]
 8001b64:	0436      	lsls	r6, r6, #16
 8001b66:	4342      	muls	r2, r0
 8001b68:	0409      	lsls	r1, r1, #16
 8001b6a:	0c36      	lsrs	r6, r6, #16
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	430e      	orrs	r6, r1
 8001b70:	42b2      	cmp	r2, r6
 8001b72:	d904      	bls.n	8001b7e <__aeabi_ddiv+0x152>
 8001b74:	1936      	adds	r6, r6, r4
 8001b76:	3b01      	subs	r3, #1
 8001b78:	42b4      	cmp	r4, r6
 8001b7a:	d800      	bhi.n	8001b7e <__aeabi_ddiv+0x152>
 8001b7c:	e1e9      	b.n	8001f52 <__aeabi_ddiv+0x526>
 8001b7e:	1ab0      	subs	r0, r6, r2
 8001b80:	4642      	mov	r2, r8
 8001b82:	9e00      	ldr	r6, [sp, #0]
 8001b84:	0412      	lsls	r2, r2, #16
 8001b86:	431a      	orrs	r2, r3
 8001b88:	0c33      	lsrs	r3, r6, #16
 8001b8a:	001f      	movs	r7, r3
 8001b8c:	0c11      	lsrs	r1, r2, #16
 8001b8e:	4690      	mov	r8, r2
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	0413      	lsls	r3, r2, #16
 8001b94:	0432      	lsls	r2, r6, #16
 8001b96:	0c16      	lsrs	r6, r2, #16
 8001b98:	0032      	movs	r2, r6
 8001b9a:	0c1b      	lsrs	r3, r3, #16
 8001b9c:	435a      	muls	r2, r3
 8001b9e:	9603      	str	r6, [sp, #12]
 8001ba0:	437b      	muls	r3, r7
 8001ba2:	434e      	muls	r6, r1
 8001ba4:	4379      	muls	r1, r7
 8001ba6:	0c17      	lsrs	r7, r2, #16
 8001ba8:	46bc      	mov	ip, r7
 8001baa:	199b      	adds	r3, r3, r6
 8001bac:	4463      	add	r3, ip
 8001bae:	429e      	cmp	r6, r3
 8001bb0:	d903      	bls.n	8001bba <__aeabi_ddiv+0x18e>
 8001bb2:	2680      	movs	r6, #128	; 0x80
 8001bb4:	0276      	lsls	r6, r6, #9
 8001bb6:	46b4      	mov	ip, r6
 8001bb8:	4461      	add	r1, ip
 8001bba:	0c1e      	lsrs	r6, r3, #16
 8001bbc:	1871      	adds	r1, r6, r1
 8001bbe:	0416      	lsls	r6, r2, #16
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	0c36      	lsrs	r6, r6, #16
 8001bc4:	199e      	adds	r6, r3, r6
 8001bc6:	4288      	cmp	r0, r1
 8001bc8:	d302      	bcc.n	8001bd0 <__aeabi_ddiv+0x1a4>
 8001bca:	d112      	bne.n	8001bf2 <__aeabi_ddiv+0x1c6>
 8001bcc:	42b5      	cmp	r5, r6
 8001bce:	d210      	bcs.n	8001bf2 <__aeabi_ddiv+0x1c6>
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	9b00      	ldr	r3, [sp, #0]
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	4465      	add	r5, ip
 8001bda:	001f      	movs	r7, r3
 8001bdc:	429d      	cmp	r5, r3
 8001bde:	419b      	sbcs	r3, r3
 8001be0:	425b      	negs	r3, r3
 8001be2:	191b      	adds	r3, r3, r4
 8001be4:	18c0      	adds	r0, r0, r3
 8001be6:	4284      	cmp	r4, r0
 8001be8:	d200      	bcs.n	8001bec <__aeabi_ddiv+0x1c0>
 8001bea:	e19e      	b.n	8001f2a <__aeabi_ddiv+0x4fe>
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_ddiv+0x1c4>
 8001bee:	e199      	b.n	8001f24 <__aeabi_ddiv+0x4f8>
 8001bf0:	4690      	mov	r8, r2
 8001bf2:	1bae      	subs	r6, r5, r6
 8001bf4:	42b5      	cmp	r5, r6
 8001bf6:	41ad      	sbcs	r5, r5
 8001bf8:	1a40      	subs	r0, r0, r1
 8001bfa:	426d      	negs	r5, r5
 8001bfc:	1b40      	subs	r0, r0, r5
 8001bfe:	4284      	cmp	r4, r0
 8001c00:	d100      	bne.n	8001c04 <__aeabi_ddiv+0x1d8>
 8001c02:	e1d2      	b.n	8001faa <__aeabi_ddiv+0x57e>
 8001c04:	4649      	mov	r1, r9
 8001c06:	f7fe fb21 	bl	800024c <__aeabi_uidivmod>
 8001c0a:	9a01      	ldr	r2, [sp, #4]
 8001c0c:	040b      	lsls	r3, r1, #16
 8001c0e:	4342      	muls	r2, r0
 8001c10:	0c31      	lsrs	r1, r6, #16
 8001c12:	0005      	movs	r5, r0
 8001c14:	4319      	orrs	r1, r3
 8001c16:	428a      	cmp	r2, r1
 8001c18:	d900      	bls.n	8001c1c <__aeabi_ddiv+0x1f0>
 8001c1a:	e16c      	b.n	8001ef6 <__aeabi_ddiv+0x4ca>
 8001c1c:	1a88      	subs	r0, r1, r2
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f7fe fb14 	bl	800024c <__aeabi_uidivmod>
 8001c24:	9a01      	ldr	r2, [sp, #4]
 8001c26:	0436      	lsls	r6, r6, #16
 8001c28:	4342      	muls	r2, r0
 8001c2a:	0409      	lsls	r1, r1, #16
 8001c2c:	0c36      	lsrs	r6, r6, #16
 8001c2e:	0003      	movs	r3, r0
 8001c30:	430e      	orrs	r6, r1
 8001c32:	42b2      	cmp	r2, r6
 8001c34:	d900      	bls.n	8001c38 <__aeabi_ddiv+0x20c>
 8001c36:	e153      	b.n	8001ee0 <__aeabi_ddiv+0x4b4>
 8001c38:	9803      	ldr	r0, [sp, #12]
 8001c3a:	1ab6      	subs	r6, r6, r2
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	042d      	lsls	r5, r5, #16
 8001c40:	431d      	orrs	r5, r3
 8001c42:	9f02      	ldr	r7, [sp, #8]
 8001c44:	042b      	lsls	r3, r5, #16
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	435a      	muls	r2, r3
 8001c4a:	437b      	muls	r3, r7
 8001c4c:	469c      	mov	ip, r3
 8001c4e:	0c29      	lsrs	r1, r5, #16
 8001c50:	4348      	muls	r0, r1
 8001c52:	0c13      	lsrs	r3, r2, #16
 8001c54:	4484      	add	ip, r0
 8001c56:	4463      	add	r3, ip
 8001c58:	4379      	muls	r1, r7
 8001c5a:	4298      	cmp	r0, r3
 8001c5c:	d903      	bls.n	8001c66 <__aeabi_ddiv+0x23a>
 8001c5e:	2080      	movs	r0, #128	; 0x80
 8001c60:	0240      	lsls	r0, r0, #9
 8001c62:	4684      	mov	ip, r0
 8001c64:	4461      	add	r1, ip
 8001c66:	0c18      	lsrs	r0, r3, #16
 8001c68:	0412      	lsls	r2, r2, #16
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	0c12      	lsrs	r2, r2, #16
 8001c6e:	1840      	adds	r0, r0, r1
 8001c70:	189b      	adds	r3, r3, r2
 8001c72:	4286      	cmp	r6, r0
 8001c74:	d200      	bcs.n	8001c78 <__aeabi_ddiv+0x24c>
 8001c76:	e100      	b.n	8001e7a <__aeabi_ddiv+0x44e>
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x250>
 8001c7a:	e0fb      	b.n	8001e74 <__aeabi_ddiv+0x448>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	431d      	orrs	r5, r3
 8001c80:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <__aeabi_ddiv+0x37c>)
 8001c82:	445b      	add	r3, fp
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_ddiv+0x25e>
 8001c88:	e0aa      	b.n	8001de0 <__aeabi_ddiv+0x3b4>
 8001c8a:	076a      	lsls	r2, r5, #29
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_ddiv+0x264>
 8001c8e:	e13d      	b.n	8001f0c <__aeabi_ddiv+0x4e0>
 8001c90:	08e9      	lsrs	r1, r5, #3
 8001c92:	4642      	mov	r2, r8
 8001c94:	01d2      	lsls	r2, r2, #7
 8001c96:	d506      	bpl.n	8001ca6 <__aeabi_ddiv+0x27a>
 8001c98:	4642      	mov	r2, r8
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <__aeabi_ddiv+0x380>)
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	4690      	mov	r8, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	445b      	add	r3, fp
 8001ca6:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <__aeabi_ddiv+0x384>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	dd00      	ble.n	8001cae <__aeabi_ddiv+0x282>
 8001cac:	e723      	b.n	8001af6 <__aeabi_ddiv+0xca>
 8001cae:	4642      	mov	r2, r8
 8001cb0:	055b      	lsls	r3, r3, #21
 8001cb2:	0755      	lsls	r5, r2, #29
 8001cb4:	0252      	lsls	r2, r2, #9
 8001cb6:	430d      	orrs	r5, r1
 8001cb8:	0b12      	lsrs	r2, r2, #12
 8001cba:	0d5b      	lsrs	r3, r3, #21
 8001cbc:	e70d      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001cbe:	4651      	mov	r1, sl
 8001cc0:	4321      	orrs	r1, r4
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x29a>
 8001cc4:	e07c      	b.n	8001dc0 <__aeabi_ddiv+0x394>
 8001cc6:	2c00      	cmp	r4, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_ddiv+0x2a0>
 8001cca:	e0fb      	b.n	8001ec4 <__aeabi_ddiv+0x498>
 8001ccc:	0020      	movs	r0, r4
 8001cce:	f001 fa63 	bl	8003198 <__clzsi2>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	3a0b      	subs	r2, #11
 8001cd6:	231d      	movs	r3, #29
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	4652      	mov	r2, sl
 8001cdc:	0001      	movs	r1, r0
 8001cde:	40da      	lsrs	r2, r3
 8001ce0:	4653      	mov	r3, sl
 8001ce2:	3908      	subs	r1, #8
 8001ce4:	408b      	lsls	r3, r1
 8001ce6:	408c      	lsls	r4, r1
 8001ce8:	0019      	movs	r1, r3
 8001cea:	4314      	orrs	r4, r2
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <__aeabi_ddiv+0x388>)
 8001cee:	4458      	add	r0, fp
 8001cf0:	469b      	mov	fp, r3
 8001cf2:	4483      	add	fp, r0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e6d9      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	d044      	beq.n	8001d8a <__aeabi_ddiv+0x35e>
 8001d00:	2c00      	cmp	r4, #0
 8001d02:	d100      	bne.n	8001d06 <__aeabi_ddiv+0x2da>
 8001d04:	e0cf      	b.n	8001ea6 <__aeabi_ddiv+0x47a>
 8001d06:	0020      	movs	r0, r4
 8001d08:	f001 fa46 	bl	8003198 <__clzsi2>
 8001d0c:	0001      	movs	r1, r0
 8001d0e:	0002      	movs	r2, r0
 8001d10:	390b      	subs	r1, #11
 8001d12:	231d      	movs	r3, #29
 8001d14:	1a5b      	subs	r3, r3, r1
 8001d16:	4649      	mov	r1, r9
 8001d18:	0010      	movs	r0, r2
 8001d1a:	40d9      	lsrs	r1, r3
 8001d1c:	3808      	subs	r0, #8
 8001d1e:	4084      	lsls	r4, r0
 8001d20:	000b      	movs	r3, r1
 8001d22:	464d      	mov	r5, r9
 8001d24:	4323      	orrs	r3, r4
 8001d26:	4698      	mov	r8, r3
 8001d28:	4085      	lsls	r5, r0
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <__aeabi_ddiv+0x38c>)
 8001d2c:	1a9b      	subs	r3, r3, r2
 8001d2e:	469b      	mov	fp, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	4699      	mov	r9, r3
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	e69e      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	4322      	orrs	r2, r4
 8001d3c:	4690      	mov	r8, r2
 8001d3e:	d11d      	bne.n	8001d7c <__aeabi_ddiv+0x350>
 8001d40:	2208      	movs	r2, #8
 8001d42:	469b      	mov	fp, r3
 8001d44:	2302      	movs	r3, #2
 8001d46:	2500      	movs	r5, #0
 8001d48:	4691      	mov	r9, r2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	e693      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d4e:	4651      	mov	r1, sl
 8001d50:	4321      	orrs	r1, r4
 8001d52:	d109      	bne.n	8001d68 <__aeabi_ddiv+0x33c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	464a      	mov	r2, r9
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <__aeabi_ddiv+0x390>)
 8001d5c:	4691      	mov	r9, r2
 8001d5e:	469c      	mov	ip, r3
 8001d60:	2400      	movs	r4, #0
 8001d62:	2002      	movs	r0, #2
 8001d64:	44e3      	add	fp, ip
 8001d66:	e6a1      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d68:	2303      	movs	r3, #3
 8001d6a:	464a      	mov	r2, r9
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <__aeabi_ddiv+0x390>)
 8001d70:	4691      	mov	r9, r2
 8001d72:	469c      	mov	ip, r3
 8001d74:	4651      	mov	r1, sl
 8001d76:	2003      	movs	r0, #3
 8001d78:	44e3      	add	fp, ip
 8001d7a:	e697      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	469b      	mov	fp, r3
 8001d80:	2303      	movs	r3, #3
 8001d82:	46a0      	mov	r8, r4
 8001d84:	4691      	mov	r9, r2
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	e675      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	4699      	mov	r9, r3
 8001d8e:	2300      	movs	r3, #0
 8001d90:	469b      	mov	fp, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	2500      	movs	r5, #0
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	e66d      	b.n	8001a76 <__aeabi_ddiv+0x4a>
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	000007ff 	.word	0x000007ff
 8001da0:	fffffc01 	.word	0xfffffc01
 8001da4:	08009f68 	.word	0x08009f68
 8001da8:	000003ff 	.word	0x000003ff
 8001dac:	feffffff 	.word	0xfeffffff
 8001db0:	000007fe 	.word	0x000007fe
 8001db4:	000003f3 	.word	0x000003f3
 8001db8:	fffffc0d 	.word	0xfffffc0d
 8001dbc:	fffff801 	.word	0xfffff801
 8001dc0:	464a      	mov	r2, r9
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	4691      	mov	r9, r2
 8001dc8:	2400      	movs	r4, #0
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e66e      	b.n	8001aac <__aeabi_ddiv+0x80>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	469a      	mov	sl, r3
 8001dd4:	2500      	movs	r5, #0
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <__aeabi_ddiv+0x5cc>)
 8001dd8:	0312      	lsls	r2, r2, #12
 8001dda:	e67e      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001ddc:	2501      	movs	r5, #1
 8001dde:	426d      	negs	r5, r5
 8001de0:	2201      	movs	r2, #1
 8001de2:	1ad2      	subs	r2, r2, r3
 8001de4:	2a38      	cmp	r2, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_ddiv+0x3be>
 8001de8:	e674      	b.n	8001ad4 <__aeabi_ddiv+0xa8>
 8001dea:	2a1f      	cmp	r2, #31
 8001dec:	dc00      	bgt.n	8001df0 <__aeabi_ddiv+0x3c4>
 8001dee:	e0bd      	b.n	8001f6c <__aeabi_ddiv+0x540>
 8001df0:	211f      	movs	r1, #31
 8001df2:	4249      	negs	r1, r1
 8001df4:	1acb      	subs	r3, r1, r3
 8001df6:	4641      	mov	r1, r8
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	2a20      	cmp	r2, #32
 8001dfe:	d004      	beq.n	8001e0a <__aeabi_ddiv+0x3de>
 8001e00:	4641      	mov	r1, r8
 8001e02:	4a7e      	ldr	r2, [pc, #504]	; (8001ffc <__aeabi_ddiv+0x5d0>)
 8001e04:	445a      	add	r2, fp
 8001e06:	4091      	lsls	r1, r2
 8001e08:	430d      	orrs	r5, r1
 8001e0a:	0029      	movs	r1, r5
 8001e0c:	1e4a      	subs	r2, r1, #1
 8001e0e:	4191      	sbcs	r1, r2
 8001e10:	4319      	orrs	r1, r3
 8001e12:	2307      	movs	r3, #7
 8001e14:	001d      	movs	r5, r3
 8001e16:	2200      	movs	r2, #0
 8001e18:	400d      	ands	r5, r1
 8001e1a:	420b      	tst	r3, r1
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_ddiv+0x3f4>
 8001e1e:	e0d0      	b.n	8001fc2 <__aeabi_ddiv+0x596>
 8001e20:	220f      	movs	r2, #15
 8001e22:	2300      	movs	r3, #0
 8001e24:	400a      	ands	r2, r1
 8001e26:	2a04      	cmp	r2, #4
 8001e28:	d100      	bne.n	8001e2c <__aeabi_ddiv+0x400>
 8001e2a:	e0c7      	b.n	8001fbc <__aeabi_ddiv+0x590>
 8001e2c:	1d0a      	adds	r2, r1, #4
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	4189      	sbcs	r1, r1
 8001e32:	4249      	negs	r1, r1
 8001e34:	185b      	adds	r3, r3, r1
 8001e36:	0011      	movs	r1, r2
 8001e38:	021a      	lsls	r2, r3, #8
 8001e3a:	d400      	bmi.n	8001e3e <__aeabi_ddiv+0x412>
 8001e3c:	e0be      	b.n	8001fbc <__aeabi_ddiv+0x590>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	2200      	movs	r2, #0
 8001e42:	2500      	movs	r5, #0
 8001e44:	e649      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	4643      	mov	r3, r8
 8001e4a:	0312      	lsls	r2, r2, #12
 8001e4c:	4213      	tst	r3, r2
 8001e4e:	d008      	beq.n	8001e62 <__aeabi_ddiv+0x436>
 8001e50:	4214      	tst	r4, r2
 8001e52:	d106      	bne.n	8001e62 <__aeabi_ddiv+0x436>
 8001e54:	4322      	orrs	r2, r4
 8001e56:	0312      	lsls	r2, r2, #12
 8001e58:	46ba      	mov	sl, r7
 8001e5a:	000d      	movs	r5, r1
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <__aeabi_ddiv+0x5cc>)
 8001e5e:	0b12      	lsrs	r2, r2, #12
 8001e60:	e63b      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	4643      	mov	r3, r8
 8001e66:	0312      	lsls	r2, r2, #12
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	0312      	lsls	r2, r2, #12
 8001e6c:	46b2      	mov	sl, r6
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <__aeabi_ddiv+0x5cc>)
 8001e70:	0b12      	lsrs	r2, r2, #12
 8001e72:	e632      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <__aeabi_ddiv+0x44e>
 8001e78:	e702      	b.n	8001c80 <__aeabi_ddiv+0x254>
 8001e7a:	19a6      	adds	r6, r4, r6
 8001e7c:	1e6a      	subs	r2, r5, #1
 8001e7e:	42a6      	cmp	r6, r4
 8001e80:	d200      	bcs.n	8001e84 <__aeabi_ddiv+0x458>
 8001e82:	e089      	b.n	8001f98 <__aeabi_ddiv+0x56c>
 8001e84:	4286      	cmp	r6, r0
 8001e86:	d200      	bcs.n	8001e8a <__aeabi_ddiv+0x45e>
 8001e88:	e09f      	b.n	8001fca <__aeabi_ddiv+0x59e>
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_ddiv+0x462>
 8001e8c:	e0af      	b.n	8001fee <__aeabi_ddiv+0x5c2>
 8001e8e:	0015      	movs	r5, r2
 8001e90:	e6f4      	b.n	8001c7c <__aeabi_ddiv+0x250>
 8001e92:	42a9      	cmp	r1, r5
 8001e94:	d900      	bls.n	8001e98 <__aeabi_ddiv+0x46c>
 8001e96:	e63c      	b.n	8001b12 <__aeabi_ddiv+0xe6>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	07de      	lsls	r6, r3, #31
 8001e9c:	0858      	lsrs	r0, r3, #1
 8001e9e:	086b      	lsrs	r3, r5, #1
 8001ea0:	431e      	orrs	r6, r3
 8001ea2:	07ed      	lsls	r5, r5, #31
 8001ea4:	e63c      	b.n	8001b20 <__aeabi_ddiv+0xf4>
 8001ea6:	f001 f977 	bl	8003198 <__clzsi2>
 8001eaa:	0001      	movs	r1, r0
 8001eac:	0002      	movs	r2, r0
 8001eae:	3115      	adds	r1, #21
 8001eb0:	3220      	adds	r2, #32
 8001eb2:	291c      	cmp	r1, #28
 8001eb4:	dc00      	bgt.n	8001eb8 <__aeabi_ddiv+0x48c>
 8001eb6:	e72c      	b.n	8001d12 <__aeabi_ddiv+0x2e6>
 8001eb8:	464b      	mov	r3, r9
 8001eba:	3808      	subs	r0, #8
 8001ebc:	4083      	lsls	r3, r0
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	e732      	b.n	8001d2a <__aeabi_ddiv+0x2fe>
 8001ec4:	f001 f968 	bl	8003198 <__clzsi2>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	001a      	movs	r2, r3
 8001ecc:	3215      	adds	r2, #21
 8001ece:	3020      	adds	r0, #32
 8001ed0:	2a1c      	cmp	r2, #28
 8001ed2:	dc00      	bgt.n	8001ed6 <__aeabi_ddiv+0x4aa>
 8001ed4:	e6ff      	b.n	8001cd6 <__aeabi_ddiv+0x2aa>
 8001ed6:	4654      	mov	r4, sl
 8001ed8:	3b08      	subs	r3, #8
 8001eda:	2100      	movs	r1, #0
 8001edc:	409c      	lsls	r4, r3
 8001ede:	e705      	b.n	8001cec <__aeabi_ddiv+0x2c0>
 8001ee0:	1936      	adds	r6, r6, r4
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	42b4      	cmp	r4, r6
 8001ee6:	d900      	bls.n	8001eea <__aeabi_ddiv+0x4be>
 8001ee8:	e6a6      	b.n	8001c38 <__aeabi_ddiv+0x20c>
 8001eea:	42b2      	cmp	r2, r6
 8001eec:	d800      	bhi.n	8001ef0 <__aeabi_ddiv+0x4c4>
 8001eee:	e6a3      	b.n	8001c38 <__aeabi_ddiv+0x20c>
 8001ef0:	1e83      	subs	r3, r0, #2
 8001ef2:	1936      	adds	r6, r6, r4
 8001ef4:	e6a0      	b.n	8001c38 <__aeabi_ddiv+0x20c>
 8001ef6:	1909      	adds	r1, r1, r4
 8001ef8:	3d01      	subs	r5, #1
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d900      	bls.n	8001f00 <__aeabi_ddiv+0x4d4>
 8001efe:	e68d      	b.n	8001c1c <__aeabi_ddiv+0x1f0>
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d800      	bhi.n	8001f06 <__aeabi_ddiv+0x4da>
 8001f04:	e68a      	b.n	8001c1c <__aeabi_ddiv+0x1f0>
 8001f06:	1e85      	subs	r5, r0, #2
 8001f08:	1909      	adds	r1, r1, r4
 8001f0a:	e687      	b.n	8001c1c <__aeabi_ddiv+0x1f0>
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	402a      	ands	r2, r5
 8001f10:	2a04      	cmp	r2, #4
 8001f12:	d100      	bne.n	8001f16 <__aeabi_ddiv+0x4ea>
 8001f14:	e6bc      	b.n	8001c90 <__aeabi_ddiv+0x264>
 8001f16:	1d29      	adds	r1, r5, #4
 8001f18:	42a9      	cmp	r1, r5
 8001f1a:	41ad      	sbcs	r5, r5
 8001f1c:	426d      	negs	r5, r5
 8001f1e:	08c9      	lsrs	r1, r1, #3
 8001f20:	44a8      	add	r8, r5
 8001f22:	e6b6      	b.n	8001c92 <__aeabi_ddiv+0x266>
 8001f24:	42af      	cmp	r7, r5
 8001f26:	d900      	bls.n	8001f2a <__aeabi_ddiv+0x4fe>
 8001f28:	e662      	b.n	8001bf0 <__aeabi_ddiv+0x1c4>
 8001f2a:	4281      	cmp	r1, r0
 8001f2c:	d804      	bhi.n	8001f38 <__aeabi_ddiv+0x50c>
 8001f2e:	d000      	beq.n	8001f32 <__aeabi_ddiv+0x506>
 8001f30:	e65e      	b.n	8001bf0 <__aeabi_ddiv+0x1c4>
 8001f32:	42ae      	cmp	r6, r5
 8001f34:	d800      	bhi.n	8001f38 <__aeabi_ddiv+0x50c>
 8001f36:	e65b      	b.n	8001bf0 <__aeabi_ddiv+0x1c4>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	469c      	mov	ip, r3
 8001f3e:	9b00      	ldr	r3, [sp, #0]
 8001f40:	44e0      	add	r8, ip
 8001f42:	469c      	mov	ip, r3
 8001f44:	4465      	add	r5, ip
 8001f46:	429d      	cmp	r5, r3
 8001f48:	419b      	sbcs	r3, r3
 8001f4a:	425b      	negs	r3, r3
 8001f4c:	191b      	adds	r3, r3, r4
 8001f4e:	18c0      	adds	r0, r0, r3
 8001f50:	e64f      	b.n	8001bf2 <__aeabi_ddiv+0x1c6>
 8001f52:	42b2      	cmp	r2, r6
 8001f54:	d800      	bhi.n	8001f58 <__aeabi_ddiv+0x52c>
 8001f56:	e612      	b.n	8001b7e <__aeabi_ddiv+0x152>
 8001f58:	1e83      	subs	r3, r0, #2
 8001f5a:	1936      	adds	r6, r6, r4
 8001f5c:	e60f      	b.n	8001b7e <__aeabi_ddiv+0x152>
 8001f5e:	428a      	cmp	r2, r1
 8001f60:	d800      	bhi.n	8001f64 <__aeabi_ddiv+0x538>
 8001f62:	e5fa      	b.n	8001b5a <__aeabi_ddiv+0x12e>
 8001f64:	1e83      	subs	r3, r0, #2
 8001f66:	4698      	mov	r8, r3
 8001f68:	1909      	adds	r1, r1, r4
 8001f6a:	e5f6      	b.n	8001b5a <__aeabi_ddiv+0x12e>
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <__aeabi_ddiv+0x5d4>)
 8001f6e:	0028      	movs	r0, r5
 8001f70:	445b      	add	r3, fp
 8001f72:	4641      	mov	r1, r8
 8001f74:	409d      	lsls	r5, r3
 8001f76:	4099      	lsls	r1, r3
 8001f78:	40d0      	lsrs	r0, r2
 8001f7a:	1e6b      	subs	r3, r5, #1
 8001f7c:	419d      	sbcs	r5, r3
 8001f7e:	4643      	mov	r3, r8
 8001f80:	4301      	orrs	r1, r0
 8001f82:	4329      	orrs	r1, r5
 8001f84:	40d3      	lsrs	r3, r2
 8001f86:	074a      	lsls	r2, r1, #29
 8001f88:	d100      	bne.n	8001f8c <__aeabi_ddiv+0x560>
 8001f8a:	e755      	b.n	8001e38 <__aeabi_ddiv+0x40c>
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	400a      	ands	r2, r1
 8001f90:	2a04      	cmp	r2, #4
 8001f92:	d000      	beq.n	8001f96 <__aeabi_ddiv+0x56a>
 8001f94:	e74a      	b.n	8001e2c <__aeabi_ddiv+0x400>
 8001f96:	e74f      	b.n	8001e38 <__aeabi_ddiv+0x40c>
 8001f98:	0015      	movs	r5, r2
 8001f9a:	4286      	cmp	r6, r0
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_ddiv+0x574>
 8001f9e:	e66d      	b.n	8001c7c <__aeabi_ddiv+0x250>
 8001fa0:	9a00      	ldr	r2, [sp, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_ddiv+0x57c>
 8001fa6:	e669      	b.n	8001c7c <__aeabi_ddiv+0x250>
 8001fa8:	e66a      	b.n	8001c80 <__aeabi_ddiv+0x254>
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <__aeabi_ddiv+0x5d8>)
 8001fac:	445b      	add	r3, fp
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_ddiv+0x588>
 8001fb2:	e713      	b.n	8001ddc <__aeabi_ddiv+0x3b0>
 8001fb4:	2501      	movs	r5, #1
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	44a8      	add	r8, r5
 8001fba:	e66a      	b.n	8001c92 <__aeabi_ddiv+0x266>
 8001fbc:	075d      	lsls	r5, r3, #29
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	0b1a      	lsrs	r2, r3, #12
 8001fc2:	08c9      	lsrs	r1, r1, #3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	430d      	orrs	r5, r1
 8001fc8:	e587      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001fca:	9900      	ldr	r1, [sp, #0]
 8001fcc:	3d02      	subs	r5, #2
 8001fce:	004a      	lsls	r2, r1, #1
 8001fd0:	428a      	cmp	r2, r1
 8001fd2:	41bf      	sbcs	r7, r7
 8001fd4:	427f      	negs	r7, r7
 8001fd6:	193f      	adds	r7, r7, r4
 8001fd8:	19f6      	adds	r6, r6, r7
 8001fda:	9200      	str	r2, [sp, #0]
 8001fdc:	e7dd      	b.n	8001f9a <__aeabi_ddiv+0x56e>
 8001fde:	2280      	movs	r2, #128	; 0x80
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	0312      	lsls	r2, r2, #12
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	0312      	lsls	r2, r2, #12
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <__aeabi_ddiv+0x5cc>)
 8001fea:	0b12      	lsrs	r2, r2, #12
 8001fec:	e575      	b.n	8001ada <__aeabi_ddiv+0xae>
 8001fee:	9900      	ldr	r1, [sp, #0]
 8001ff0:	4299      	cmp	r1, r3
 8001ff2:	d3ea      	bcc.n	8001fca <__aeabi_ddiv+0x59e>
 8001ff4:	0015      	movs	r5, r2
 8001ff6:	e7d3      	b.n	8001fa0 <__aeabi_ddiv+0x574>
 8001ff8:	000007ff 	.word	0x000007ff
 8001ffc:	0000043e 	.word	0x0000043e
 8002000:	0000041e 	.word	0x0000041e
 8002004:	000003ff 	.word	0x000003ff

08002008 <__eqdf2>:
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200a:	464e      	mov	r6, r9
 800200c:	4645      	mov	r5, r8
 800200e:	46de      	mov	lr, fp
 8002010:	4657      	mov	r7, sl
 8002012:	4690      	mov	r8, r2
 8002014:	b5e0      	push	{r5, r6, r7, lr}
 8002016:	0017      	movs	r7, r2
 8002018:	031a      	lsls	r2, r3, #12
 800201a:	0b12      	lsrs	r2, r2, #12
 800201c:	0005      	movs	r5, r0
 800201e:	4684      	mov	ip, r0
 8002020:	4819      	ldr	r0, [pc, #100]	; (8002088 <__eqdf2+0x80>)
 8002022:	030e      	lsls	r6, r1, #12
 8002024:	004c      	lsls	r4, r1, #1
 8002026:	4691      	mov	r9, r2
 8002028:	005a      	lsls	r2, r3, #1
 800202a:	0fdb      	lsrs	r3, r3, #31
 800202c:	469b      	mov	fp, r3
 800202e:	0b36      	lsrs	r6, r6, #12
 8002030:	0d64      	lsrs	r4, r4, #21
 8002032:	0fc9      	lsrs	r1, r1, #31
 8002034:	0d52      	lsrs	r2, r2, #21
 8002036:	4284      	cmp	r4, r0
 8002038:	d019      	beq.n	800206e <__eqdf2+0x66>
 800203a:	4282      	cmp	r2, r0
 800203c:	d010      	beq.n	8002060 <__eqdf2+0x58>
 800203e:	2001      	movs	r0, #1
 8002040:	4294      	cmp	r4, r2
 8002042:	d10e      	bne.n	8002062 <__eqdf2+0x5a>
 8002044:	454e      	cmp	r6, r9
 8002046:	d10c      	bne.n	8002062 <__eqdf2+0x5a>
 8002048:	2001      	movs	r0, #1
 800204a:	45c4      	cmp	ip, r8
 800204c:	d109      	bne.n	8002062 <__eqdf2+0x5a>
 800204e:	4559      	cmp	r1, fp
 8002050:	d017      	beq.n	8002082 <__eqdf2+0x7a>
 8002052:	2c00      	cmp	r4, #0
 8002054:	d105      	bne.n	8002062 <__eqdf2+0x5a>
 8002056:	0030      	movs	r0, r6
 8002058:	4328      	orrs	r0, r5
 800205a:	1e43      	subs	r3, r0, #1
 800205c:	4198      	sbcs	r0, r3
 800205e:	e000      	b.n	8002062 <__eqdf2+0x5a>
 8002060:	2001      	movs	r0, #1
 8002062:	bcf0      	pop	{r4, r5, r6, r7}
 8002064:	46bb      	mov	fp, r7
 8002066:	46b2      	mov	sl, r6
 8002068:	46a9      	mov	r9, r5
 800206a:	46a0      	mov	r8, r4
 800206c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206e:	0033      	movs	r3, r6
 8002070:	2001      	movs	r0, #1
 8002072:	432b      	orrs	r3, r5
 8002074:	d1f5      	bne.n	8002062 <__eqdf2+0x5a>
 8002076:	42a2      	cmp	r2, r4
 8002078:	d1f3      	bne.n	8002062 <__eqdf2+0x5a>
 800207a:	464b      	mov	r3, r9
 800207c:	433b      	orrs	r3, r7
 800207e:	d1f0      	bne.n	8002062 <__eqdf2+0x5a>
 8002080:	e7e2      	b.n	8002048 <__eqdf2+0x40>
 8002082:	2000      	movs	r0, #0
 8002084:	e7ed      	b.n	8002062 <__eqdf2+0x5a>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	000007ff 	.word	0x000007ff

0800208c <__gedf2>:
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	4647      	mov	r7, r8
 8002090:	46ce      	mov	lr, r9
 8002092:	0004      	movs	r4, r0
 8002094:	0018      	movs	r0, r3
 8002096:	0016      	movs	r6, r2
 8002098:	031b      	lsls	r3, r3, #12
 800209a:	0b1b      	lsrs	r3, r3, #12
 800209c:	4d2d      	ldr	r5, [pc, #180]	; (8002154 <__gedf2+0xc8>)
 800209e:	004a      	lsls	r2, r1, #1
 80020a0:	4699      	mov	r9, r3
 80020a2:	b580      	push	{r7, lr}
 80020a4:	0043      	lsls	r3, r0, #1
 80020a6:	030f      	lsls	r7, r1, #12
 80020a8:	46a4      	mov	ip, r4
 80020aa:	46b0      	mov	r8, r6
 80020ac:	0b3f      	lsrs	r7, r7, #12
 80020ae:	0d52      	lsrs	r2, r2, #21
 80020b0:	0fc9      	lsrs	r1, r1, #31
 80020b2:	0d5b      	lsrs	r3, r3, #21
 80020b4:	0fc0      	lsrs	r0, r0, #31
 80020b6:	42aa      	cmp	r2, r5
 80020b8:	d021      	beq.n	80020fe <__gedf2+0x72>
 80020ba:	42ab      	cmp	r3, r5
 80020bc:	d013      	beq.n	80020e6 <__gedf2+0x5a>
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d122      	bne.n	8002108 <__gedf2+0x7c>
 80020c2:	433c      	orrs	r4, r7
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <__gedf2+0x42>
 80020c8:	464d      	mov	r5, r9
 80020ca:	432e      	orrs	r6, r5
 80020cc:	d022      	beq.n	8002114 <__gedf2+0x88>
 80020ce:	2c00      	cmp	r4, #0
 80020d0:	d010      	beq.n	80020f4 <__gedf2+0x68>
 80020d2:	4281      	cmp	r1, r0
 80020d4:	d022      	beq.n	800211c <__gedf2+0x90>
 80020d6:	2002      	movs	r0, #2
 80020d8:	3901      	subs	r1, #1
 80020da:	4008      	ands	r0, r1
 80020dc:	3801      	subs	r0, #1
 80020de:	bcc0      	pop	{r6, r7}
 80020e0:	46b9      	mov	r9, r7
 80020e2:	46b0      	mov	r8, r6
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e6:	464d      	mov	r5, r9
 80020e8:	432e      	orrs	r6, r5
 80020ea:	d129      	bne.n	8002140 <__gedf2+0xb4>
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d1f0      	bne.n	80020d2 <__gedf2+0x46>
 80020f0:	433c      	orrs	r4, r7
 80020f2:	d1ee      	bne.n	80020d2 <__gedf2+0x46>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d1f2      	bne.n	80020de <__gedf2+0x52>
 80020f8:	2001      	movs	r0, #1
 80020fa:	4240      	negs	r0, r0
 80020fc:	e7ef      	b.n	80020de <__gedf2+0x52>
 80020fe:	003d      	movs	r5, r7
 8002100:	4325      	orrs	r5, r4
 8002102:	d11d      	bne.n	8002140 <__gedf2+0xb4>
 8002104:	4293      	cmp	r3, r2
 8002106:	d0ee      	beq.n	80020e6 <__gedf2+0x5a>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e2      	bne.n	80020d2 <__gedf2+0x46>
 800210c:	464c      	mov	r4, r9
 800210e:	4326      	orrs	r6, r4
 8002110:	d1df      	bne.n	80020d2 <__gedf2+0x46>
 8002112:	e7e0      	b.n	80020d6 <__gedf2+0x4a>
 8002114:	2000      	movs	r0, #0
 8002116:	2c00      	cmp	r4, #0
 8002118:	d0e1      	beq.n	80020de <__gedf2+0x52>
 800211a:	e7dc      	b.n	80020d6 <__gedf2+0x4a>
 800211c:	429a      	cmp	r2, r3
 800211e:	dc0a      	bgt.n	8002136 <__gedf2+0xaa>
 8002120:	dbe8      	blt.n	80020f4 <__gedf2+0x68>
 8002122:	454f      	cmp	r7, r9
 8002124:	d8d7      	bhi.n	80020d6 <__gedf2+0x4a>
 8002126:	d00e      	beq.n	8002146 <__gedf2+0xba>
 8002128:	2000      	movs	r0, #0
 800212a:	454f      	cmp	r7, r9
 800212c:	d2d7      	bcs.n	80020de <__gedf2+0x52>
 800212e:	2900      	cmp	r1, #0
 8002130:	d0e2      	beq.n	80020f8 <__gedf2+0x6c>
 8002132:	0008      	movs	r0, r1
 8002134:	e7d3      	b.n	80020de <__gedf2+0x52>
 8002136:	4243      	negs	r3, r0
 8002138:	4158      	adcs	r0, r3
 800213a:	0040      	lsls	r0, r0, #1
 800213c:	3801      	subs	r0, #1
 800213e:	e7ce      	b.n	80020de <__gedf2+0x52>
 8002140:	2002      	movs	r0, #2
 8002142:	4240      	negs	r0, r0
 8002144:	e7cb      	b.n	80020de <__gedf2+0x52>
 8002146:	45c4      	cmp	ip, r8
 8002148:	d8c5      	bhi.n	80020d6 <__gedf2+0x4a>
 800214a:	2000      	movs	r0, #0
 800214c:	45c4      	cmp	ip, r8
 800214e:	d2c6      	bcs.n	80020de <__gedf2+0x52>
 8002150:	e7ed      	b.n	800212e <__gedf2+0xa2>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	000007ff 	.word	0x000007ff

08002158 <__ledf2>:
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	4647      	mov	r7, r8
 800215c:	46ce      	mov	lr, r9
 800215e:	0004      	movs	r4, r0
 8002160:	0018      	movs	r0, r3
 8002162:	0016      	movs	r6, r2
 8002164:	031b      	lsls	r3, r3, #12
 8002166:	0b1b      	lsrs	r3, r3, #12
 8002168:	4d2c      	ldr	r5, [pc, #176]	; (800221c <__ledf2+0xc4>)
 800216a:	004a      	lsls	r2, r1, #1
 800216c:	4699      	mov	r9, r3
 800216e:	b580      	push	{r7, lr}
 8002170:	0043      	lsls	r3, r0, #1
 8002172:	030f      	lsls	r7, r1, #12
 8002174:	46a4      	mov	ip, r4
 8002176:	46b0      	mov	r8, r6
 8002178:	0b3f      	lsrs	r7, r7, #12
 800217a:	0d52      	lsrs	r2, r2, #21
 800217c:	0fc9      	lsrs	r1, r1, #31
 800217e:	0d5b      	lsrs	r3, r3, #21
 8002180:	0fc0      	lsrs	r0, r0, #31
 8002182:	42aa      	cmp	r2, r5
 8002184:	d00d      	beq.n	80021a2 <__ledf2+0x4a>
 8002186:	42ab      	cmp	r3, r5
 8002188:	d010      	beq.n	80021ac <__ledf2+0x54>
 800218a:	2a00      	cmp	r2, #0
 800218c:	d127      	bne.n	80021de <__ledf2+0x86>
 800218e:	433c      	orrs	r4, r7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <__ledf2+0x60>
 8002194:	464d      	mov	r5, r9
 8002196:	432e      	orrs	r6, r5
 8002198:	d10e      	bne.n	80021b8 <__ledf2+0x60>
 800219a:	2000      	movs	r0, #0
 800219c:	2c00      	cmp	r4, #0
 800219e:	d015      	beq.n	80021cc <__ledf2+0x74>
 80021a0:	e00e      	b.n	80021c0 <__ledf2+0x68>
 80021a2:	003d      	movs	r5, r7
 80021a4:	4325      	orrs	r5, r4
 80021a6:	d110      	bne.n	80021ca <__ledf2+0x72>
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d118      	bne.n	80021de <__ledf2+0x86>
 80021ac:	464d      	mov	r5, r9
 80021ae:	432e      	orrs	r6, r5
 80021b0:	d10b      	bne.n	80021ca <__ledf2+0x72>
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d102      	bne.n	80021bc <__ledf2+0x64>
 80021b6:	433c      	orrs	r4, r7
 80021b8:	2c00      	cmp	r4, #0
 80021ba:	d00b      	beq.n	80021d4 <__ledf2+0x7c>
 80021bc:	4281      	cmp	r1, r0
 80021be:	d014      	beq.n	80021ea <__ledf2+0x92>
 80021c0:	2002      	movs	r0, #2
 80021c2:	3901      	subs	r1, #1
 80021c4:	4008      	ands	r0, r1
 80021c6:	3801      	subs	r0, #1
 80021c8:	e000      	b.n	80021cc <__ledf2+0x74>
 80021ca:	2002      	movs	r0, #2
 80021cc:	bcc0      	pop	{r6, r7}
 80021ce:	46b9      	mov	r9, r7
 80021d0:	46b0      	mov	r8, r6
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d1f9      	bne.n	80021cc <__ledf2+0x74>
 80021d8:	2001      	movs	r0, #1
 80021da:	4240      	negs	r0, r0
 80021dc:	e7f6      	b.n	80021cc <__ledf2+0x74>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ec      	bne.n	80021bc <__ledf2+0x64>
 80021e2:	464c      	mov	r4, r9
 80021e4:	4326      	orrs	r6, r4
 80021e6:	d1e9      	bne.n	80021bc <__ledf2+0x64>
 80021e8:	e7ea      	b.n	80021c0 <__ledf2+0x68>
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dd04      	ble.n	80021f8 <__ledf2+0xa0>
 80021ee:	4243      	negs	r3, r0
 80021f0:	4158      	adcs	r0, r3
 80021f2:	0040      	lsls	r0, r0, #1
 80021f4:	3801      	subs	r0, #1
 80021f6:	e7e9      	b.n	80021cc <__ledf2+0x74>
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbeb      	blt.n	80021d4 <__ledf2+0x7c>
 80021fc:	454f      	cmp	r7, r9
 80021fe:	d8df      	bhi.n	80021c0 <__ledf2+0x68>
 8002200:	d006      	beq.n	8002210 <__ledf2+0xb8>
 8002202:	2000      	movs	r0, #0
 8002204:	454f      	cmp	r7, r9
 8002206:	d2e1      	bcs.n	80021cc <__ledf2+0x74>
 8002208:	2900      	cmp	r1, #0
 800220a:	d0e5      	beq.n	80021d8 <__ledf2+0x80>
 800220c:	0008      	movs	r0, r1
 800220e:	e7dd      	b.n	80021cc <__ledf2+0x74>
 8002210:	45c4      	cmp	ip, r8
 8002212:	d8d5      	bhi.n	80021c0 <__ledf2+0x68>
 8002214:	2000      	movs	r0, #0
 8002216:	45c4      	cmp	ip, r8
 8002218:	d2d8      	bcs.n	80021cc <__ledf2+0x74>
 800221a:	e7f5      	b.n	8002208 <__ledf2+0xb0>
 800221c:	000007ff 	.word	0x000007ff

08002220 <__aeabi_dmul>:
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	4645      	mov	r5, r8
 8002224:	46de      	mov	lr, fp
 8002226:	4657      	mov	r7, sl
 8002228:	464e      	mov	r6, r9
 800222a:	b5e0      	push	{r5, r6, r7, lr}
 800222c:	001f      	movs	r7, r3
 800222e:	030b      	lsls	r3, r1, #12
 8002230:	0b1b      	lsrs	r3, r3, #12
 8002232:	469b      	mov	fp, r3
 8002234:	004d      	lsls	r5, r1, #1
 8002236:	0fcb      	lsrs	r3, r1, #31
 8002238:	0004      	movs	r4, r0
 800223a:	4691      	mov	r9, r2
 800223c:	4698      	mov	r8, r3
 800223e:	b087      	sub	sp, #28
 8002240:	0d6d      	lsrs	r5, r5, #21
 8002242:	d100      	bne.n	8002246 <__aeabi_dmul+0x26>
 8002244:	e1cd      	b.n	80025e2 <__aeabi_dmul+0x3c2>
 8002246:	4bce      	ldr	r3, [pc, #824]	; (8002580 <__aeabi_dmul+0x360>)
 8002248:	429d      	cmp	r5, r3
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x2e>
 800224c:	e1e9      	b.n	8002622 <__aeabi_dmul+0x402>
 800224e:	465a      	mov	r2, fp
 8002250:	0f43      	lsrs	r3, r0, #29
 8002252:	00d2      	lsls	r2, r2, #3
 8002254:	4313      	orrs	r3, r2
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	0412      	lsls	r2, r2, #16
 800225a:	431a      	orrs	r2, r3
 800225c:	00c3      	lsls	r3, r0, #3
 800225e:	469a      	mov	sl, r3
 8002260:	4bc8      	ldr	r3, [pc, #800]	; (8002584 <__aeabi_dmul+0x364>)
 8002262:	4693      	mov	fp, r2
 8002264:	469c      	mov	ip, r3
 8002266:	2300      	movs	r3, #0
 8002268:	2600      	movs	r6, #0
 800226a:	4465      	add	r5, ip
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	033c      	lsls	r4, r7, #12
 8002270:	007b      	lsls	r3, r7, #1
 8002272:	4648      	mov	r0, r9
 8002274:	0b24      	lsrs	r4, r4, #12
 8002276:	0d5b      	lsrs	r3, r3, #21
 8002278:	0fff      	lsrs	r7, r7, #31
 800227a:	2b00      	cmp	r3, #0
 800227c:	d100      	bne.n	8002280 <__aeabi_dmul+0x60>
 800227e:	e189      	b.n	8002594 <__aeabi_dmul+0x374>
 8002280:	4abf      	ldr	r2, [pc, #764]	; (8002580 <__aeabi_dmul+0x360>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <__aeabi_dmul+0x9a>
 8002286:	0f42      	lsrs	r2, r0, #29
 8002288:	00e4      	lsls	r4, r4, #3
 800228a:	4322      	orrs	r2, r4
 800228c:	2480      	movs	r4, #128	; 0x80
 800228e:	0424      	lsls	r4, r4, #16
 8002290:	4314      	orrs	r4, r2
 8002292:	4abc      	ldr	r2, [pc, #752]	; (8002584 <__aeabi_dmul+0x364>)
 8002294:	2100      	movs	r1, #0
 8002296:	4694      	mov	ip, r2
 8002298:	4642      	mov	r2, r8
 800229a:	4463      	add	r3, ip
 800229c:	195b      	adds	r3, r3, r5
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	9b01      	ldr	r3, [sp, #4]
 80022a2:	407a      	eors	r2, r7
 80022a4:	3301      	adds	r3, #1
 80022a6:	00c0      	lsls	r0, r0, #3
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	2e0a      	cmp	r6, #10
 80022ae:	dd1c      	ble.n	80022ea <__aeabi_dmul+0xca>
 80022b0:	003a      	movs	r2, r7
 80022b2:	2e0b      	cmp	r6, #11
 80022b4:	d05e      	beq.n	8002374 <__aeabi_dmul+0x154>
 80022b6:	4647      	mov	r7, r8
 80022b8:	e056      	b.n	8002368 <__aeabi_dmul+0x148>
 80022ba:	4649      	mov	r1, r9
 80022bc:	4bb0      	ldr	r3, [pc, #704]	; (8002580 <__aeabi_dmul+0x360>)
 80022be:	4321      	orrs	r1, r4
 80022c0:	18eb      	adds	r3, r5, r3
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	2900      	cmp	r1, #0
 80022c6:	d12a      	bne.n	800231e <__aeabi_dmul+0xfe>
 80022c8:	2080      	movs	r0, #128	; 0x80
 80022ca:	2202      	movs	r2, #2
 80022cc:	0100      	lsls	r0, r0, #4
 80022ce:	002b      	movs	r3, r5
 80022d0:	4684      	mov	ip, r0
 80022d2:	4316      	orrs	r6, r2
 80022d4:	4642      	mov	r2, r8
 80022d6:	4463      	add	r3, ip
 80022d8:	407a      	eors	r2, r7
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	2e0a      	cmp	r6, #10
 80022e0:	dd00      	ble.n	80022e4 <__aeabi_dmul+0xc4>
 80022e2:	e231      	b.n	8002748 <__aeabi_dmul+0x528>
 80022e4:	2000      	movs	r0, #0
 80022e6:	2400      	movs	r4, #0
 80022e8:	2102      	movs	r1, #2
 80022ea:	2e02      	cmp	r6, #2
 80022ec:	dc26      	bgt.n	800233c <__aeabi_dmul+0x11c>
 80022ee:	3e01      	subs	r6, #1
 80022f0:	2e01      	cmp	r6, #1
 80022f2:	d852      	bhi.n	800239a <__aeabi_dmul+0x17a>
 80022f4:	2902      	cmp	r1, #2
 80022f6:	d04c      	beq.n	8002392 <__aeabi_dmul+0x172>
 80022f8:	2901      	cmp	r1, #1
 80022fa:	d000      	beq.n	80022fe <__aeabi_dmul+0xde>
 80022fc:	e118      	b.n	8002530 <__aeabi_dmul+0x310>
 80022fe:	2300      	movs	r3, #0
 8002300:	2400      	movs	r4, #0
 8002302:	2500      	movs	r5, #0
 8002304:	051b      	lsls	r3, r3, #20
 8002306:	4323      	orrs	r3, r4
 8002308:	07d2      	lsls	r2, r2, #31
 800230a:	4313      	orrs	r3, r2
 800230c:	0028      	movs	r0, r5
 800230e:	0019      	movs	r1, r3
 8002310:	b007      	add	sp, #28
 8002312:	bcf0      	pop	{r4, r5, r6, r7}
 8002314:	46bb      	mov	fp, r7
 8002316:	46b2      	mov	sl, r6
 8002318:	46a9      	mov	r9, r5
 800231a:	46a0      	mov	r8, r4
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	2203      	movs	r2, #3
 8002322:	0109      	lsls	r1, r1, #4
 8002324:	002b      	movs	r3, r5
 8002326:	468c      	mov	ip, r1
 8002328:	4316      	orrs	r6, r2
 800232a:	4642      	mov	r2, r8
 800232c:	4463      	add	r3, ip
 800232e:	407a      	eors	r2, r7
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	2e0a      	cmp	r6, #10
 8002336:	dd00      	ble.n	800233a <__aeabi_dmul+0x11a>
 8002338:	e228      	b.n	800278c <__aeabi_dmul+0x56c>
 800233a:	2103      	movs	r1, #3
 800233c:	2501      	movs	r5, #1
 800233e:	40b5      	lsls	r5, r6
 8002340:	46ac      	mov	ip, r5
 8002342:	26a6      	movs	r6, #166	; 0xa6
 8002344:	4663      	mov	r3, ip
 8002346:	00f6      	lsls	r6, r6, #3
 8002348:	4035      	ands	r5, r6
 800234a:	4233      	tst	r3, r6
 800234c:	d10b      	bne.n	8002366 <__aeabi_dmul+0x146>
 800234e:	2690      	movs	r6, #144	; 0x90
 8002350:	00b6      	lsls	r6, r6, #2
 8002352:	4233      	tst	r3, r6
 8002354:	d118      	bne.n	8002388 <__aeabi_dmul+0x168>
 8002356:	3eb9      	subs	r6, #185	; 0xb9
 8002358:	3eff      	subs	r6, #255	; 0xff
 800235a:	421e      	tst	r6, r3
 800235c:	d01d      	beq.n	800239a <__aeabi_dmul+0x17a>
 800235e:	46a3      	mov	fp, r4
 8002360:	4682      	mov	sl, r0
 8002362:	9100      	str	r1, [sp, #0]
 8002364:	e000      	b.n	8002368 <__aeabi_dmul+0x148>
 8002366:	0017      	movs	r7, r2
 8002368:	9900      	ldr	r1, [sp, #0]
 800236a:	003a      	movs	r2, r7
 800236c:	2902      	cmp	r1, #2
 800236e:	d010      	beq.n	8002392 <__aeabi_dmul+0x172>
 8002370:	465c      	mov	r4, fp
 8002372:	4650      	mov	r0, sl
 8002374:	2903      	cmp	r1, #3
 8002376:	d1bf      	bne.n	80022f8 <__aeabi_dmul+0xd8>
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	031b      	lsls	r3, r3, #12
 800237c:	431c      	orrs	r4, r3
 800237e:	0324      	lsls	r4, r4, #12
 8002380:	0005      	movs	r5, r0
 8002382:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <__aeabi_dmul+0x360>)
 8002384:	0b24      	lsrs	r4, r4, #12
 8002386:	e7bd      	b.n	8002304 <__aeabi_dmul+0xe4>
 8002388:	2480      	movs	r4, #128	; 0x80
 800238a:	2200      	movs	r2, #0
 800238c:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <__aeabi_dmul+0x360>)
 800238e:	0324      	lsls	r4, r4, #12
 8002390:	e7b8      	b.n	8002304 <__aeabi_dmul+0xe4>
 8002392:	2400      	movs	r4, #0
 8002394:	2500      	movs	r5, #0
 8002396:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <__aeabi_dmul+0x360>)
 8002398:	e7b4      	b.n	8002304 <__aeabi_dmul+0xe4>
 800239a:	4653      	mov	r3, sl
 800239c:	041e      	lsls	r6, r3, #16
 800239e:	0c36      	lsrs	r6, r6, #16
 80023a0:	0c1f      	lsrs	r7, r3, #16
 80023a2:	0033      	movs	r3, r6
 80023a4:	0c01      	lsrs	r1, r0, #16
 80023a6:	0400      	lsls	r0, r0, #16
 80023a8:	0c00      	lsrs	r0, r0, #16
 80023aa:	4343      	muls	r3, r0
 80023ac:	4698      	mov	r8, r3
 80023ae:	0003      	movs	r3, r0
 80023b0:	437b      	muls	r3, r7
 80023b2:	4699      	mov	r9, r3
 80023b4:	0033      	movs	r3, r6
 80023b6:	434b      	muls	r3, r1
 80023b8:	469c      	mov	ip, r3
 80023ba:	4643      	mov	r3, r8
 80023bc:	000d      	movs	r5, r1
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	469a      	mov	sl, r3
 80023c2:	437d      	muls	r5, r7
 80023c4:	44cc      	add	ip, r9
 80023c6:	44d4      	add	ip, sl
 80023c8:	9500      	str	r5, [sp, #0]
 80023ca:	45e1      	cmp	r9, ip
 80023cc:	d904      	bls.n	80023d8 <__aeabi_dmul+0x1b8>
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	4699      	mov	r9, r3
 80023d4:	444d      	add	r5, r9
 80023d6:	9500      	str	r5, [sp, #0]
 80023d8:	4663      	mov	r3, ip
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	001d      	movs	r5, r3
 80023de:	4663      	mov	r3, ip
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	469c      	mov	ip, r3
 80023e4:	4643      	mov	r3, r8
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	4698      	mov	r8, r3
 80023ec:	4663      	mov	r3, ip
 80023ee:	4443      	add	r3, r8
 80023f0:	9303      	str	r3, [sp, #12]
 80023f2:	0c23      	lsrs	r3, r4, #16
 80023f4:	4698      	mov	r8, r3
 80023f6:	0033      	movs	r3, r6
 80023f8:	0424      	lsls	r4, r4, #16
 80023fa:	0c24      	lsrs	r4, r4, #16
 80023fc:	4363      	muls	r3, r4
 80023fe:	469c      	mov	ip, r3
 8002400:	0023      	movs	r3, r4
 8002402:	437b      	muls	r3, r7
 8002404:	4699      	mov	r9, r3
 8002406:	4643      	mov	r3, r8
 8002408:	435e      	muls	r6, r3
 800240a:	435f      	muls	r7, r3
 800240c:	444e      	add	r6, r9
 800240e:	4663      	mov	r3, ip
 8002410:	46b2      	mov	sl, r6
 8002412:	0c1e      	lsrs	r6, r3, #16
 8002414:	4456      	add	r6, sl
 8002416:	45b1      	cmp	r9, r6
 8002418:	d903      	bls.n	8002422 <__aeabi_dmul+0x202>
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	4699      	mov	r9, r3
 8002420:	444f      	add	r7, r9
 8002422:	0c33      	lsrs	r3, r6, #16
 8002424:	4699      	mov	r9, r3
 8002426:	003b      	movs	r3, r7
 8002428:	444b      	add	r3, r9
 800242a:	9305      	str	r3, [sp, #20]
 800242c:	4663      	mov	r3, ip
 800242e:	46ac      	mov	ip, r5
 8002430:	041f      	lsls	r7, r3, #16
 8002432:	0c3f      	lsrs	r7, r7, #16
 8002434:	0436      	lsls	r6, r6, #16
 8002436:	19f6      	adds	r6, r6, r7
 8002438:	44b4      	add	ip, r6
 800243a:	4663      	mov	r3, ip
 800243c:	9304      	str	r3, [sp, #16]
 800243e:	465b      	mov	r3, fp
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	469c      	mov	ip, r3
 8002444:	465b      	mov	r3, fp
 8002446:	041f      	lsls	r7, r3, #16
 8002448:	0c3f      	lsrs	r7, r7, #16
 800244a:	003b      	movs	r3, r7
 800244c:	4343      	muls	r3, r0
 800244e:	4699      	mov	r9, r3
 8002450:	4663      	mov	r3, ip
 8002452:	4343      	muls	r3, r0
 8002454:	469a      	mov	sl, r3
 8002456:	464b      	mov	r3, r9
 8002458:	4660      	mov	r0, ip
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	469b      	mov	fp, r3
 800245e:	4348      	muls	r0, r1
 8002460:	4379      	muls	r1, r7
 8002462:	4451      	add	r1, sl
 8002464:	4459      	add	r1, fp
 8002466:	458a      	cmp	sl, r1
 8002468:	d903      	bls.n	8002472 <__aeabi_dmul+0x252>
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	469a      	mov	sl, r3
 8002470:	4450      	add	r0, sl
 8002472:	0c0b      	lsrs	r3, r1, #16
 8002474:	469a      	mov	sl, r3
 8002476:	464b      	mov	r3, r9
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	4699      	mov	r9, r3
 800247e:	003b      	movs	r3, r7
 8002480:	4363      	muls	r3, r4
 8002482:	0409      	lsls	r1, r1, #16
 8002484:	4645      	mov	r5, r8
 8002486:	4449      	add	r1, r9
 8002488:	4699      	mov	r9, r3
 800248a:	4663      	mov	r3, ip
 800248c:	435c      	muls	r4, r3
 800248e:	436b      	muls	r3, r5
 8002490:	469c      	mov	ip, r3
 8002492:	464b      	mov	r3, r9
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	4698      	mov	r8, r3
 8002498:	436f      	muls	r7, r5
 800249a:	193f      	adds	r7, r7, r4
 800249c:	4447      	add	r7, r8
 800249e:	4450      	add	r0, sl
 80024a0:	42bc      	cmp	r4, r7
 80024a2:	d903      	bls.n	80024ac <__aeabi_dmul+0x28c>
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	4698      	mov	r8, r3
 80024aa:	44c4      	add	ip, r8
 80024ac:	9b04      	ldr	r3, [sp, #16]
 80024ae:	9d00      	ldr	r5, [sp, #0]
 80024b0:	4698      	mov	r8, r3
 80024b2:	4445      	add	r5, r8
 80024b4:	42b5      	cmp	r5, r6
 80024b6:	41b6      	sbcs	r6, r6
 80024b8:	4273      	negs	r3, r6
 80024ba:	4698      	mov	r8, r3
 80024bc:	464b      	mov	r3, r9
 80024be:	041e      	lsls	r6, r3, #16
 80024c0:	9b05      	ldr	r3, [sp, #20]
 80024c2:	043c      	lsls	r4, r7, #16
 80024c4:	4699      	mov	r9, r3
 80024c6:	0c36      	lsrs	r6, r6, #16
 80024c8:	19a4      	adds	r4, r4, r6
 80024ca:	444c      	add	r4, r9
 80024cc:	46a1      	mov	r9, r4
 80024ce:	4683      	mov	fp, r0
 80024d0:	186e      	adds	r6, r5, r1
 80024d2:	44c1      	add	r9, r8
 80024d4:	428e      	cmp	r6, r1
 80024d6:	4189      	sbcs	r1, r1
 80024d8:	44cb      	add	fp, r9
 80024da:	465d      	mov	r5, fp
 80024dc:	4249      	negs	r1, r1
 80024de:	186d      	adds	r5, r5, r1
 80024e0:	429c      	cmp	r4, r3
 80024e2:	41a4      	sbcs	r4, r4
 80024e4:	45c1      	cmp	r9, r8
 80024e6:	419b      	sbcs	r3, r3
 80024e8:	4583      	cmp	fp, r0
 80024ea:	4180      	sbcs	r0, r0
 80024ec:	428d      	cmp	r5, r1
 80024ee:	4189      	sbcs	r1, r1
 80024f0:	425b      	negs	r3, r3
 80024f2:	4264      	negs	r4, r4
 80024f4:	431c      	orrs	r4, r3
 80024f6:	4240      	negs	r0, r0
 80024f8:	9b03      	ldr	r3, [sp, #12]
 80024fa:	4249      	negs	r1, r1
 80024fc:	4301      	orrs	r1, r0
 80024fe:	0270      	lsls	r0, r6, #9
 8002500:	0c3f      	lsrs	r7, r7, #16
 8002502:	4318      	orrs	r0, r3
 8002504:	19e4      	adds	r4, r4, r7
 8002506:	1e47      	subs	r7, r0, #1
 8002508:	41b8      	sbcs	r0, r7
 800250a:	1864      	adds	r4, r4, r1
 800250c:	4464      	add	r4, ip
 800250e:	0df6      	lsrs	r6, r6, #23
 8002510:	0261      	lsls	r1, r4, #9
 8002512:	4330      	orrs	r0, r6
 8002514:	0dec      	lsrs	r4, r5, #23
 8002516:	026e      	lsls	r6, r5, #9
 8002518:	430c      	orrs	r4, r1
 800251a:	4330      	orrs	r0, r6
 800251c:	01c9      	lsls	r1, r1, #7
 800251e:	d400      	bmi.n	8002522 <__aeabi_dmul+0x302>
 8002520:	e0f1      	b.n	8002706 <__aeabi_dmul+0x4e6>
 8002522:	2101      	movs	r1, #1
 8002524:	0843      	lsrs	r3, r0, #1
 8002526:	4001      	ands	r1, r0
 8002528:	430b      	orrs	r3, r1
 800252a:	07e0      	lsls	r0, r4, #31
 800252c:	4318      	orrs	r0, r3
 800252e:	0864      	lsrs	r4, r4, #1
 8002530:	4915      	ldr	r1, [pc, #84]	; (8002588 <__aeabi_dmul+0x368>)
 8002532:	9b02      	ldr	r3, [sp, #8]
 8002534:	468c      	mov	ip, r1
 8002536:	4463      	add	r3, ip
 8002538:	2b00      	cmp	r3, #0
 800253a:	dc00      	bgt.n	800253e <__aeabi_dmul+0x31e>
 800253c:	e097      	b.n	800266e <__aeabi_dmul+0x44e>
 800253e:	0741      	lsls	r1, r0, #29
 8002540:	d009      	beq.n	8002556 <__aeabi_dmul+0x336>
 8002542:	210f      	movs	r1, #15
 8002544:	4001      	ands	r1, r0
 8002546:	2904      	cmp	r1, #4
 8002548:	d005      	beq.n	8002556 <__aeabi_dmul+0x336>
 800254a:	1d01      	adds	r1, r0, #4
 800254c:	4281      	cmp	r1, r0
 800254e:	4180      	sbcs	r0, r0
 8002550:	4240      	negs	r0, r0
 8002552:	1824      	adds	r4, r4, r0
 8002554:	0008      	movs	r0, r1
 8002556:	01e1      	lsls	r1, r4, #7
 8002558:	d506      	bpl.n	8002568 <__aeabi_dmul+0x348>
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	00c9      	lsls	r1, r1, #3
 800255e:	468c      	mov	ip, r1
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <__aeabi_dmul+0x36c>)
 8002562:	401c      	ands	r4, r3
 8002564:	9b02      	ldr	r3, [sp, #8]
 8002566:	4463      	add	r3, ip
 8002568:	4909      	ldr	r1, [pc, #36]	; (8002590 <__aeabi_dmul+0x370>)
 800256a:	428b      	cmp	r3, r1
 800256c:	dd00      	ble.n	8002570 <__aeabi_dmul+0x350>
 800256e:	e710      	b.n	8002392 <__aeabi_dmul+0x172>
 8002570:	0761      	lsls	r1, r4, #29
 8002572:	08c5      	lsrs	r5, r0, #3
 8002574:	0264      	lsls	r4, r4, #9
 8002576:	055b      	lsls	r3, r3, #21
 8002578:	430d      	orrs	r5, r1
 800257a:	0b24      	lsrs	r4, r4, #12
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	e6c1      	b.n	8002304 <__aeabi_dmul+0xe4>
 8002580:	000007ff 	.word	0x000007ff
 8002584:	fffffc01 	.word	0xfffffc01
 8002588:	000003ff 	.word	0x000003ff
 800258c:	feffffff 	.word	0xfeffffff
 8002590:	000007fe 	.word	0x000007fe
 8002594:	464b      	mov	r3, r9
 8002596:	4323      	orrs	r3, r4
 8002598:	d059      	beq.n	800264e <__aeabi_dmul+0x42e>
 800259a:	2c00      	cmp	r4, #0
 800259c:	d100      	bne.n	80025a0 <__aeabi_dmul+0x380>
 800259e:	e0a3      	b.n	80026e8 <__aeabi_dmul+0x4c8>
 80025a0:	0020      	movs	r0, r4
 80025a2:	f000 fdf9 	bl	8003198 <__clzsi2>
 80025a6:	0001      	movs	r1, r0
 80025a8:	0003      	movs	r3, r0
 80025aa:	390b      	subs	r1, #11
 80025ac:	221d      	movs	r2, #29
 80025ae:	1a52      	subs	r2, r2, r1
 80025b0:	4649      	mov	r1, r9
 80025b2:	0018      	movs	r0, r3
 80025b4:	40d1      	lsrs	r1, r2
 80025b6:	464a      	mov	r2, r9
 80025b8:	3808      	subs	r0, #8
 80025ba:	4082      	lsls	r2, r0
 80025bc:	4084      	lsls	r4, r0
 80025be:	0010      	movs	r0, r2
 80025c0:	430c      	orrs	r4, r1
 80025c2:	4a74      	ldr	r2, [pc, #464]	; (8002794 <__aeabi_dmul+0x574>)
 80025c4:	1aeb      	subs	r3, r5, r3
 80025c6:	4694      	mov	ip, r2
 80025c8:	4642      	mov	r2, r8
 80025ca:	4463      	add	r3, ip
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	9b01      	ldr	r3, [sp, #4]
 80025d0:	407a      	eors	r2, r7
 80025d2:	3301      	adds	r3, #1
 80025d4:	2100      	movs	r1, #0
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2e0a      	cmp	r6, #10
 80025dc:	dd00      	ble.n	80025e0 <__aeabi_dmul+0x3c0>
 80025de:	e667      	b.n	80022b0 <__aeabi_dmul+0x90>
 80025e0:	e683      	b.n	80022ea <__aeabi_dmul+0xca>
 80025e2:	465b      	mov	r3, fp
 80025e4:	4303      	orrs	r3, r0
 80025e6:	469a      	mov	sl, r3
 80025e8:	d02a      	beq.n	8002640 <__aeabi_dmul+0x420>
 80025ea:	465b      	mov	r3, fp
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d06d      	beq.n	80026cc <__aeabi_dmul+0x4ac>
 80025f0:	4658      	mov	r0, fp
 80025f2:	f000 fdd1 	bl	8003198 <__clzsi2>
 80025f6:	0001      	movs	r1, r0
 80025f8:	0003      	movs	r3, r0
 80025fa:	390b      	subs	r1, #11
 80025fc:	221d      	movs	r2, #29
 80025fe:	1a52      	subs	r2, r2, r1
 8002600:	0021      	movs	r1, r4
 8002602:	0018      	movs	r0, r3
 8002604:	465d      	mov	r5, fp
 8002606:	40d1      	lsrs	r1, r2
 8002608:	3808      	subs	r0, #8
 800260a:	4085      	lsls	r5, r0
 800260c:	000a      	movs	r2, r1
 800260e:	4084      	lsls	r4, r0
 8002610:	432a      	orrs	r2, r5
 8002612:	4693      	mov	fp, r2
 8002614:	46a2      	mov	sl, r4
 8002616:	4d5f      	ldr	r5, [pc, #380]	; (8002794 <__aeabi_dmul+0x574>)
 8002618:	2600      	movs	r6, #0
 800261a:	1aed      	subs	r5, r5, r3
 800261c:	2300      	movs	r3, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	e625      	b.n	800226e <__aeabi_dmul+0x4e>
 8002622:	465b      	mov	r3, fp
 8002624:	4303      	orrs	r3, r0
 8002626:	469a      	mov	sl, r3
 8002628:	d105      	bne.n	8002636 <__aeabi_dmul+0x416>
 800262a:	2300      	movs	r3, #0
 800262c:	469b      	mov	fp, r3
 800262e:	3302      	adds	r3, #2
 8002630:	2608      	movs	r6, #8
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	e61b      	b.n	800226e <__aeabi_dmul+0x4e>
 8002636:	2303      	movs	r3, #3
 8002638:	4682      	mov	sl, r0
 800263a:	260c      	movs	r6, #12
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	e616      	b.n	800226e <__aeabi_dmul+0x4e>
 8002640:	2300      	movs	r3, #0
 8002642:	469b      	mov	fp, r3
 8002644:	3301      	adds	r3, #1
 8002646:	2604      	movs	r6, #4
 8002648:	2500      	movs	r5, #0
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	e60f      	b.n	800226e <__aeabi_dmul+0x4e>
 800264e:	4642      	mov	r2, r8
 8002650:	3301      	adds	r3, #1
 8002652:	9501      	str	r5, [sp, #4]
 8002654:	431e      	orrs	r6, r3
 8002656:	9b01      	ldr	r3, [sp, #4]
 8002658:	407a      	eors	r2, r7
 800265a:	3301      	adds	r3, #1
 800265c:	2400      	movs	r4, #0
 800265e:	2000      	movs	r0, #0
 8002660:	2101      	movs	r1, #1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	2e0a      	cmp	r6, #10
 8002668:	dd00      	ble.n	800266c <__aeabi_dmul+0x44c>
 800266a:	e621      	b.n	80022b0 <__aeabi_dmul+0x90>
 800266c:	e63d      	b.n	80022ea <__aeabi_dmul+0xca>
 800266e:	2101      	movs	r1, #1
 8002670:	1ac9      	subs	r1, r1, r3
 8002672:	2938      	cmp	r1, #56	; 0x38
 8002674:	dd00      	ble.n	8002678 <__aeabi_dmul+0x458>
 8002676:	e642      	b.n	80022fe <__aeabi_dmul+0xde>
 8002678:	291f      	cmp	r1, #31
 800267a:	dd47      	ble.n	800270c <__aeabi_dmul+0x4ec>
 800267c:	261f      	movs	r6, #31
 800267e:	0025      	movs	r5, r4
 8002680:	4276      	negs	r6, r6
 8002682:	1af3      	subs	r3, r6, r3
 8002684:	40dd      	lsrs	r5, r3
 8002686:	002b      	movs	r3, r5
 8002688:	2920      	cmp	r1, #32
 800268a:	d005      	beq.n	8002698 <__aeabi_dmul+0x478>
 800268c:	4942      	ldr	r1, [pc, #264]	; (8002798 <__aeabi_dmul+0x578>)
 800268e:	9d02      	ldr	r5, [sp, #8]
 8002690:	468c      	mov	ip, r1
 8002692:	4465      	add	r5, ip
 8002694:	40ac      	lsls	r4, r5
 8002696:	4320      	orrs	r0, r4
 8002698:	1e41      	subs	r1, r0, #1
 800269a:	4188      	sbcs	r0, r1
 800269c:	4318      	orrs	r0, r3
 800269e:	2307      	movs	r3, #7
 80026a0:	001d      	movs	r5, r3
 80026a2:	2400      	movs	r4, #0
 80026a4:	4005      	ands	r5, r0
 80026a6:	4203      	tst	r3, r0
 80026a8:	d04a      	beq.n	8002740 <__aeabi_dmul+0x520>
 80026aa:	230f      	movs	r3, #15
 80026ac:	2400      	movs	r4, #0
 80026ae:	4003      	ands	r3, r0
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d042      	beq.n	800273a <__aeabi_dmul+0x51a>
 80026b4:	1d03      	adds	r3, r0, #4
 80026b6:	4283      	cmp	r3, r0
 80026b8:	4180      	sbcs	r0, r0
 80026ba:	4240      	negs	r0, r0
 80026bc:	1824      	adds	r4, r4, r0
 80026be:	0018      	movs	r0, r3
 80026c0:	0223      	lsls	r3, r4, #8
 80026c2:	d53a      	bpl.n	800273a <__aeabi_dmul+0x51a>
 80026c4:	2301      	movs	r3, #1
 80026c6:	2400      	movs	r4, #0
 80026c8:	2500      	movs	r5, #0
 80026ca:	e61b      	b.n	8002304 <__aeabi_dmul+0xe4>
 80026cc:	f000 fd64 	bl	8003198 <__clzsi2>
 80026d0:	0001      	movs	r1, r0
 80026d2:	0003      	movs	r3, r0
 80026d4:	3115      	adds	r1, #21
 80026d6:	3320      	adds	r3, #32
 80026d8:	291c      	cmp	r1, #28
 80026da:	dd8f      	ble.n	80025fc <__aeabi_dmul+0x3dc>
 80026dc:	3808      	subs	r0, #8
 80026de:	2200      	movs	r2, #0
 80026e0:	4084      	lsls	r4, r0
 80026e2:	4692      	mov	sl, r2
 80026e4:	46a3      	mov	fp, r4
 80026e6:	e796      	b.n	8002616 <__aeabi_dmul+0x3f6>
 80026e8:	f000 fd56 	bl	8003198 <__clzsi2>
 80026ec:	0001      	movs	r1, r0
 80026ee:	0003      	movs	r3, r0
 80026f0:	3115      	adds	r1, #21
 80026f2:	3320      	adds	r3, #32
 80026f4:	291c      	cmp	r1, #28
 80026f6:	dc00      	bgt.n	80026fa <__aeabi_dmul+0x4da>
 80026f8:	e758      	b.n	80025ac <__aeabi_dmul+0x38c>
 80026fa:	0002      	movs	r2, r0
 80026fc:	464c      	mov	r4, r9
 80026fe:	3a08      	subs	r2, #8
 8002700:	2000      	movs	r0, #0
 8002702:	4094      	lsls	r4, r2
 8002704:	e75d      	b.n	80025c2 <__aeabi_dmul+0x3a2>
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	e711      	b.n	8002530 <__aeabi_dmul+0x310>
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <__aeabi_dmul+0x57c>)
 800270e:	0026      	movs	r6, r4
 8002710:	469c      	mov	ip, r3
 8002712:	0003      	movs	r3, r0
 8002714:	9d02      	ldr	r5, [sp, #8]
 8002716:	40cb      	lsrs	r3, r1
 8002718:	4465      	add	r5, ip
 800271a:	40ae      	lsls	r6, r5
 800271c:	431e      	orrs	r6, r3
 800271e:	0003      	movs	r3, r0
 8002720:	40ab      	lsls	r3, r5
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	4183      	sbcs	r3, r0
 8002726:	0030      	movs	r0, r6
 8002728:	4318      	orrs	r0, r3
 800272a:	40cc      	lsrs	r4, r1
 800272c:	0743      	lsls	r3, r0, #29
 800272e:	d0c7      	beq.n	80026c0 <__aeabi_dmul+0x4a0>
 8002730:	230f      	movs	r3, #15
 8002732:	4003      	ands	r3, r0
 8002734:	2b04      	cmp	r3, #4
 8002736:	d1bd      	bne.n	80026b4 <__aeabi_dmul+0x494>
 8002738:	e7c2      	b.n	80026c0 <__aeabi_dmul+0x4a0>
 800273a:	0765      	lsls	r5, r4, #29
 800273c:	0264      	lsls	r4, r4, #9
 800273e:	0b24      	lsrs	r4, r4, #12
 8002740:	08c0      	lsrs	r0, r0, #3
 8002742:	2300      	movs	r3, #0
 8002744:	4305      	orrs	r5, r0
 8002746:	e5dd      	b.n	8002304 <__aeabi_dmul+0xe4>
 8002748:	2500      	movs	r5, #0
 800274a:	2302      	movs	r3, #2
 800274c:	2e0f      	cmp	r6, #15
 800274e:	d10c      	bne.n	800276a <__aeabi_dmul+0x54a>
 8002750:	2480      	movs	r4, #128	; 0x80
 8002752:	465b      	mov	r3, fp
 8002754:	0324      	lsls	r4, r4, #12
 8002756:	4223      	tst	r3, r4
 8002758:	d00e      	beq.n	8002778 <__aeabi_dmul+0x558>
 800275a:	4221      	tst	r1, r4
 800275c:	d10c      	bne.n	8002778 <__aeabi_dmul+0x558>
 800275e:	430c      	orrs	r4, r1
 8002760:	0324      	lsls	r4, r4, #12
 8002762:	003a      	movs	r2, r7
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <__aeabi_dmul+0x580>)
 8002766:	0b24      	lsrs	r4, r4, #12
 8002768:	e5cc      	b.n	8002304 <__aeabi_dmul+0xe4>
 800276a:	2e0b      	cmp	r6, #11
 800276c:	d000      	beq.n	8002770 <__aeabi_dmul+0x550>
 800276e:	e5a2      	b.n	80022b6 <__aeabi_dmul+0x96>
 8002770:	468b      	mov	fp, r1
 8002772:	46aa      	mov	sl, r5
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	e5f7      	b.n	8002368 <__aeabi_dmul+0x148>
 8002778:	2480      	movs	r4, #128	; 0x80
 800277a:	465b      	mov	r3, fp
 800277c:	0324      	lsls	r4, r4, #12
 800277e:	431c      	orrs	r4, r3
 8002780:	0324      	lsls	r4, r4, #12
 8002782:	4642      	mov	r2, r8
 8002784:	4655      	mov	r5, sl
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <__aeabi_dmul+0x580>)
 8002788:	0b24      	lsrs	r4, r4, #12
 800278a:	e5bb      	b.n	8002304 <__aeabi_dmul+0xe4>
 800278c:	464d      	mov	r5, r9
 800278e:	0021      	movs	r1, r4
 8002790:	2303      	movs	r3, #3
 8002792:	e7db      	b.n	800274c <__aeabi_dmul+0x52c>
 8002794:	fffffc0d 	.word	0xfffffc0d
 8002798:	0000043e 	.word	0x0000043e
 800279c:	0000041e 	.word	0x0000041e
 80027a0:	000007ff 	.word	0x000007ff

080027a4 <__aeabi_dsub>:
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	4657      	mov	r7, sl
 80027a8:	464e      	mov	r6, r9
 80027aa:	4645      	mov	r5, r8
 80027ac:	46de      	mov	lr, fp
 80027ae:	b5e0      	push	{r5, r6, r7, lr}
 80027b0:	000d      	movs	r5, r1
 80027b2:	0004      	movs	r4, r0
 80027b4:	0019      	movs	r1, r3
 80027b6:	0010      	movs	r0, r2
 80027b8:	032b      	lsls	r3, r5, #12
 80027ba:	0a5b      	lsrs	r3, r3, #9
 80027bc:	0f62      	lsrs	r2, r4, #29
 80027be:	431a      	orrs	r2, r3
 80027c0:	00e3      	lsls	r3, r4, #3
 80027c2:	030c      	lsls	r4, r1, #12
 80027c4:	0a64      	lsrs	r4, r4, #9
 80027c6:	0f47      	lsrs	r7, r0, #29
 80027c8:	4327      	orrs	r7, r4
 80027ca:	4cd0      	ldr	r4, [pc, #832]	; (8002b0c <__aeabi_dsub+0x368>)
 80027cc:	006e      	lsls	r6, r5, #1
 80027ce:	4691      	mov	r9, r2
 80027d0:	b083      	sub	sp, #12
 80027d2:	004a      	lsls	r2, r1, #1
 80027d4:	00c0      	lsls	r0, r0, #3
 80027d6:	4698      	mov	r8, r3
 80027d8:	46a2      	mov	sl, r4
 80027da:	0d76      	lsrs	r6, r6, #21
 80027dc:	0fed      	lsrs	r5, r5, #31
 80027de:	0d52      	lsrs	r2, r2, #21
 80027e0:	0fc9      	lsrs	r1, r1, #31
 80027e2:	9001      	str	r0, [sp, #4]
 80027e4:	42a2      	cmp	r2, r4
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x46>
 80027e8:	e0b9      	b.n	800295e <__aeabi_dsub+0x1ba>
 80027ea:	2401      	movs	r4, #1
 80027ec:	4061      	eors	r1, r4
 80027ee:	468b      	mov	fp, r1
 80027f0:	428d      	cmp	r5, r1
 80027f2:	d100      	bne.n	80027f6 <__aeabi_dsub+0x52>
 80027f4:	e08d      	b.n	8002912 <__aeabi_dsub+0x16e>
 80027f6:	1ab4      	subs	r4, r6, r2
 80027f8:	46a4      	mov	ip, r4
 80027fa:	2c00      	cmp	r4, #0
 80027fc:	dc00      	bgt.n	8002800 <__aeabi_dsub+0x5c>
 80027fe:	e0b7      	b.n	8002970 <__aeabi_dsub+0x1cc>
 8002800:	2a00      	cmp	r2, #0
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x62>
 8002804:	e0cb      	b.n	800299e <__aeabi_dsub+0x1fa>
 8002806:	4ac1      	ldr	r2, [pc, #772]	; (8002b0c <__aeabi_dsub+0x368>)
 8002808:	4296      	cmp	r6, r2
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x6a>
 800280c:	e186      	b.n	8002b1c <__aeabi_dsub+0x378>
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	0412      	lsls	r2, r2, #16
 8002812:	4317      	orrs	r7, r2
 8002814:	4662      	mov	r2, ip
 8002816:	2a38      	cmp	r2, #56	; 0x38
 8002818:	dd00      	ble.n	800281c <__aeabi_dsub+0x78>
 800281a:	e1a4      	b.n	8002b66 <__aeabi_dsub+0x3c2>
 800281c:	2a1f      	cmp	r2, #31
 800281e:	dd00      	ble.n	8002822 <__aeabi_dsub+0x7e>
 8002820:	e21d      	b.n	8002c5e <__aeabi_dsub+0x4ba>
 8002822:	4661      	mov	r1, ip
 8002824:	2220      	movs	r2, #32
 8002826:	003c      	movs	r4, r7
 8002828:	1a52      	subs	r2, r2, r1
 800282a:	0001      	movs	r1, r0
 800282c:	4090      	lsls	r0, r2
 800282e:	4094      	lsls	r4, r2
 8002830:	1e42      	subs	r2, r0, #1
 8002832:	4190      	sbcs	r0, r2
 8002834:	4662      	mov	r2, ip
 8002836:	46a0      	mov	r8, r4
 8002838:	4664      	mov	r4, ip
 800283a:	40d7      	lsrs	r7, r2
 800283c:	464a      	mov	r2, r9
 800283e:	40e1      	lsrs	r1, r4
 8002840:	4644      	mov	r4, r8
 8002842:	1bd2      	subs	r2, r2, r7
 8002844:	4691      	mov	r9, r2
 8002846:	430c      	orrs	r4, r1
 8002848:	4304      	orrs	r4, r0
 800284a:	1b1c      	subs	r4, r3, r4
 800284c:	42a3      	cmp	r3, r4
 800284e:	4192      	sbcs	r2, r2
 8002850:	464b      	mov	r3, r9
 8002852:	4252      	negs	r2, r2
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	469a      	mov	sl, r3
 8002858:	4653      	mov	r3, sl
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	d400      	bmi.n	8002860 <__aeabi_dsub+0xbc>
 800285e:	e12b      	b.n	8002ab8 <__aeabi_dsub+0x314>
 8002860:	4653      	mov	r3, sl
 8002862:	025a      	lsls	r2, r3, #9
 8002864:	0a53      	lsrs	r3, r2, #9
 8002866:	469a      	mov	sl, r3
 8002868:	4653      	mov	r3, sl
 800286a:	2b00      	cmp	r3, #0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0xcc>
 800286e:	e166      	b.n	8002b3e <__aeabi_dsub+0x39a>
 8002870:	4650      	mov	r0, sl
 8002872:	f000 fc91 	bl	8003198 <__clzsi2>
 8002876:	0003      	movs	r3, r0
 8002878:	3b08      	subs	r3, #8
 800287a:	2220      	movs	r2, #32
 800287c:	0020      	movs	r0, r4
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	4651      	mov	r1, sl
 8002882:	40d0      	lsrs	r0, r2
 8002884:	4099      	lsls	r1, r3
 8002886:	0002      	movs	r2, r0
 8002888:	409c      	lsls	r4, r3
 800288a:	430a      	orrs	r2, r1
 800288c:	429e      	cmp	r6, r3
 800288e:	dd00      	ble.n	8002892 <__aeabi_dsub+0xee>
 8002890:	e164      	b.n	8002b5c <__aeabi_dsub+0x3b8>
 8002892:	1b9b      	subs	r3, r3, r6
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	291f      	cmp	r1, #31
 8002898:	dd00      	ble.n	800289c <__aeabi_dsub+0xf8>
 800289a:	e0fe      	b.n	8002a9a <__aeabi_dsub+0x2f6>
 800289c:	2320      	movs	r3, #32
 800289e:	0010      	movs	r0, r2
 80028a0:	0026      	movs	r6, r4
 80028a2:	1a5b      	subs	r3, r3, r1
 80028a4:	409c      	lsls	r4, r3
 80028a6:	4098      	lsls	r0, r3
 80028a8:	40ce      	lsrs	r6, r1
 80028aa:	40ca      	lsrs	r2, r1
 80028ac:	1e63      	subs	r3, r4, #1
 80028ae:	419c      	sbcs	r4, r3
 80028b0:	4330      	orrs	r0, r6
 80028b2:	4692      	mov	sl, r2
 80028b4:	2600      	movs	r6, #0
 80028b6:	4304      	orrs	r4, r0
 80028b8:	0763      	lsls	r3, r4, #29
 80028ba:	d009      	beq.n	80028d0 <__aeabi_dsub+0x12c>
 80028bc:	230f      	movs	r3, #15
 80028be:	4023      	ands	r3, r4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d005      	beq.n	80028d0 <__aeabi_dsub+0x12c>
 80028c4:	1d23      	adds	r3, r4, #4
 80028c6:	42a3      	cmp	r3, r4
 80028c8:	41a4      	sbcs	r4, r4
 80028ca:	4264      	negs	r4, r4
 80028cc:	44a2      	add	sl, r4
 80028ce:	001c      	movs	r4, r3
 80028d0:	4653      	mov	r3, sl
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	d400      	bmi.n	80028d8 <__aeabi_dsub+0x134>
 80028d6:	e0f2      	b.n	8002abe <__aeabi_dsub+0x31a>
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <__aeabi_dsub+0x368>)
 80028da:	3601      	adds	r6, #1
 80028dc:	429e      	cmp	r6, r3
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x13e>
 80028e0:	e10f      	b.n	8002b02 <__aeabi_dsub+0x35e>
 80028e2:	4653      	mov	r3, sl
 80028e4:	498a      	ldr	r1, [pc, #552]	; (8002b10 <__aeabi_dsub+0x36c>)
 80028e6:	08e4      	lsrs	r4, r4, #3
 80028e8:	400b      	ands	r3, r1
 80028ea:	0019      	movs	r1, r3
 80028ec:	075b      	lsls	r3, r3, #29
 80028ee:	4323      	orrs	r3, r4
 80028f0:	0572      	lsls	r2, r6, #21
 80028f2:	024c      	lsls	r4, r1, #9
 80028f4:	0b24      	lsrs	r4, r4, #12
 80028f6:	0d52      	lsrs	r2, r2, #21
 80028f8:	0512      	lsls	r2, r2, #20
 80028fa:	4322      	orrs	r2, r4
 80028fc:	07ed      	lsls	r5, r5, #31
 80028fe:	432a      	orrs	r2, r5
 8002900:	0018      	movs	r0, r3
 8002902:	0011      	movs	r1, r2
 8002904:	b003      	add	sp, #12
 8002906:	bcf0      	pop	{r4, r5, r6, r7}
 8002908:	46bb      	mov	fp, r7
 800290a:	46b2      	mov	sl, r6
 800290c:	46a9      	mov	r9, r5
 800290e:	46a0      	mov	r8, r4
 8002910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002912:	1ab4      	subs	r4, r6, r2
 8002914:	46a4      	mov	ip, r4
 8002916:	2c00      	cmp	r4, #0
 8002918:	dd59      	ble.n	80029ce <__aeabi_dsub+0x22a>
 800291a:	2a00      	cmp	r2, #0
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x17c>
 800291e:	e0b0      	b.n	8002a82 <__aeabi_dsub+0x2de>
 8002920:	4556      	cmp	r6, sl
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x182>
 8002924:	e0fa      	b.n	8002b1c <__aeabi_dsub+0x378>
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0412      	lsls	r2, r2, #16
 800292a:	4317      	orrs	r7, r2
 800292c:	4662      	mov	r2, ip
 800292e:	2a38      	cmp	r2, #56	; 0x38
 8002930:	dd00      	ble.n	8002934 <__aeabi_dsub+0x190>
 8002932:	e0d4      	b.n	8002ade <__aeabi_dsub+0x33a>
 8002934:	2a1f      	cmp	r2, #31
 8002936:	dc00      	bgt.n	800293a <__aeabi_dsub+0x196>
 8002938:	e1c0      	b.n	8002cbc <__aeabi_dsub+0x518>
 800293a:	0039      	movs	r1, r7
 800293c:	3a20      	subs	r2, #32
 800293e:	40d1      	lsrs	r1, r2
 8002940:	4662      	mov	r2, ip
 8002942:	2a20      	cmp	r2, #32
 8002944:	d006      	beq.n	8002954 <__aeabi_dsub+0x1b0>
 8002946:	4664      	mov	r4, ip
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	1b12      	subs	r2, r2, r4
 800294c:	003c      	movs	r4, r7
 800294e:	4094      	lsls	r4, r2
 8002950:	4304      	orrs	r4, r0
 8002952:	9401      	str	r4, [sp, #4]
 8002954:	9c01      	ldr	r4, [sp, #4]
 8002956:	1e62      	subs	r2, r4, #1
 8002958:	4194      	sbcs	r4, r2
 800295a:	430c      	orrs	r4, r1
 800295c:	e0c3      	b.n	8002ae6 <__aeabi_dsub+0x342>
 800295e:	003c      	movs	r4, r7
 8002960:	4304      	orrs	r4, r0
 8002962:	d02b      	beq.n	80029bc <__aeabi_dsub+0x218>
 8002964:	468b      	mov	fp, r1
 8002966:	428d      	cmp	r5, r1
 8002968:	d02e      	beq.n	80029c8 <__aeabi_dsub+0x224>
 800296a:	4c6a      	ldr	r4, [pc, #424]	; (8002b14 <__aeabi_dsub+0x370>)
 800296c:	46a4      	mov	ip, r4
 800296e:	44b4      	add	ip, r6
 8002970:	4664      	mov	r4, ip
 8002972:	2c00      	cmp	r4, #0
 8002974:	d05f      	beq.n	8002a36 <__aeabi_dsub+0x292>
 8002976:	1b94      	subs	r4, r2, r6
 8002978:	46a4      	mov	ip, r4
 800297a:	2e00      	cmp	r6, #0
 800297c:	d000      	beq.n	8002980 <__aeabi_dsub+0x1dc>
 800297e:	e120      	b.n	8002bc2 <__aeabi_dsub+0x41e>
 8002980:	464c      	mov	r4, r9
 8002982:	431c      	orrs	r4, r3
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x1e4>
 8002986:	e1c7      	b.n	8002d18 <__aeabi_dsub+0x574>
 8002988:	4661      	mov	r1, ip
 800298a:	1e4c      	subs	r4, r1, #1
 800298c:	2901      	cmp	r1, #1
 800298e:	d100      	bne.n	8002992 <__aeabi_dsub+0x1ee>
 8002990:	e223      	b.n	8002dda <__aeabi_dsub+0x636>
 8002992:	4d5e      	ldr	r5, [pc, #376]	; (8002b0c <__aeabi_dsub+0x368>)
 8002994:	45ac      	cmp	ip, r5
 8002996:	d100      	bne.n	800299a <__aeabi_dsub+0x1f6>
 8002998:	e1d8      	b.n	8002d4c <__aeabi_dsub+0x5a8>
 800299a:	46a4      	mov	ip, r4
 800299c:	e11a      	b.n	8002bd4 <__aeabi_dsub+0x430>
 800299e:	003a      	movs	r2, r7
 80029a0:	4302      	orrs	r2, r0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x202>
 80029a4:	e0e4      	b.n	8002b70 <__aeabi_dsub+0x3cc>
 80029a6:	0022      	movs	r2, r4
 80029a8:	3a01      	subs	r2, #1
 80029aa:	2c01      	cmp	r4, #1
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x20c>
 80029ae:	e1c3      	b.n	8002d38 <__aeabi_dsub+0x594>
 80029b0:	4956      	ldr	r1, [pc, #344]	; (8002b0c <__aeabi_dsub+0x368>)
 80029b2:	428c      	cmp	r4, r1
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x214>
 80029b6:	e0b1      	b.n	8002b1c <__aeabi_dsub+0x378>
 80029b8:	4694      	mov	ip, r2
 80029ba:	e72b      	b.n	8002814 <__aeabi_dsub+0x70>
 80029bc:	2401      	movs	r4, #1
 80029be:	4061      	eors	r1, r4
 80029c0:	468b      	mov	fp, r1
 80029c2:	428d      	cmp	r5, r1
 80029c4:	d000      	beq.n	80029c8 <__aeabi_dsub+0x224>
 80029c6:	e716      	b.n	80027f6 <__aeabi_dsub+0x52>
 80029c8:	4952      	ldr	r1, [pc, #328]	; (8002b14 <__aeabi_dsub+0x370>)
 80029ca:	468c      	mov	ip, r1
 80029cc:	44b4      	add	ip, r6
 80029ce:	4664      	mov	r4, ip
 80029d0:	2c00      	cmp	r4, #0
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x232>
 80029d4:	e0d3      	b.n	8002b7e <__aeabi_dsub+0x3da>
 80029d6:	1b91      	subs	r1, r2, r6
 80029d8:	468c      	mov	ip, r1
 80029da:	2e00      	cmp	r6, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x23c>
 80029de:	e15e      	b.n	8002c9e <__aeabi_dsub+0x4fa>
 80029e0:	494a      	ldr	r1, [pc, #296]	; (8002b0c <__aeabi_dsub+0x368>)
 80029e2:	428a      	cmp	r2, r1
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x244>
 80029e6:	e1be      	b.n	8002d66 <__aeabi_dsub+0x5c2>
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	464c      	mov	r4, r9
 80029ec:	0409      	lsls	r1, r1, #16
 80029ee:	430c      	orrs	r4, r1
 80029f0:	46a1      	mov	r9, r4
 80029f2:	4661      	mov	r1, ip
 80029f4:	2938      	cmp	r1, #56	; 0x38
 80029f6:	dd00      	ble.n	80029fa <__aeabi_dsub+0x256>
 80029f8:	e1ba      	b.n	8002d70 <__aeabi_dsub+0x5cc>
 80029fa:	291f      	cmp	r1, #31
 80029fc:	dd00      	ble.n	8002a00 <__aeabi_dsub+0x25c>
 80029fe:	e227      	b.n	8002e50 <__aeabi_dsub+0x6ac>
 8002a00:	2420      	movs	r4, #32
 8002a02:	1a64      	subs	r4, r4, r1
 8002a04:	4649      	mov	r1, r9
 8002a06:	40a1      	lsls	r1, r4
 8002a08:	001e      	movs	r6, r3
 8002a0a:	4688      	mov	r8, r1
 8002a0c:	4661      	mov	r1, ip
 8002a0e:	40a3      	lsls	r3, r4
 8002a10:	40ce      	lsrs	r6, r1
 8002a12:	4641      	mov	r1, r8
 8002a14:	1e5c      	subs	r4, r3, #1
 8002a16:	41a3      	sbcs	r3, r4
 8002a18:	4331      	orrs	r1, r6
 8002a1a:	4319      	orrs	r1, r3
 8002a1c:	000c      	movs	r4, r1
 8002a1e:	4663      	mov	r3, ip
 8002a20:	4649      	mov	r1, r9
 8002a22:	40d9      	lsrs	r1, r3
 8002a24:	187f      	adds	r7, r7, r1
 8002a26:	1824      	adds	r4, r4, r0
 8002a28:	4284      	cmp	r4, r0
 8002a2a:	419b      	sbcs	r3, r3
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	469a      	mov	sl, r3
 8002a30:	0016      	movs	r6, r2
 8002a32:	44ba      	add	sl, r7
 8002a34:	e05d      	b.n	8002af2 <__aeabi_dsub+0x34e>
 8002a36:	4c38      	ldr	r4, [pc, #224]	; (8002b18 <__aeabi_dsub+0x374>)
 8002a38:	1c72      	adds	r2, r6, #1
 8002a3a:	4222      	tst	r2, r4
 8002a3c:	d000      	beq.n	8002a40 <__aeabi_dsub+0x29c>
 8002a3e:	e0df      	b.n	8002c00 <__aeabi_dsub+0x45c>
 8002a40:	464a      	mov	r2, r9
 8002a42:	431a      	orrs	r2, r3
 8002a44:	2e00      	cmp	r6, #0
 8002a46:	d000      	beq.n	8002a4a <__aeabi_dsub+0x2a6>
 8002a48:	e15c      	b.n	8002d04 <__aeabi_dsub+0x560>
 8002a4a:	2a00      	cmp	r2, #0
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x2ac>
 8002a4e:	e1cf      	b.n	8002df0 <__aeabi_dsub+0x64c>
 8002a50:	003a      	movs	r2, r7
 8002a52:	4302      	orrs	r2, r0
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x2b4>
 8002a56:	e17f      	b.n	8002d58 <__aeabi_dsub+0x5b4>
 8002a58:	1a1c      	subs	r4, r3, r0
 8002a5a:	464a      	mov	r2, r9
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	4189      	sbcs	r1, r1
 8002a60:	1bd2      	subs	r2, r2, r7
 8002a62:	4249      	negs	r1, r1
 8002a64:	1a52      	subs	r2, r2, r1
 8002a66:	4692      	mov	sl, r2
 8002a68:	0212      	lsls	r2, r2, #8
 8002a6a:	d400      	bmi.n	8002a6e <__aeabi_dsub+0x2ca>
 8002a6c:	e20a      	b.n	8002e84 <__aeabi_dsub+0x6e0>
 8002a6e:	1ac4      	subs	r4, r0, r3
 8002a70:	42a0      	cmp	r0, r4
 8002a72:	4180      	sbcs	r0, r0
 8002a74:	464b      	mov	r3, r9
 8002a76:	4240      	negs	r0, r0
 8002a78:	1aff      	subs	r7, r7, r3
 8002a7a:	1a3b      	subs	r3, r7, r0
 8002a7c:	469a      	mov	sl, r3
 8002a7e:	465d      	mov	r5, fp
 8002a80:	e71a      	b.n	80028b8 <__aeabi_dsub+0x114>
 8002a82:	003a      	movs	r2, r7
 8002a84:	4302      	orrs	r2, r0
 8002a86:	d073      	beq.n	8002b70 <__aeabi_dsub+0x3cc>
 8002a88:	0022      	movs	r2, r4
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	2c01      	cmp	r4, #1
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dsub+0x2ee>
 8002a90:	e0cb      	b.n	8002c2a <__aeabi_dsub+0x486>
 8002a92:	4554      	cmp	r4, sl
 8002a94:	d042      	beq.n	8002b1c <__aeabi_dsub+0x378>
 8002a96:	4694      	mov	ip, r2
 8002a98:	e748      	b.n	800292c <__aeabi_dsub+0x188>
 8002a9a:	0010      	movs	r0, r2
 8002a9c:	3b1f      	subs	r3, #31
 8002a9e:	40d8      	lsrs	r0, r3
 8002aa0:	2920      	cmp	r1, #32
 8002aa2:	d003      	beq.n	8002aac <__aeabi_dsub+0x308>
 8002aa4:	2340      	movs	r3, #64	; 0x40
 8002aa6:	1a5b      	subs	r3, r3, r1
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	4314      	orrs	r4, r2
 8002aac:	1e63      	subs	r3, r4, #1
 8002aae:	419c      	sbcs	r4, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2600      	movs	r6, #0
 8002ab4:	469a      	mov	sl, r3
 8002ab6:	4304      	orrs	r4, r0
 8002ab8:	0763      	lsls	r3, r4, #29
 8002aba:	d000      	beq.n	8002abe <__aeabi_dsub+0x31a>
 8002abc:	e6fe      	b.n	80028bc <__aeabi_dsub+0x118>
 8002abe:	4652      	mov	r2, sl
 8002ac0:	08e3      	lsrs	r3, r4, #3
 8002ac2:	0752      	lsls	r2, r2, #29
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	4652      	mov	r2, sl
 8002ac8:	46b4      	mov	ip, r6
 8002aca:	08d2      	lsrs	r2, r2, #3
 8002acc:	490f      	ldr	r1, [pc, #60]	; (8002b0c <__aeabi_dsub+0x368>)
 8002ace:	458c      	cmp	ip, r1
 8002ad0:	d02a      	beq.n	8002b28 <__aeabi_dsub+0x384>
 8002ad2:	0312      	lsls	r2, r2, #12
 8002ad4:	0b14      	lsrs	r4, r2, #12
 8002ad6:	4662      	mov	r2, ip
 8002ad8:	0552      	lsls	r2, r2, #21
 8002ada:	0d52      	lsrs	r2, r2, #21
 8002adc:	e70c      	b.n	80028f8 <__aeabi_dsub+0x154>
 8002ade:	003c      	movs	r4, r7
 8002ae0:	4304      	orrs	r4, r0
 8002ae2:	1e62      	subs	r2, r4, #1
 8002ae4:	4194      	sbcs	r4, r2
 8002ae6:	18e4      	adds	r4, r4, r3
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	4192      	sbcs	r2, r2
 8002aec:	4252      	negs	r2, r2
 8002aee:	444a      	add	r2, r9
 8002af0:	4692      	mov	sl, r2
 8002af2:	4653      	mov	r3, sl
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	d5df      	bpl.n	8002ab8 <__aeabi_dsub+0x314>
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__aeabi_dsub+0x368>)
 8002afa:	3601      	adds	r6, #1
 8002afc:	429e      	cmp	r6, r3
 8002afe:	d000      	beq.n	8002b02 <__aeabi_dsub+0x35e>
 8002b00:	e0a0      	b.n	8002c44 <__aeabi_dsub+0x4a0>
 8002b02:	0032      	movs	r2, r6
 8002b04:	2400      	movs	r4, #0
 8002b06:	2300      	movs	r3, #0
 8002b08:	e6f6      	b.n	80028f8 <__aeabi_dsub+0x154>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	000007ff 	.word	0x000007ff
 8002b10:	ff7fffff 	.word	0xff7fffff
 8002b14:	fffff801 	.word	0xfffff801
 8002b18:	000007fe 	.word	0x000007fe
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	464a      	mov	r2, r9
 8002b20:	0752      	lsls	r2, r2, #29
 8002b22:	4313      	orrs	r3, r2
 8002b24:	464a      	mov	r2, r9
 8002b26:	08d2      	lsrs	r2, r2, #3
 8002b28:	0019      	movs	r1, r3
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0x38c>
 8002b2e:	e1b5      	b.n	8002e9c <__aeabi_dsub+0x6f8>
 8002b30:	2480      	movs	r4, #128	; 0x80
 8002b32:	0324      	lsls	r4, r4, #12
 8002b34:	4314      	orrs	r4, r2
 8002b36:	0324      	lsls	r4, r4, #12
 8002b38:	4ad5      	ldr	r2, [pc, #852]	; (8002e90 <__aeabi_dsub+0x6ec>)
 8002b3a:	0b24      	lsrs	r4, r4, #12
 8002b3c:	e6dc      	b.n	80028f8 <__aeabi_dsub+0x154>
 8002b3e:	0020      	movs	r0, r4
 8002b40:	f000 fb2a 	bl	8003198 <__clzsi2>
 8002b44:	0003      	movs	r3, r0
 8002b46:	3318      	adds	r3, #24
 8002b48:	2b1f      	cmp	r3, #31
 8002b4a:	dc00      	bgt.n	8002b4e <__aeabi_dsub+0x3aa>
 8002b4c:	e695      	b.n	800287a <__aeabi_dsub+0xd6>
 8002b4e:	0022      	movs	r2, r4
 8002b50:	3808      	subs	r0, #8
 8002b52:	4082      	lsls	r2, r0
 8002b54:	2400      	movs	r4, #0
 8002b56:	429e      	cmp	r6, r3
 8002b58:	dc00      	bgt.n	8002b5c <__aeabi_dsub+0x3b8>
 8002b5a:	e69a      	b.n	8002892 <__aeabi_dsub+0xee>
 8002b5c:	1af6      	subs	r6, r6, r3
 8002b5e:	4bcd      	ldr	r3, [pc, #820]	; (8002e94 <__aeabi_dsub+0x6f0>)
 8002b60:	401a      	ands	r2, r3
 8002b62:	4692      	mov	sl, r2
 8002b64:	e6a8      	b.n	80028b8 <__aeabi_dsub+0x114>
 8002b66:	003c      	movs	r4, r7
 8002b68:	4304      	orrs	r4, r0
 8002b6a:	1e62      	subs	r2, r4, #1
 8002b6c:	4194      	sbcs	r4, r2
 8002b6e:	e66c      	b.n	800284a <__aeabi_dsub+0xa6>
 8002b70:	464a      	mov	r2, r9
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	0752      	lsls	r2, r2, #29
 8002b76:	4313      	orrs	r3, r2
 8002b78:	464a      	mov	r2, r9
 8002b7a:	08d2      	lsrs	r2, r2, #3
 8002b7c:	e7a6      	b.n	8002acc <__aeabi_dsub+0x328>
 8002b7e:	4cc6      	ldr	r4, [pc, #792]	; (8002e98 <__aeabi_dsub+0x6f4>)
 8002b80:	1c72      	adds	r2, r6, #1
 8002b82:	4222      	tst	r2, r4
 8002b84:	d000      	beq.n	8002b88 <__aeabi_dsub+0x3e4>
 8002b86:	e0ac      	b.n	8002ce2 <__aeabi_dsub+0x53e>
 8002b88:	464a      	mov	r2, r9
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	2e00      	cmp	r6, #0
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_dsub+0x3ee>
 8002b90:	e105      	b.n	8002d9e <__aeabi_dsub+0x5fa>
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d100      	bne.n	8002b98 <__aeabi_dsub+0x3f4>
 8002b96:	e156      	b.n	8002e46 <__aeabi_dsub+0x6a2>
 8002b98:	003a      	movs	r2, r7
 8002b9a:	4302      	orrs	r2, r0
 8002b9c:	d100      	bne.n	8002ba0 <__aeabi_dsub+0x3fc>
 8002b9e:	e0db      	b.n	8002d58 <__aeabi_dsub+0x5b4>
 8002ba0:	181c      	adds	r4, r3, r0
 8002ba2:	429c      	cmp	r4, r3
 8002ba4:	419b      	sbcs	r3, r3
 8002ba6:	444f      	add	r7, r9
 8002ba8:	46ba      	mov	sl, r7
 8002baa:	425b      	negs	r3, r3
 8002bac:	449a      	add	sl, r3
 8002bae:	4653      	mov	r3, sl
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	d400      	bmi.n	8002bb6 <__aeabi_dsub+0x412>
 8002bb4:	e780      	b.n	8002ab8 <__aeabi_dsub+0x314>
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	4bb6      	ldr	r3, [pc, #728]	; (8002e94 <__aeabi_dsub+0x6f0>)
 8002bba:	2601      	movs	r6, #1
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	4692      	mov	sl, r2
 8002bc0:	e77a      	b.n	8002ab8 <__aeabi_dsub+0x314>
 8002bc2:	4cb3      	ldr	r4, [pc, #716]	; (8002e90 <__aeabi_dsub+0x6ec>)
 8002bc4:	42a2      	cmp	r2, r4
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x426>
 8002bc8:	e0c0      	b.n	8002d4c <__aeabi_dsub+0x5a8>
 8002bca:	2480      	movs	r4, #128	; 0x80
 8002bcc:	464d      	mov	r5, r9
 8002bce:	0424      	lsls	r4, r4, #16
 8002bd0:	4325      	orrs	r5, r4
 8002bd2:	46a9      	mov	r9, r5
 8002bd4:	4664      	mov	r4, ip
 8002bd6:	2c38      	cmp	r4, #56	; 0x38
 8002bd8:	dc53      	bgt.n	8002c82 <__aeabi_dsub+0x4de>
 8002bda:	4661      	mov	r1, ip
 8002bdc:	2c1f      	cmp	r4, #31
 8002bde:	dd00      	ble.n	8002be2 <__aeabi_dsub+0x43e>
 8002be0:	e0cd      	b.n	8002d7e <__aeabi_dsub+0x5da>
 8002be2:	2520      	movs	r5, #32
 8002be4:	001e      	movs	r6, r3
 8002be6:	1b2d      	subs	r5, r5, r4
 8002be8:	464c      	mov	r4, r9
 8002bea:	40ab      	lsls	r3, r5
 8002bec:	40ac      	lsls	r4, r5
 8002bee:	40ce      	lsrs	r6, r1
 8002bf0:	1e5d      	subs	r5, r3, #1
 8002bf2:	41ab      	sbcs	r3, r5
 8002bf4:	4334      	orrs	r4, r6
 8002bf6:	4323      	orrs	r3, r4
 8002bf8:	464c      	mov	r4, r9
 8002bfa:	40cc      	lsrs	r4, r1
 8002bfc:	1b3f      	subs	r7, r7, r4
 8002bfe:	e045      	b.n	8002c8c <__aeabi_dsub+0x4e8>
 8002c00:	464a      	mov	r2, r9
 8002c02:	1a1c      	subs	r4, r3, r0
 8002c04:	1bd1      	subs	r1, r2, r7
 8002c06:	42a3      	cmp	r3, r4
 8002c08:	4192      	sbcs	r2, r2
 8002c0a:	4252      	negs	r2, r2
 8002c0c:	4692      	mov	sl, r2
 8002c0e:	000a      	movs	r2, r1
 8002c10:	4651      	mov	r1, sl
 8002c12:	1a52      	subs	r2, r2, r1
 8002c14:	4692      	mov	sl, r2
 8002c16:	0212      	lsls	r2, r2, #8
 8002c18:	d500      	bpl.n	8002c1c <__aeabi_dsub+0x478>
 8002c1a:	e083      	b.n	8002d24 <__aeabi_dsub+0x580>
 8002c1c:	4653      	mov	r3, sl
 8002c1e:	4323      	orrs	r3, r4
 8002c20:	d000      	beq.n	8002c24 <__aeabi_dsub+0x480>
 8002c22:	e621      	b.n	8002868 <__aeabi_dsub+0xc4>
 8002c24:	2200      	movs	r2, #0
 8002c26:	2500      	movs	r5, #0
 8002c28:	e753      	b.n	8002ad2 <__aeabi_dsub+0x32e>
 8002c2a:	181c      	adds	r4, r3, r0
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	419b      	sbcs	r3, r3
 8002c30:	444f      	add	r7, r9
 8002c32:	46ba      	mov	sl, r7
 8002c34:	425b      	negs	r3, r3
 8002c36:	449a      	add	sl, r3
 8002c38:	4653      	mov	r3, sl
 8002c3a:	2601      	movs	r6, #1
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	d400      	bmi.n	8002c42 <__aeabi_dsub+0x49e>
 8002c40:	e73a      	b.n	8002ab8 <__aeabi_dsub+0x314>
 8002c42:	2602      	movs	r6, #2
 8002c44:	4652      	mov	r2, sl
 8002c46:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <__aeabi_dsub+0x6f0>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	4021      	ands	r1, r4
 8002c50:	0862      	lsrs	r2, r4, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	07dc      	lsls	r4, r3, #31
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	469a      	mov	sl, r3
 8002c5a:	4314      	orrs	r4, r2
 8002c5c:	e62c      	b.n	80028b8 <__aeabi_dsub+0x114>
 8002c5e:	0039      	movs	r1, r7
 8002c60:	3a20      	subs	r2, #32
 8002c62:	40d1      	lsrs	r1, r2
 8002c64:	4662      	mov	r2, ip
 8002c66:	2a20      	cmp	r2, #32
 8002c68:	d006      	beq.n	8002c78 <__aeabi_dsub+0x4d4>
 8002c6a:	4664      	mov	r4, ip
 8002c6c:	2240      	movs	r2, #64	; 0x40
 8002c6e:	1b12      	subs	r2, r2, r4
 8002c70:	003c      	movs	r4, r7
 8002c72:	4094      	lsls	r4, r2
 8002c74:	4304      	orrs	r4, r0
 8002c76:	9401      	str	r4, [sp, #4]
 8002c78:	9c01      	ldr	r4, [sp, #4]
 8002c7a:	1e62      	subs	r2, r4, #1
 8002c7c:	4194      	sbcs	r4, r2
 8002c7e:	430c      	orrs	r4, r1
 8002c80:	e5e3      	b.n	800284a <__aeabi_dsub+0xa6>
 8002c82:	4649      	mov	r1, r9
 8002c84:	4319      	orrs	r1, r3
 8002c86:	000b      	movs	r3, r1
 8002c88:	1e5c      	subs	r4, r3, #1
 8002c8a:	41a3      	sbcs	r3, r4
 8002c8c:	1ac4      	subs	r4, r0, r3
 8002c8e:	42a0      	cmp	r0, r4
 8002c90:	419b      	sbcs	r3, r3
 8002c92:	425b      	negs	r3, r3
 8002c94:	1afb      	subs	r3, r7, r3
 8002c96:	469a      	mov	sl, r3
 8002c98:	465d      	mov	r5, fp
 8002c9a:	0016      	movs	r6, r2
 8002c9c:	e5dc      	b.n	8002858 <__aeabi_dsub+0xb4>
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	4319      	orrs	r1, r3
 8002ca2:	d100      	bne.n	8002ca6 <__aeabi_dsub+0x502>
 8002ca4:	e0ae      	b.n	8002e04 <__aeabi_dsub+0x660>
 8002ca6:	4661      	mov	r1, ip
 8002ca8:	4664      	mov	r4, ip
 8002caa:	3901      	subs	r1, #1
 8002cac:	2c01      	cmp	r4, #1
 8002cae:	d100      	bne.n	8002cb2 <__aeabi_dsub+0x50e>
 8002cb0:	e0e0      	b.n	8002e74 <__aeabi_dsub+0x6d0>
 8002cb2:	4c77      	ldr	r4, [pc, #476]	; (8002e90 <__aeabi_dsub+0x6ec>)
 8002cb4:	45a4      	cmp	ip, r4
 8002cb6:	d056      	beq.n	8002d66 <__aeabi_dsub+0x5c2>
 8002cb8:	468c      	mov	ip, r1
 8002cba:	e69a      	b.n	80029f2 <__aeabi_dsub+0x24e>
 8002cbc:	4661      	mov	r1, ip
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	003c      	movs	r4, r7
 8002cc2:	1a52      	subs	r2, r2, r1
 8002cc4:	4094      	lsls	r4, r2
 8002cc6:	0001      	movs	r1, r0
 8002cc8:	4090      	lsls	r0, r2
 8002cca:	46a0      	mov	r8, r4
 8002ccc:	4664      	mov	r4, ip
 8002cce:	1e42      	subs	r2, r0, #1
 8002cd0:	4190      	sbcs	r0, r2
 8002cd2:	4662      	mov	r2, ip
 8002cd4:	40e1      	lsrs	r1, r4
 8002cd6:	4644      	mov	r4, r8
 8002cd8:	40d7      	lsrs	r7, r2
 8002cda:	430c      	orrs	r4, r1
 8002cdc:	4304      	orrs	r4, r0
 8002cde:	44b9      	add	r9, r7
 8002ce0:	e701      	b.n	8002ae6 <__aeabi_dsub+0x342>
 8002ce2:	496b      	ldr	r1, [pc, #428]	; (8002e90 <__aeabi_dsub+0x6ec>)
 8002ce4:	428a      	cmp	r2, r1
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x546>
 8002ce8:	e70c      	b.n	8002b04 <__aeabi_dsub+0x360>
 8002cea:	1818      	adds	r0, r3, r0
 8002cec:	4298      	cmp	r0, r3
 8002cee:	419b      	sbcs	r3, r3
 8002cf0:	444f      	add	r7, r9
 8002cf2:	425b      	negs	r3, r3
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	07dc      	lsls	r4, r3, #31
 8002cf8:	0840      	lsrs	r0, r0, #1
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	469a      	mov	sl, r3
 8002cfe:	0016      	movs	r6, r2
 8002d00:	4304      	orrs	r4, r0
 8002d02:	e6d9      	b.n	8002ab8 <__aeabi_dsub+0x314>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x566>
 8002d08:	e081      	b.n	8002e0e <__aeabi_dsub+0x66a>
 8002d0a:	003b      	movs	r3, r7
 8002d0c:	4303      	orrs	r3, r0
 8002d0e:	d11d      	bne.n	8002d4c <__aeabi_dsub+0x5a8>
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	2500      	movs	r5, #0
 8002d14:	0312      	lsls	r2, r2, #12
 8002d16:	e70b      	b.n	8002b30 <__aeabi_dsub+0x38c>
 8002d18:	08c0      	lsrs	r0, r0, #3
 8002d1a:	077b      	lsls	r3, r7, #29
 8002d1c:	465d      	mov	r5, fp
 8002d1e:	4303      	orrs	r3, r0
 8002d20:	08fa      	lsrs	r2, r7, #3
 8002d22:	e6d3      	b.n	8002acc <__aeabi_dsub+0x328>
 8002d24:	1ac4      	subs	r4, r0, r3
 8002d26:	42a0      	cmp	r0, r4
 8002d28:	4180      	sbcs	r0, r0
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	4240      	negs	r0, r0
 8002d2e:	1aff      	subs	r7, r7, r3
 8002d30:	1a3b      	subs	r3, r7, r0
 8002d32:	469a      	mov	sl, r3
 8002d34:	465d      	mov	r5, fp
 8002d36:	e597      	b.n	8002868 <__aeabi_dsub+0xc4>
 8002d38:	1a1c      	subs	r4, r3, r0
 8002d3a:	464a      	mov	r2, r9
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	419b      	sbcs	r3, r3
 8002d40:	1bd7      	subs	r7, r2, r7
 8002d42:	425b      	negs	r3, r3
 8002d44:	1afb      	subs	r3, r7, r3
 8002d46:	469a      	mov	sl, r3
 8002d48:	2601      	movs	r6, #1
 8002d4a:	e585      	b.n	8002858 <__aeabi_dsub+0xb4>
 8002d4c:	08c0      	lsrs	r0, r0, #3
 8002d4e:	077b      	lsls	r3, r7, #29
 8002d50:	465d      	mov	r5, fp
 8002d52:	4303      	orrs	r3, r0
 8002d54:	08fa      	lsrs	r2, r7, #3
 8002d56:	e6e7      	b.n	8002b28 <__aeabi_dsub+0x384>
 8002d58:	464a      	mov	r2, r9
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	0752      	lsls	r2, r2, #29
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	464a      	mov	r2, r9
 8002d62:	08d2      	lsrs	r2, r2, #3
 8002d64:	e6b5      	b.n	8002ad2 <__aeabi_dsub+0x32e>
 8002d66:	08c0      	lsrs	r0, r0, #3
 8002d68:	077b      	lsls	r3, r7, #29
 8002d6a:	4303      	orrs	r3, r0
 8002d6c:	08fa      	lsrs	r2, r7, #3
 8002d6e:	e6db      	b.n	8002b28 <__aeabi_dsub+0x384>
 8002d70:	4649      	mov	r1, r9
 8002d72:	4319      	orrs	r1, r3
 8002d74:	000b      	movs	r3, r1
 8002d76:	1e59      	subs	r1, r3, #1
 8002d78:	418b      	sbcs	r3, r1
 8002d7a:	001c      	movs	r4, r3
 8002d7c:	e653      	b.n	8002a26 <__aeabi_dsub+0x282>
 8002d7e:	464d      	mov	r5, r9
 8002d80:	3c20      	subs	r4, #32
 8002d82:	40e5      	lsrs	r5, r4
 8002d84:	2920      	cmp	r1, #32
 8002d86:	d005      	beq.n	8002d94 <__aeabi_dsub+0x5f0>
 8002d88:	2440      	movs	r4, #64	; 0x40
 8002d8a:	1a64      	subs	r4, r4, r1
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	40a1      	lsls	r1, r4
 8002d90:	430b      	orrs	r3, r1
 8002d92:	4698      	mov	r8, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	1e5c      	subs	r4, r3, #1
 8002d98:	41a3      	sbcs	r3, r4
 8002d9a:	432b      	orrs	r3, r5
 8002d9c:	e776      	b.n	8002c8c <__aeabi_dsub+0x4e8>
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	d0e1      	beq.n	8002d66 <__aeabi_dsub+0x5c2>
 8002da2:	003a      	movs	r2, r7
 8002da4:	08db      	lsrs	r3, r3, #3
 8002da6:	4302      	orrs	r2, r0
 8002da8:	d100      	bne.n	8002dac <__aeabi_dsub+0x608>
 8002daa:	e6b8      	b.n	8002b1e <__aeabi_dsub+0x37a>
 8002dac:	464a      	mov	r2, r9
 8002dae:	0752      	lsls	r2, r2, #29
 8002db0:	2480      	movs	r4, #128	; 0x80
 8002db2:	4313      	orrs	r3, r2
 8002db4:	464a      	mov	r2, r9
 8002db6:	0324      	lsls	r4, r4, #12
 8002db8:	08d2      	lsrs	r2, r2, #3
 8002dba:	4222      	tst	r2, r4
 8002dbc:	d007      	beq.n	8002dce <__aeabi_dsub+0x62a>
 8002dbe:	08fe      	lsrs	r6, r7, #3
 8002dc0:	4226      	tst	r6, r4
 8002dc2:	d104      	bne.n	8002dce <__aeabi_dsub+0x62a>
 8002dc4:	465d      	mov	r5, fp
 8002dc6:	0032      	movs	r2, r6
 8002dc8:	08c3      	lsrs	r3, r0, #3
 8002dca:	077f      	lsls	r7, r7, #29
 8002dcc:	433b      	orrs	r3, r7
 8002dce:	0f59      	lsrs	r1, r3, #29
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	0749      	lsls	r1, r1, #29
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	e6a6      	b.n	8002b28 <__aeabi_dsub+0x384>
 8002dda:	1ac4      	subs	r4, r0, r3
 8002ddc:	42a0      	cmp	r0, r4
 8002dde:	4180      	sbcs	r0, r0
 8002de0:	464b      	mov	r3, r9
 8002de2:	4240      	negs	r0, r0
 8002de4:	1aff      	subs	r7, r7, r3
 8002de6:	1a3b      	subs	r3, r7, r0
 8002de8:	469a      	mov	sl, r3
 8002dea:	465d      	mov	r5, fp
 8002dec:	2601      	movs	r6, #1
 8002dee:	e533      	b.n	8002858 <__aeabi_dsub+0xb4>
 8002df0:	003b      	movs	r3, r7
 8002df2:	4303      	orrs	r3, r0
 8002df4:	d100      	bne.n	8002df8 <__aeabi_dsub+0x654>
 8002df6:	e715      	b.n	8002c24 <__aeabi_dsub+0x480>
 8002df8:	08c0      	lsrs	r0, r0, #3
 8002dfa:	077b      	lsls	r3, r7, #29
 8002dfc:	465d      	mov	r5, fp
 8002dfe:	4303      	orrs	r3, r0
 8002e00:	08fa      	lsrs	r2, r7, #3
 8002e02:	e666      	b.n	8002ad2 <__aeabi_dsub+0x32e>
 8002e04:	08c0      	lsrs	r0, r0, #3
 8002e06:	077b      	lsls	r3, r7, #29
 8002e08:	4303      	orrs	r3, r0
 8002e0a:	08fa      	lsrs	r2, r7, #3
 8002e0c:	e65e      	b.n	8002acc <__aeabi_dsub+0x328>
 8002e0e:	003a      	movs	r2, r7
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	4302      	orrs	r2, r0
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x674>
 8002e16:	e682      	b.n	8002b1e <__aeabi_dsub+0x37a>
 8002e18:	464a      	mov	r2, r9
 8002e1a:	0752      	lsls	r2, r2, #29
 8002e1c:	2480      	movs	r4, #128	; 0x80
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	464a      	mov	r2, r9
 8002e22:	0324      	lsls	r4, r4, #12
 8002e24:	08d2      	lsrs	r2, r2, #3
 8002e26:	4222      	tst	r2, r4
 8002e28:	d007      	beq.n	8002e3a <__aeabi_dsub+0x696>
 8002e2a:	08fe      	lsrs	r6, r7, #3
 8002e2c:	4226      	tst	r6, r4
 8002e2e:	d104      	bne.n	8002e3a <__aeabi_dsub+0x696>
 8002e30:	465d      	mov	r5, fp
 8002e32:	0032      	movs	r2, r6
 8002e34:	08c3      	lsrs	r3, r0, #3
 8002e36:	077f      	lsls	r7, r7, #29
 8002e38:	433b      	orrs	r3, r7
 8002e3a:	0f59      	lsrs	r1, r3, #29
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	08db      	lsrs	r3, r3, #3
 8002e40:	0749      	lsls	r1, r1, #29
 8002e42:	430b      	orrs	r3, r1
 8002e44:	e670      	b.n	8002b28 <__aeabi_dsub+0x384>
 8002e46:	08c0      	lsrs	r0, r0, #3
 8002e48:	077b      	lsls	r3, r7, #29
 8002e4a:	4303      	orrs	r3, r0
 8002e4c:	08fa      	lsrs	r2, r7, #3
 8002e4e:	e640      	b.n	8002ad2 <__aeabi_dsub+0x32e>
 8002e50:	464c      	mov	r4, r9
 8002e52:	3920      	subs	r1, #32
 8002e54:	40cc      	lsrs	r4, r1
 8002e56:	4661      	mov	r1, ip
 8002e58:	2920      	cmp	r1, #32
 8002e5a:	d006      	beq.n	8002e6a <__aeabi_dsub+0x6c6>
 8002e5c:	4666      	mov	r6, ip
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	1b89      	subs	r1, r1, r6
 8002e62:	464e      	mov	r6, r9
 8002e64:	408e      	lsls	r6, r1
 8002e66:	4333      	orrs	r3, r6
 8002e68:	4698      	mov	r8, r3
 8002e6a:	4643      	mov	r3, r8
 8002e6c:	1e59      	subs	r1, r3, #1
 8002e6e:	418b      	sbcs	r3, r1
 8002e70:	431c      	orrs	r4, r3
 8002e72:	e5d8      	b.n	8002a26 <__aeabi_dsub+0x282>
 8002e74:	181c      	adds	r4, r3, r0
 8002e76:	4284      	cmp	r4, r0
 8002e78:	4180      	sbcs	r0, r0
 8002e7a:	444f      	add	r7, r9
 8002e7c:	46ba      	mov	sl, r7
 8002e7e:	4240      	negs	r0, r0
 8002e80:	4482      	add	sl, r0
 8002e82:	e6d9      	b.n	8002c38 <__aeabi_dsub+0x494>
 8002e84:	4653      	mov	r3, sl
 8002e86:	4323      	orrs	r3, r4
 8002e88:	d100      	bne.n	8002e8c <__aeabi_dsub+0x6e8>
 8002e8a:	e6cb      	b.n	8002c24 <__aeabi_dsub+0x480>
 8002e8c:	e614      	b.n	8002ab8 <__aeabi_dsub+0x314>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	000007ff 	.word	0x000007ff
 8002e94:	ff7fffff 	.word	0xff7fffff
 8002e98:	000007fe 	.word	0x000007fe
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	4a01      	ldr	r2, [pc, #4]	; (8002ea4 <__aeabi_dsub+0x700>)
 8002ea0:	001c      	movs	r4, r3
 8002ea2:	e529      	b.n	80028f8 <__aeabi_dsub+0x154>
 8002ea4:	000007ff 	.word	0x000007ff

08002ea8 <__aeabi_dcmpun>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	0005      	movs	r5, r0
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <__aeabi_dcmpun+0x38>)
 8002eae:	031c      	lsls	r4, r3, #12
 8002eb0:	0016      	movs	r6, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	030a      	lsls	r2, r1, #12
 8002eb6:	0049      	lsls	r1, r1, #1
 8002eb8:	0b12      	lsrs	r2, r2, #12
 8002eba:	0d49      	lsrs	r1, r1, #21
 8002ebc:	0b24      	lsrs	r4, r4, #12
 8002ebe:	0d5b      	lsrs	r3, r3, #21
 8002ec0:	4281      	cmp	r1, r0
 8002ec2:	d008      	beq.n	8002ed6 <__aeabi_dcmpun+0x2e>
 8002ec4:	4a06      	ldr	r2, [pc, #24]	; (8002ee0 <__aeabi_dcmpun+0x38>)
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <__aeabi_dcmpun+0x2c>
 8002ecc:	0020      	movs	r0, r4
 8002ece:	4330      	orrs	r0, r6
 8002ed0:	1e43      	subs	r3, r0, #1
 8002ed2:	4198      	sbcs	r0, r3
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	432a      	orrs	r2, r5
 8002eda:	d1fb      	bne.n	8002ed4 <__aeabi_dcmpun+0x2c>
 8002edc:	e7f2      	b.n	8002ec4 <__aeabi_dcmpun+0x1c>
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	000007ff 	.word	0x000007ff

08002ee4 <__aeabi_d2iz>:
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	b530      	push	{r4, r5, lr}
 8002ee8:	4c13      	ldr	r4, [pc, #76]	; (8002f38 <__aeabi_d2iz+0x54>)
 8002eea:	0053      	lsls	r3, r2, #1
 8002eec:	0309      	lsls	r1, r1, #12
 8002eee:	0005      	movs	r5, r0
 8002ef0:	0b09      	lsrs	r1, r1, #12
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	0d5b      	lsrs	r3, r3, #21
 8002ef6:	0fd2      	lsrs	r2, r2, #31
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	dd04      	ble.n	8002f06 <__aeabi_d2iz+0x22>
 8002efc:	480f      	ldr	r0, [pc, #60]	; (8002f3c <__aeabi_d2iz+0x58>)
 8002efe:	4283      	cmp	r3, r0
 8002f00:	dd02      	ble.n	8002f08 <__aeabi_d2iz+0x24>
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <__aeabi_d2iz+0x5c>)
 8002f04:	18d0      	adds	r0, r2, r3
 8002f06:	bd30      	pop	{r4, r5, pc}
 8002f08:	2080      	movs	r0, #128	; 0x80
 8002f0a:	0340      	lsls	r0, r0, #13
 8002f0c:	4301      	orrs	r1, r0
 8002f0e:	480d      	ldr	r0, [pc, #52]	; (8002f44 <__aeabi_d2iz+0x60>)
 8002f10:	1ac0      	subs	r0, r0, r3
 8002f12:	281f      	cmp	r0, #31
 8002f14:	dd08      	ble.n	8002f28 <__aeabi_d2iz+0x44>
 8002f16:	480c      	ldr	r0, [pc, #48]	; (8002f48 <__aeabi_d2iz+0x64>)
 8002f18:	1ac3      	subs	r3, r0, r3
 8002f1a:	40d9      	lsrs	r1, r3
 8002f1c:	000b      	movs	r3, r1
 8002f1e:	4258      	negs	r0, r3
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d1f0      	bne.n	8002f06 <__aeabi_d2iz+0x22>
 8002f24:	0018      	movs	r0, r3
 8002f26:	e7ee      	b.n	8002f06 <__aeabi_d2iz+0x22>
 8002f28:	4c08      	ldr	r4, [pc, #32]	; (8002f4c <__aeabi_d2iz+0x68>)
 8002f2a:	40c5      	lsrs	r5, r0
 8002f2c:	46a4      	mov	ip, r4
 8002f2e:	4463      	add	r3, ip
 8002f30:	4099      	lsls	r1, r3
 8002f32:	000b      	movs	r3, r1
 8002f34:	432b      	orrs	r3, r5
 8002f36:	e7f2      	b.n	8002f1e <__aeabi_d2iz+0x3a>
 8002f38:	000003fe 	.word	0x000003fe
 8002f3c:	0000041d 	.word	0x0000041d
 8002f40:	7fffffff 	.word	0x7fffffff
 8002f44:	00000433 	.word	0x00000433
 8002f48:	00000413 	.word	0x00000413
 8002f4c:	fffffbed 	.word	0xfffffbed

08002f50 <__aeabi_i2d>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d016      	beq.n	8002f84 <__aeabi_i2d+0x34>
 8002f56:	17c3      	asrs	r3, r0, #31
 8002f58:	18c5      	adds	r5, r0, r3
 8002f5a:	405d      	eors	r5, r3
 8002f5c:	0fc4      	lsrs	r4, r0, #31
 8002f5e:	0028      	movs	r0, r5
 8002f60:	f000 f91a 	bl	8003198 <__clzsi2>
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <__aeabi_i2d+0x5c>)
 8002f66:	1a1b      	subs	r3, r3, r0
 8002f68:	280a      	cmp	r0, #10
 8002f6a:	dc16      	bgt.n	8002f9a <__aeabi_i2d+0x4a>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	002e      	movs	r6, r5
 8002f70:	3215      	adds	r2, #21
 8002f72:	4096      	lsls	r6, r2
 8002f74:	220b      	movs	r2, #11
 8002f76:	1a12      	subs	r2, r2, r0
 8002f78:	40d5      	lsrs	r5, r2
 8002f7a:	055b      	lsls	r3, r3, #21
 8002f7c:	032d      	lsls	r5, r5, #12
 8002f7e:	0b2d      	lsrs	r5, r5, #12
 8002f80:	0d5b      	lsrs	r3, r3, #21
 8002f82:	e003      	b.n	8002f8c <__aeabi_i2d+0x3c>
 8002f84:	2400      	movs	r4, #0
 8002f86:	2300      	movs	r3, #0
 8002f88:	2500      	movs	r5, #0
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	432b      	orrs	r3, r5
 8002f90:	07e4      	lsls	r4, r4, #31
 8002f92:	4323      	orrs	r3, r4
 8002f94:	0030      	movs	r0, r6
 8002f96:	0019      	movs	r1, r3
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
 8002f9a:	380b      	subs	r0, #11
 8002f9c:	4085      	lsls	r5, r0
 8002f9e:	055b      	lsls	r3, r3, #21
 8002fa0:	032d      	lsls	r5, r5, #12
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	0b2d      	lsrs	r5, r5, #12
 8002fa6:	0d5b      	lsrs	r3, r3, #21
 8002fa8:	e7f0      	b.n	8002f8c <__aeabi_i2d+0x3c>
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	0000041e 	.word	0x0000041e

08002fb0 <__aeabi_ui2d>:
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	1e04      	subs	r4, r0, #0
 8002fb4:	d010      	beq.n	8002fd8 <__aeabi_ui2d+0x28>
 8002fb6:	f000 f8ef 	bl	8003198 <__clzsi2>
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <__aeabi_ui2d+0x48>)
 8002fbc:	1a1b      	subs	r3, r3, r0
 8002fbe:	280a      	cmp	r0, #10
 8002fc0:	dc11      	bgt.n	8002fe6 <__aeabi_ui2d+0x36>
 8002fc2:	220b      	movs	r2, #11
 8002fc4:	0021      	movs	r1, r4
 8002fc6:	1a12      	subs	r2, r2, r0
 8002fc8:	40d1      	lsrs	r1, r2
 8002fca:	3015      	adds	r0, #21
 8002fcc:	030a      	lsls	r2, r1, #12
 8002fce:	055b      	lsls	r3, r3, #21
 8002fd0:	4084      	lsls	r4, r0
 8002fd2:	0b12      	lsrs	r2, r2, #12
 8002fd4:	0d5b      	lsrs	r3, r3, #21
 8002fd6:	e001      	b.n	8002fdc <__aeabi_ui2d+0x2c>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	2200      	movs	r2, #0
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	0020      	movs	r0, r4
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	bd10      	pop	{r4, pc}
 8002fe6:	0022      	movs	r2, r4
 8002fe8:	380b      	subs	r0, #11
 8002fea:	4082      	lsls	r2, r0
 8002fec:	055b      	lsls	r3, r3, #21
 8002fee:	0312      	lsls	r2, r2, #12
 8002ff0:	2400      	movs	r4, #0
 8002ff2:	0b12      	lsrs	r2, r2, #12
 8002ff4:	0d5b      	lsrs	r3, r3, #21
 8002ff6:	e7f1      	b.n	8002fdc <__aeabi_ui2d+0x2c>
 8002ff8:	0000041e 	.word	0x0000041e

08002ffc <__aeabi_f2d>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	0242      	lsls	r2, r0, #9
 8003000:	0043      	lsls	r3, r0, #1
 8003002:	0fc4      	lsrs	r4, r0, #31
 8003004:	20fe      	movs	r0, #254	; 0xfe
 8003006:	0e1b      	lsrs	r3, r3, #24
 8003008:	1c59      	adds	r1, r3, #1
 800300a:	0a55      	lsrs	r5, r2, #9
 800300c:	4208      	tst	r0, r1
 800300e:	d00c      	beq.n	800302a <__aeabi_f2d+0x2e>
 8003010:	21e0      	movs	r1, #224	; 0xe0
 8003012:	0089      	lsls	r1, r1, #2
 8003014:	468c      	mov	ip, r1
 8003016:	076d      	lsls	r5, r5, #29
 8003018:	0b12      	lsrs	r2, r2, #12
 800301a:	4463      	add	r3, ip
 800301c:	051b      	lsls	r3, r3, #20
 800301e:	4313      	orrs	r3, r2
 8003020:	07e4      	lsls	r4, r4, #31
 8003022:	4323      	orrs	r3, r4
 8003024:	0028      	movs	r0, r5
 8003026:	0019      	movs	r1, r3
 8003028:	bd70      	pop	{r4, r5, r6, pc}
 800302a:	2b00      	cmp	r3, #0
 800302c:	d114      	bne.n	8003058 <__aeabi_f2d+0x5c>
 800302e:	2d00      	cmp	r5, #0
 8003030:	d01b      	beq.n	800306a <__aeabi_f2d+0x6e>
 8003032:	0028      	movs	r0, r5
 8003034:	f000 f8b0 	bl	8003198 <__clzsi2>
 8003038:	280a      	cmp	r0, #10
 800303a:	dc1c      	bgt.n	8003076 <__aeabi_f2d+0x7a>
 800303c:	230b      	movs	r3, #11
 800303e:	002a      	movs	r2, r5
 8003040:	1a1b      	subs	r3, r3, r0
 8003042:	40da      	lsrs	r2, r3
 8003044:	0003      	movs	r3, r0
 8003046:	3315      	adds	r3, #21
 8003048:	409d      	lsls	r5, r3
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <__aeabi_f2d+0x88>)
 800304c:	0312      	lsls	r2, r2, #12
 800304e:	1a1b      	subs	r3, r3, r0
 8003050:	055b      	lsls	r3, r3, #21
 8003052:	0b12      	lsrs	r2, r2, #12
 8003054:	0d5b      	lsrs	r3, r3, #21
 8003056:	e7e1      	b.n	800301c <__aeabi_f2d+0x20>
 8003058:	2d00      	cmp	r5, #0
 800305a:	d009      	beq.n	8003070 <__aeabi_f2d+0x74>
 800305c:	0b13      	lsrs	r3, r2, #12
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	0312      	lsls	r2, r2, #12
 8003062:	431a      	orrs	r2, r3
 8003064:	076d      	lsls	r5, r5, #29
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <__aeabi_f2d+0x8c>)
 8003068:	e7d8      	b.n	800301c <__aeabi_f2d+0x20>
 800306a:	2300      	movs	r3, #0
 800306c:	2200      	movs	r2, #0
 800306e:	e7d5      	b.n	800301c <__aeabi_f2d+0x20>
 8003070:	2200      	movs	r2, #0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <__aeabi_f2d+0x8c>)
 8003074:	e7d2      	b.n	800301c <__aeabi_f2d+0x20>
 8003076:	0003      	movs	r3, r0
 8003078:	002a      	movs	r2, r5
 800307a:	3b0b      	subs	r3, #11
 800307c:	409a      	lsls	r2, r3
 800307e:	2500      	movs	r5, #0
 8003080:	e7e3      	b.n	800304a <__aeabi_f2d+0x4e>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	00000389 	.word	0x00000389
 8003088:	000007ff 	.word	0x000007ff

0800308c <__aeabi_d2f>:
 800308c:	0002      	movs	r2, r0
 800308e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003090:	004b      	lsls	r3, r1, #1
 8003092:	030d      	lsls	r5, r1, #12
 8003094:	0f40      	lsrs	r0, r0, #29
 8003096:	0d5b      	lsrs	r3, r3, #21
 8003098:	0fcc      	lsrs	r4, r1, #31
 800309a:	0a6d      	lsrs	r5, r5, #9
 800309c:	493a      	ldr	r1, [pc, #232]	; (8003188 <__aeabi_d2f+0xfc>)
 800309e:	4305      	orrs	r5, r0
 80030a0:	1c58      	adds	r0, r3, #1
 80030a2:	00d7      	lsls	r7, r2, #3
 80030a4:	4208      	tst	r0, r1
 80030a6:	d00a      	beq.n	80030be <__aeabi_d2f+0x32>
 80030a8:	4938      	ldr	r1, [pc, #224]	; (800318c <__aeabi_d2f+0x100>)
 80030aa:	1859      	adds	r1, r3, r1
 80030ac:	29fe      	cmp	r1, #254	; 0xfe
 80030ae:	dd16      	ble.n	80030de <__aeabi_d2f+0x52>
 80030b0:	20ff      	movs	r0, #255	; 0xff
 80030b2:	2200      	movs	r2, #0
 80030b4:	05c0      	lsls	r0, r0, #23
 80030b6:	4310      	orrs	r0, r2
 80030b8:	07e4      	lsls	r4, r4, #31
 80030ba:	4320      	orrs	r0, r4
 80030bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <__aeabi_d2f+0x44>
 80030c2:	433d      	orrs	r5, r7
 80030c4:	d026      	beq.n	8003114 <__aeabi_d2f+0x88>
 80030c6:	2205      	movs	r2, #5
 80030c8:	0192      	lsls	r2, r2, #6
 80030ca:	0a52      	lsrs	r2, r2, #9
 80030cc:	b2d8      	uxtb	r0, r3
 80030ce:	e7f1      	b.n	80030b4 <__aeabi_d2f+0x28>
 80030d0:	432f      	orrs	r7, r5
 80030d2:	d0ed      	beq.n	80030b0 <__aeabi_d2f+0x24>
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	03d2      	lsls	r2, r2, #15
 80030d8:	20ff      	movs	r0, #255	; 0xff
 80030da:	432a      	orrs	r2, r5
 80030dc:	e7ea      	b.n	80030b4 <__aeabi_d2f+0x28>
 80030de:	2900      	cmp	r1, #0
 80030e0:	dd1b      	ble.n	800311a <__aeabi_d2f+0x8e>
 80030e2:	0192      	lsls	r2, r2, #6
 80030e4:	1e50      	subs	r0, r2, #1
 80030e6:	4182      	sbcs	r2, r0
 80030e8:	00ed      	lsls	r5, r5, #3
 80030ea:	0f7f      	lsrs	r7, r7, #29
 80030ec:	432a      	orrs	r2, r5
 80030ee:	433a      	orrs	r2, r7
 80030f0:	0753      	lsls	r3, r2, #29
 80030f2:	d047      	beq.n	8003184 <__aeabi_d2f+0xf8>
 80030f4:	230f      	movs	r3, #15
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d000      	beq.n	80030fe <__aeabi_d2f+0x72>
 80030fc:	3204      	adds	r2, #4
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	04db      	lsls	r3, r3, #19
 8003102:	4013      	ands	r3, r2
 8003104:	d03e      	beq.n	8003184 <__aeabi_d2f+0xf8>
 8003106:	1c48      	adds	r0, r1, #1
 8003108:	29fe      	cmp	r1, #254	; 0xfe
 800310a:	d0d1      	beq.n	80030b0 <__aeabi_d2f+0x24>
 800310c:	0192      	lsls	r2, r2, #6
 800310e:	0a52      	lsrs	r2, r2, #9
 8003110:	b2c0      	uxtb	r0, r0
 8003112:	e7cf      	b.n	80030b4 <__aeabi_d2f+0x28>
 8003114:	2000      	movs	r0, #0
 8003116:	2200      	movs	r2, #0
 8003118:	e7cc      	b.n	80030b4 <__aeabi_d2f+0x28>
 800311a:	000a      	movs	r2, r1
 800311c:	3217      	adds	r2, #23
 800311e:	db2f      	blt.n	8003180 <__aeabi_d2f+0xf4>
 8003120:	2680      	movs	r6, #128	; 0x80
 8003122:	0436      	lsls	r6, r6, #16
 8003124:	432e      	orrs	r6, r5
 8003126:	251e      	movs	r5, #30
 8003128:	1a6d      	subs	r5, r5, r1
 800312a:	2d1f      	cmp	r5, #31
 800312c:	dd11      	ble.n	8003152 <__aeabi_d2f+0xc6>
 800312e:	2202      	movs	r2, #2
 8003130:	4252      	negs	r2, r2
 8003132:	1a52      	subs	r2, r2, r1
 8003134:	0031      	movs	r1, r6
 8003136:	40d1      	lsrs	r1, r2
 8003138:	2d20      	cmp	r5, #32
 800313a:	d004      	beq.n	8003146 <__aeabi_d2f+0xba>
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <__aeabi_d2f+0x104>)
 800313e:	4694      	mov	ip, r2
 8003140:	4463      	add	r3, ip
 8003142:	409e      	lsls	r6, r3
 8003144:	4337      	orrs	r7, r6
 8003146:	003a      	movs	r2, r7
 8003148:	1e53      	subs	r3, r2, #1
 800314a:	419a      	sbcs	r2, r3
 800314c:	430a      	orrs	r2, r1
 800314e:	2100      	movs	r1, #0
 8003150:	e7ce      	b.n	80030f0 <__aeabi_d2f+0x64>
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <__aeabi_d2f+0x108>)
 8003154:	0038      	movs	r0, r7
 8003156:	4694      	mov	ip, r2
 8003158:	4463      	add	r3, ip
 800315a:	4098      	lsls	r0, r3
 800315c:	003a      	movs	r2, r7
 800315e:	1e41      	subs	r1, r0, #1
 8003160:	4188      	sbcs	r0, r1
 8003162:	409e      	lsls	r6, r3
 8003164:	40ea      	lsrs	r2, r5
 8003166:	4330      	orrs	r0, r6
 8003168:	4302      	orrs	r2, r0
 800316a:	2100      	movs	r1, #0
 800316c:	0753      	lsls	r3, r2, #29
 800316e:	d1c1      	bne.n	80030f4 <__aeabi_d2f+0x68>
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	0013      	movs	r3, r2
 8003174:	04c9      	lsls	r1, r1, #19
 8003176:	2001      	movs	r0, #1
 8003178:	400b      	ands	r3, r1
 800317a:	420a      	tst	r2, r1
 800317c:	d1c6      	bne.n	800310c <__aeabi_d2f+0x80>
 800317e:	e7a3      	b.n	80030c8 <__aeabi_d2f+0x3c>
 8003180:	2300      	movs	r3, #0
 8003182:	e7a0      	b.n	80030c6 <__aeabi_d2f+0x3a>
 8003184:	000b      	movs	r3, r1
 8003186:	e79f      	b.n	80030c8 <__aeabi_d2f+0x3c>
 8003188:	000007fe 	.word	0x000007fe
 800318c:	fffffc80 	.word	0xfffffc80
 8003190:	fffffca2 	.word	0xfffffca2
 8003194:	fffffc82 	.word	0xfffffc82

08003198 <__clzsi2>:
 8003198:	211c      	movs	r1, #28
 800319a:	2301      	movs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	4298      	cmp	r0, r3
 80031a0:	d301      	bcc.n	80031a6 <__clzsi2+0xe>
 80031a2:	0c00      	lsrs	r0, r0, #16
 80031a4:	3910      	subs	r1, #16
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	4298      	cmp	r0, r3
 80031aa:	d301      	bcc.n	80031b0 <__clzsi2+0x18>
 80031ac:	0a00      	lsrs	r0, r0, #8
 80031ae:	3908      	subs	r1, #8
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	4298      	cmp	r0, r3
 80031b4:	d301      	bcc.n	80031ba <__clzsi2+0x22>
 80031b6:	0900      	lsrs	r0, r0, #4
 80031b8:	3904      	subs	r1, #4
 80031ba:	a202      	add	r2, pc, #8	; (adr r2, 80031c4 <__clzsi2+0x2c>)
 80031bc:	5c10      	ldrb	r0, [r2, r0]
 80031be:	1840      	adds	r0, r0, r1
 80031c0:	4770      	bx	lr
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	02020304 	.word	0x02020304
 80031c8:	01010101 	.word	0x01010101
	...

080031d4 <init_ADC>:
 *      Author: gerar
 */
#include "adc.h"
#include "stm32f051x8.h"
// Initialize ADC
void init_ADC(void) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 9); // Enable ADC clock
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <init_ADC+0x40>)
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <init_ADC+0x40>)
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	0089      	lsls	r1, r1, #2
 80031e2:	430a      	orrs	r2, r1
 80031e4:	619a      	str	r2, [r3, #24]
    ADC1->CHSELR |= (1 << 10) | (1 << 11) | (1 << 12); // Select channels 10, 11 and 12 for ADC
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <init_ADC+0x44>)
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <init_ADC+0x44>)
 80031ec:	21e0      	movs	r1, #224	; 0xe0
 80031ee:	0149      	lsls	r1, r1, #5
 80031f0:	430a      	orrs	r2, r1
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CR |= (1 << 0); // Enable ADC
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <init_ADC+0x44>)
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <init_ADC+0x44>)
 80031fa:	2101      	movs	r1, #1
 80031fc:	430a      	orrs	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
    while(!(ADC1->ISR & (1 << 0))); // Wait for ADC to be ready
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <init_ADC+0x44>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4013      	ands	r3, r2
 800320a:	d0fa      	beq.n	8003202 <init_ADC+0x2e>
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	40012400 	.word	0x40012400

0800321c <read_ADC_Channel>:

// Read a specific ADC channel
uint16_t read_ADC_Channel(uint8_t channel) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	0002      	movs	r2, r0
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	701a      	strb	r2, [r3, #0]
    ADC1->CHSELR = (1 << channel); // Select desired channel
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <read_ADC_Channel+0x40>)
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1->CR |= (1 << 2); // Start ADC conversion
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <read_ADC_Channel+0x40>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <read_ADC_Channel+0x40>)
 800323a:	2104      	movs	r1, #4
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
    while(!(ADC1->ISR & (1 << 2))); // Wait for conversion to complete
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <read_ADC_Channel+0x40>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2204      	movs	r2, #4
 8003248:	4013      	ands	r3, r2
 800324a:	d0fa      	beq.n	8003242 <read_ADC_Channel+0x26>
    return ADC1->DR; // Return ADC result
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <read_ADC_Channel+0x40>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	b29b      	uxth	r3, r3
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40012400 	.word	0x40012400

08003260 <ADC_to_Temperature>:

// Convert ADC value to temperature using LM35
float ADC_to_Temperature(uint16_t adc_value) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	0002      	movs	r2, r0
 8003268:	1dbb      	adds	r3, r7, #6
 800326a:	801a      	strh	r2, [r3, #0]
    float voltage = (adc_value * V_REF) / ADC_RESOLUTION; // Convert ADC value to voltage
 800326c:	1dbb      	adds	r3, r7, #6
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff fe6d 	bl	8002f50 <__aeabi_i2d>
 8003276:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <ADC_to_Temperature+0x64>)
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <ADC_to_Temperature+0x68>)
 800327a:	f7fe ffd1 	bl	8002220 <__aeabi_dmul>
 800327e:	0002      	movs	r2, r0
 8003280:	000b      	movs	r3, r1
 8003282:	0010      	movs	r0, r2
 8003284:	0019      	movs	r1, r3
 8003286:	2200      	movs	r2, #0
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <ADC_to_Temperature+0x6c>)
 800328a:	f7fe fbcf 	bl	8001a2c <__aeabi_ddiv>
 800328e:	0002      	movs	r2, r0
 8003290:	000b      	movs	r3, r1
 8003292:	0010      	movs	r0, r2
 8003294:	0019      	movs	r1, r3
 8003296:	f7ff fef9 	bl	800308c <__aeabi_d2f>
 800329a:	1c03      	adds	r3, r0, #0
 800329c:	60fb      	str	r3, [r7, #12]
    return voltage / LM35_SCALE_FACTOR; // Convert voltage to temperature
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff feac 	bl	8002ffc <__aeabi_f2d>
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <ADC_to_Temperature+0x70>)
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <ADC_to_Temperature+0x74>)
 80032a8:	f7fe fbc0 	bl	8001a2c <__aeabi_ddiv>
 80032ac:	0002      	movs	r2, r0
 80032ae:	000b      	movs	r3, r1
 80032b0:	0010      	movs	r0, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	f7ff feea 	bl	800308c <__aeabi_d2f>
 80032b8:	1c03      	adds	r3, r0, #0
}
 80032ba:	1c18      	adds	r0, r3, #0
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	66666666 	.word	0x66666666
 80032c8:	400a6666 	.word	0x400a6666
 80032cc:	40b00000 	.word	0x40b00000
 80032d0:	47ae147b 	.word	0x47ae147b
 80032d4:	3f847ae1 	.word	0x3f847ae1

080032d8 <ADC_to_BatteryVoltage>:

// Convert ADC value to battery voltage
float ADC_to_BatteryVoltage(uint16_t adc_value) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	0002      	movs	r2, r0
 80032e0:	1dbb      	adds	r3, r7, #6
 80032e2:	801a      	strh	r2, [r3, #0]
    float voltage = (adc_value * V_REF) / ADC_RESOLUTION; // Convert ADC value to voltage
 80032e4:	1dbb      	adds	r3, r7, #6
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fe31 	bl	8002f50 <__aeabi_i2d>
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <ADC_to_BatteryVoltage+0x64>)
 80032f0:	4b13      	ldr	r3, [pc, #76]	; (8003340 <ADC_to_BatteryVoltage+0x68>)
 80032f2:	f7fe ff95 	bl	8002220 <__aeabi_dmul>
 80032f6:	0002      	movs	r2, r0
 80032f8:	000b      	movs	r3, r1
 80032fa:	0010      	movs	r0, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	2200      	movs	r2, #0
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <ADC_to_BatteryVoltage+0x6c>)
 8003302:	f7fe fb93 	bl	8001a2c <__aeabi_ddiv>
 8003306:	0002      	movs	r2, r0
 8003308:	000b      	movs	r3, r1
 800330a:	0010      	movs	r0, r2
 800330c:	0019      	movs	r1, r3
 800330e:	f7ff febd 	bl	800308c <__aeabi_d2f>
 8003312:	1c03      	adds	r3, r0, #0
 8003314:	60fb      	str	r3, [r7, #12]
    return voltage / VOLTAGE_DIVIDER_RATIO; // Adjust for voltage divider
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff fe70 	bl	8002ffc <__aeabi_f2d>
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <ADC_to_BatteryVoltage+0x70>)
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <ADC_to_BatteryVoltage+0x74>)
 8003320:	f7fe fb84 	bl	8001a2c <__aeabi_ddiv>
 8003324:	0002      	movs	r2, r0
 8003326:	000b      	movs	r3, r1
 8003328:	0010      	movs	r0, r2
 800332a:	0019      	movs	r1, r3
 800332c:	f7ff feae 	bl	800308c <__aeabi_d2f>
 8003330:	1c03      	adds	r3, r0, #0
}
 8003332:	1c18      	adds	r0, r3, #0
 8003334:	46bd      	mov	sp, r7
 8003336:	b004      	add	sp, #16
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	66666666 	.word	0x66666666
 8003340:	400a6666 	.word	0x400a6666
 8003344:	40b00000 	.word	0x40b00000
 8003348:	47ae147b 	.word	0x47ae147b
 800334c:	3fb47ae1 	.word	0x3fb47ae1

08003350 <ADC_to_Current>:

// Convert ADC value to current using ACS712 sensor
float ADC_to_Current(uint16_t adc_value) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	0002      	movs	r2, r0
 8003358:	1dbb      	adds	r3, r7, #6
 800335a:	801a      	strh	r2, [r3, #0]
    float voltage = (adc_value * V_REF) / ADC_RESOLUTION; // Convert ADC value to voltage
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	0018      	movs	r0, r3
 8003362:	f7ff fdf5 	bl	8002f50 <__aeabi_i2d>
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <ADC_to_Current+0x74>)
 8003368:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <ADC_to_Current+0x78>)
 800336a:	f7fe ff59 	bl	8002220 <__aeabi_dmul>
 800336e:	0002      	movs	r2, r0
 8003370:	000b      	movs	r3, r1
 8003372:	0010      	movs	r0, r2
 8003374:	0019      	movs	r1, r3
 8003376:	2200      	movs	r2, #0
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <ADC_to_Current+0x7c>)
 800337a:	f7fe fb57 	bl	8001a2c <__aeabi_ddiv>
 800337e:	0002      	movs	r2, r0
 8003380:	000b      	movs	r3, r1
 8003382:	0010      	movs	r0, r2
 8003384:	0019      	movs	r1, r3
 8003386:	f7ff fe81 	bl	800308c <__aeabi_d2f>
 800338a:	1c03      	adds	r3, r0, #0
 800338c:	60fb      	str	r3, [r7, #12]
    return (voltage - ACS712_ZERO_CURRENT_OFFSET) / ACS712_SENSITIVITY; // Convert to current
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff fe34 	bl	8002ffc <__aeabi_f2d>
 8003394:	2200      	movs	r2, #0
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <ADC_to_Current+0x80>)
 8003398:	f7ff fa04 	bl	80027a4 <__aeabi_dsub>
 800339c:	0002      	movs	r2, r0
 800339e:	000b      	movs	r3, r1
 80033a0:	0010      	movs	r0, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <ADC_to_Current+0x84>)
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <ADC_to_Current+0x88>)
 80033a8:	f7fe fb40 	bl	8001a2c <__aeabi_ddiv>
 80033ac:	0002      	movs	r2, r0
 80033ae:	000b      	movs	r3, r1
 80033b0:	0010      	movs	r0, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	f7ff fe6a 	bl	800308c <__aeabi_d2f>
 80033b8:	1c03      	adds	r3, r0, #0
}
 80033ba:	1c18      	adds	r0, r3, #0
 80033bc:	46bd      	mov	sp, r7
 80033be:	b004      	add	sp, #16
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	66666666 	.word	0x66666666
 80033c8:	400a6666 	.word	0x400a6666
 80033cc:	40b00000 	.word	0x40b00000
 80033d0:	40040000 	.word	0x40040000
 80033d4:	9999999a 	.word	0x9999999a
 80033d8:	3fb99999 	.word	0x3fb99999

080033dc <UpdateDisplay>:
 *      Author: gerar
 */
#include "display.h"

/* Update the display values */
void UpdateDisplay(int currentPWM, float gx, float gy,float temperature,float speedKmH,float battery_voltage) {
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b08d      	sub	sp, #52	; 0x34
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
    char buffer[30];

    // Clear the previous data
    // Display X-Angle label and value
    SSD1306_GotoXY(1, 0);
 80033ea:	2100      	movs	r1, #0
 80033ec:	2001      	movs	r0, #1
 80033ee:	f001 fbd9 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("PWM:", &Font_7x10, 1);
 80033f2:	495c      	ldr	r1, [pc, #368]	; (8003564 <UpdateDisplay+0x188>)
 80033f4:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <UpdateDisplay+0x18c>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	0018      	movs	r0, r3
 80033fa:	f001 fc6d 	bl	8004cd8 <SSD1306_Puts>
    sprintf(buffer, "%d", currentPWM);
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	495a      	ldr	r1, [pc, #360]	; (800356c <UpdateDisplay+0x190>)
 8003402:	2410      	movs	r4, #16
 8003404:	193b      	adds	r3, r7, r4
 8003406:	0018      	movs	r0, r3
 8003408:	f003 ff62 	bl	80072d0 <siprintf>
    SSD1306_GotoXY(60, 0);
 800340c:	2100      	movs	r1, #0
 800340e:	203c      	movs	r0, #60	; 0x3c
 8003410:	f001 fbc8 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 8003414:	4953      	ldr	r1, [pc, #332]	; (8003564 <UpdateDisplay+0x188>)
 8003416:	193b      	adds	r3, r7, r4
 8003418:	2201      	movs	r2, #1
 800341a:	0018      	movs	r0, r3
 800341c:	f001 fc5c 	bl	8004cd8 <SSD1306_Puts>

    SSD1306_GotoXY(1, 10);
 8003420:	210a      	movs	r1, #10
 8003422:	2001      	movs	r0, #1
 8003424:	f001 fbbe 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("X-Angle:", &Font_7x10, 1);
 8003428:	494e      	ldr	r1, [pc, #312]	; (8003564 <UpdateDisplay+0x188>)
 800342a:	4b51      	ldr	r3, [pc, #324]	; (8003570 <UpdateDisplay+0x194>)
 800342c:	2201      	movs	r2, #1
 800342e:	0018      	movs	r0, r3
 8003430:	f001 fc52 	bl	8004cd8 <SSD1306_Puts>
    sprintf(buffer, "%.2f", gx);
 8003434:	68b8      	ldr	r0, [r7, #8]
 8003436:	f7ff fde1 	bl	8002ffc <__aeabi_f2d>
 800343a:	0002      	movs	r2, r0
 800343c:	000b      	movs	r3, r1
 800343e:	494d      	ldr	r1, [pc, #308]	; (8003574 <UpdateDisplay+0x198>)
 8003440:	1938      	adds	r0, r7, r4
 8003442:	f003 ff45 	bl	80072d0 <siprintf>
    SSD1306_GotoXY(60, 10);
 8003446:	210a      	movs	r1, #10
 8003448:	203c      	movs	r0, #60	; 0x3c
 800344a:	f001 fbab 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 800344e:	4945      	ldr	r1, [pc, #276]	; (8003564 <UpdateDisplay+0x188>)
 8003450:	193b      	adds	r3, r7, r4
 8003452:	2201      	movs	r2, #1
 8003454:	0018      	movs	r0, r3
 8003456:	f001 fc3f 	bl	8004cd8 <SSD1306_Puts>

    // Display Y-Angle label and value
    SSD1306_GotoXY(1, 20);
 800345a:	2114      	movs	r1, #20
 800345c:	2001      	movs	r0, #1
 800345e:	f001 fba1 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("Y-Angle:", &Font_7x10, 1);
 8003462:	4940      	ldr	r1, [pc, #256]	; (8003564 <UpdateDisplay+0x188>)
 8003464:	4b44      	ldr	r3, [pc, #272]	; (8003578 <UpdateDisplay+0x19c>)
 8003466:	2201      	movs	r2, #1
 8003468:	0018      	movs	r0, r3
 800346a:	f001 fc35 	bl	8004cd8 <SSD1306_Puts>
    sprintf(buffer, "%.2f", gy);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fdc4 	bl	8002ffc <__aeabi_f2d>
 8003474:	0002      	movs	r2, r0
 8003476:	000b      	movs	r3, r1
 8003478:	493e      	ldr	r1, [pc, #248]	; (8003574 <UpdateDisplay+0x198>)
 800347a:	1938      	adds	r0, r7, r4
 800347c:	f003 ff28 	bl	80072d0 <siprintf>
    SSD1306_GotoXY(60, 20);
 8003480:	2114      	movs	r1, #20
 8003482:	203c      	movs	r0, #60	; 0x3c
 8003484:	f001 fb8e 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 8003488:	4936      	ldr	r1, [pc, #216]	; (8003564 <UpdateDisplay+0x188>)
 800348a:	193b      	adds	r3, r7, r4
 800348c:	2201      	movs	r2, #1
 800348e:	0018      	movs	r0, r3
 8003490:	f001 fc22 	bl	8004cd8 <SSD1306_Puts>

    SSD1306_GotoXY(1, 30);
 8003494:	211e      	movs	r1, #30
 8003496:	2001      	movs	r0, #1
 8003498:	f001 fb84 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("Temp:", &Font_7x10, 1);
 800349c:	4931      	ldr	r1, [pc, #196]	; (8003564 <UpdateDisplay+0x188>)
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <UpdateDisplay+0x1a0>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	0018      	movs	r0, r3
 80034a4:	f001 fc18 	bl	8004cd8 <SSD1306_Puts>
    sprintf(buffer, "%.2f", temperature);
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f7ff fda7 	bl	8002ffc <__aeabi_f2d>
 80034ae:	0002      	movs	r2, r0
 80034b0:	000b      	movs	r3, r1
 80034b2:	4930      	ldr	r1, [pc, #192]	; (8003574 <UpdateDisplay+0x198>)
 80034b4:	1938      	adds	r0, r7, r4
 80034b6:	f003 ff0b 	bl	80072d0 <siprintf>
    SSD1306_GotoXY(40,30 );
 80034ba:	211e      	movs	r1, #30
 80034bc:	2028      	movs	r0, #40	; 0x28
 80034be:	f001 fb71 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 80034c2:	4928      	ldr	r1, [pc, #160]	; (8003564 <UpdateDisplay+0x188>)
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	2201      	movs	r2, #1
 80034c8:	0018      	movs	r0, r3
 80034ca:	f001 fc05 	bl	8004cd8 <SSD1306_Puts>
    SSD1306_GotoXY(75, 30);
 80034ce:	211e      	movs	r1, #30
 80034d0:	204b      	movs	r0, #75	; 0x4b
 80034d2:	f001 fb67 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("C", &Font_7x10, 1);
 80034d6:	4923      	ldr	r1, [pc, #140]	; (8003564 <UpdateDisplay+0x188>)
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <UpdateDisplay+0x1a4>)
 80034da:	2201      	movs	r2, #1
 80034dc:	0018      	movs	r0, r3
 80034de:	f001 fbfb 	bl	8004cd8 <SSD1306_Puts>

    SSD1306_GotoXY(1, 40);
 80034e2:	2128      	movs	r1, #40	; 0x28
 80034e4:	2001      	movs	r0, #1
 80034e6:	f001 fb5d 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("Km/h:", &Font_7x10, 1);
 80034ea:	491e      	ldr	r1, [pc, #120]	; (8003564 <UpdateDisplay+0x188>)
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <UpdateDisplay+0x1a8>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	0018      	movs	r0, r3
 80034f2:	f001 fbf1 	bl	8004cd8 <SSD1306_Puts>
    sprintf(buffer, "%.2f", speedKmH);
 80034f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80034f8:	f7ff fd80 	bl	8002ffc <__aeabi_f2d>
 80034fc:	0002      	movs	r2, r0
 80034fe:	000b      	movs	r3, r1
 8003500:	491c      	ldr	r1, [pc, #112]	; (8003574 <UpdateDisplay+0x198>)
 8003502:	1938      	adds	r0, r7, r4
 8003504:	f003 fee4 	bl	80072d0 <siprintf>
    SSD1306_GotoXY(60, 40);
 8003508:	2128      	movs	r1, #40	; 0x28
 800350a:	203c      	movs	r0, #60	; 0x3c
 800350c:	f001 fb4a 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 8003510:	4914      	ldr	r1, [pc, #80]	; (8003564 <UpdateDisplay+0x188>)
 8003512:	193b      	adds	r3, r7, r4
 8003514:	2201      	movs	r2, #1
 8003516:	0018      	movs	r0, r3
 8003518:	f001 fbde 	bl	8004cd8 <SSD1306_Puts>

    SSD1306_GotoXY(1, 50);
 800351c:	2132      	movs	r1, #50	; 0x32
 800351e:	2001      	movs	r0, #1
 8003520:	f001 fb40 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts("Voltage", &Font_7x10, 1);
 8003524:	490f      	ldr	r1, [pc, #60]	; (8003564 <UpdateDisplay+0x188>)
 8003526:	4b18      	ldr	r3, [pc, #96]	; (8003588 <UpdateDisplay+0x1ac>)
 8003528:	2201      	movs	r2, #1
 800352a:	0018      	movs	r0, r3
 800352c:	f001 fbd4 	bl	8004cd8 <SSD1306_Puts>
    sprintf(buffer, "%.2f", battery_voltage);
 8003530:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003532:	f7ff fd63 	bl	8002ffc <__aeabi_f2d>
 8003536:	0002      	movs	r2, r0
 8003538:	000b      	movs	r3, r1
 800353a:	490e      	ldr	r1, [pc, #56]	; (8003574 <UpdateDisplay+0x198>)
 800353c:	1938      	adds	r0, r7, r4
 800353e:	f003 fec7 	bl	80072d0 <siprintf>
    SSD1306_GotoXY(60, 50);
 8003542:	2132      	movs	r1, #50	; 0x32
 8003544:	203c      	movs	r0, #60	; 0x3c
 8003546:	f001 fb2d 	bl	8004ba4 <SSD1306_GotoXY>
    SSD1306_Puts(buffer, &Font_7x10, 1);
 800354a:	4906      	ldr	r1, [pc, #24]	; (8003564 <UpdateDisplay+0x188>)
 800354c:	193b      	adds	r3, r7, r4
 800354e:	2201      	movs	r2, #1
 8003550:	0018      	movs	r0, r3
 8003552:	f001 fbc1 	bl	8004cd8 <SSD1306_Puts>
    // Update the screen
    SSD1306_UpdateScreen();
 8003556:	f001 fa69 	bl	8004a2c <SSD1306_UpdateScreen>
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b00d      	add	sp, #52	; 0x34
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000000 	.word	0x20000000
 8003568:	08009e90 	.word	0x08009e90
 800356c:	08009e98 	.word	0x08009e98
 8003570:	08009e9c 	.word	0x08009e9c
 8003574:	08009ea8 	.word	0x08009ea8
 8003578:	08009eb0 	.word	0x08009eb0
 800357c:	08009ebc 	.word	0x08009ebc
 8003580:	08009ec4 	.word	0x08009ec4
 8003584:	08009ec8 	.word	0x08009ec8
 8003588:	08009ed0 	.word	0x08009ed0

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	0002      	movs	r2, r0
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b7f      	cmp	r3, #127	; 0x7f
 800359e:	d809      	bhi.n	80035b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	001a      	movs	r2, r3
 80035a6:	231f      	movs	r3, #31
 80035a8:	401a      	ands	r2, r3
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <__NVIC_EnableIRQ+0x30>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	4091      	lsls	r1, r2
 80035b0:	000a      	movs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
  }
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	e000e100 	.word	0xe000e100

080035c0 <CalculatePWMFromRPM>:
volatile float rpmMeasurements[MOVING_AVERAGE_SIZE] = {0.0f};
volatile uint8_t rpmMeasurementIndex = 0;

float CalculateMovingAverage(void);

int CalculatePWMFromRPM(float rpm) {
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
    float a = -0.04f, b = 19.36f, c = -581.43f - rpm;
 80035c8:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <CalculatePWMFromRPM+0x128>)
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <CalculatePWMFromRPM+0x12c>)
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4847      	ldr	r0, [pc, #284]	; (80036f0 <CalculatePWMFromRPM+0x130>)
 80035d4:	f7fd fc5a 	bl	8000e8c <__aeabi_fsub>
 80035d8:	1c03      	adds	r3, r0, #0
 80035da:	617b      	str	r3, [r7, #20]
    float discriminant = b*b - 4*a*c;
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	69b8      	ldr	r0, [r7, #24]
 80035e0:	f7fd fb06 	bl	8000bf0 <__aeabi_fmul>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	1c1c      	adds	r4, r3, #0
 80035e8:	2181      	movs	r1, #129	; 0x81
 80035ea:	05c9      	lsls	r1, r1, #23
 80035ec:	69f8      	ldr	r0, [r7, #28]
 80035ee:	f7fd faff 	bl	8000bf0 <__aeabi_fmul>
 80035f2:	1c03      	adds	r3, r0, #0
 80035f4:	6979      	ldr	r1, [r7, #20]
 80035f6:	1c18      	adds	r0, r3, #0
 80035f8:	f7fd fafa 	bl	8000bf0 <__aeabi_fmul>
 80035fc:	1c03      	adds	r3, r0, #0
 80035fe:	1c19      	adds	r1, r3, #0
 8003600:	1c20      	adds	r0, r4, #0
 8003602:	f7fd fc43 	bl	8000e8c <__aeabi_fsub>
 8003606:	1c03      	adds	r3, r0, #0
 8003608:	613b      	str	r3, [r7, #16]
    if (discriminant < 0) return -1; // No real solution
 800360a:	2100      	movs	r1, #0
 800360c:	6938      	ldr	r0, [r7, #16]
 800360e:	f7fc ff5d 	bl	80004cc <__aeabi_fcmplt>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d002      	beq.n	800361c <CalculatePWMFromRPM+0x5c>
 8003616:	2301      	movs	r3, #1
 8003618:	425b      	negs	r3, r3
 800361a:	e060      	b.n	80036de <CalculatePWMFromRPM+0x11e>

    float pwm1 = (-b + sqrtf(discriminant)) / (2*a);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1c18      	adds	r0, r3, #0
 8003620:	f006 f9fe 	bl	8009a20 <sqrtf>
 8003624:	1c03      	adds	r3, r0, #0
 8003626:	69b9      	ldr	r1, [r7, #24]
 8003628:	1c18      	adds	r0, r3, #0
 800362a:	f7fd fc2f 	bl	8000e8c <__aeabi_fsub>
 800362e:	1c03      	adds	r3, r0, #0
 8003630:	1c1c      	adds	r4, r3, #0
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	1c19      	adds	r1, r3, #0
 8003636:	1c18      	adds	r0, r3, #0
 8003638:	f7fc ff70 	bl	800051c <__aeabi_fadd>
 800363c:	1c03      	adds	r3, r0, #0
 800363e:	1c19      	adds	r1, r3, #0
 8003640:	1c20      	adds	r0, r4, #0
 8003642:	f7fd f90b 	bl	800085c <__aeabi_fdiv>
 8003646:	1c03      	adds	r3, r0, #0
 8003648:	60fb      	str	r3, [r7, #12]
    float pwm2 = (-b - sqrtf(discriminant)) / (2*a);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	0612      	lsls	r2, r2, #24
 8003650:	405a      	eors	r2, r3
 8003652:	0014      	movs	r4, r2
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1c18      	adds	r0, r3, #0
 8003658:	f006 f9e2 	bl	8009a20 <sqrtf>
 800365c:	1c03      	adds	r3, r0, #0
 800365e:	1c19      	adds	r1, r3, #0
 8003660:	1c20      	adds	r0, r4, #0
 8003662:	f7fd fc13 	bl	8000e8c <__aeabi_fsub>
 8003666:	1c03      	adds	r3, r0, #0
 8003668:	1c1c      	adds	r4, r3, #0
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	1c19      	adds	r1, r3, #0
 800366e:	1c18      	adds	r0, r3, #0
 8003670:	f7fc ff54 	bl	800051c <__aeabi_fadd>
 8003674:	1c03      	adds	r3, r0, #0
 8003676:	1c19      	adds	r1, r3, #0
 8003678:	1c20      	adds	r0, r4, #0
 800367a:	f7fd f8ef 	bl	800085c <__aeabi_fdiv>
 800367e:	1c03      	adds	r3, r0, #0
 8003680:	60bb      	str	r3, [r7, #8]

    // Select the valid PWM value within the range [25, MaxPWMValue]
    if (pwm1 >= 25 && pwm1 <= MaxPWMValue) {
 8003682:	491c      	ldr	r1, [pc, #112]	; (80036f4 <CalculatePWMFromRPM+0x134>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7fc ff3f 	bl	8000508 <__aeabi_fcmpge>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d00f      	beq.n	80036ae <CalculatePWMFromRPM+0xee>
 800368e:	2350      	movs	r3, #80	; 0x50
 8003690:	0018      	movs	r0, r3
 8003692:	f7fd fe23 	bl	80012dc <__aeabi_ui2f>
 8003696:	1c03      	adds	r3, r0, #0
 8003698:	1c19      	adds	r1, r3, #0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7fc ff20 	bl	80004e0 <__aeabi_fcmple>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d004      	beq.n	80036ae <CalculatePWMFromRPM+0xee>
        return (int)pwm1;
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7fd fda7 	bl	80011f8 <__aeabi_f2iz>
 80036aa:	0003      	movs	r3, r0
 80036ac:	e017      	b.n	80036de <CalculatePWMFromRPM+0x11e>
    } else if (pwm2 >= 25 && pwm2 <= MaxPWMValue) {
 80036ae:	4911      	ldr	r1, [pc, #68]	; (80036f4 <CalculatePWMFromRPM+0x134>)
 80036b0:	68b8      	ldr	r0, [r7, #8]
 80036b2:	f7fc ff29 	bl	8000508 <__aeabi_fcmpge>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d00f      	beq.n	80036da <CalculatePWMFromRPM+0x11a>
 80036ba:	2350      	movs	r3, #80	; 0x50
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd fe0d 	bl	80012dc <__aeabi_ui2f>
 80036c2:	1c03      	adds	r3, r0, #0
 80036c4:	1c19      	adds	r1, r3, #0
 80036c6:	68b8      	ldr	r0, [r7, #8]
 80036c8:	f7fc ff0a 	bl	80004e0 <__aeabi_fcmple>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d004      	beq.n	80036da <CalculatePWMFromRPM+0x11a>
        return (int)pwm2;
 80036d0:	68b8      	ldr	r0, [r7, #8]
 80036d2:	f7fd fd91 	bl	80011f8 <__aeabi_f2iz>
 80036d6:	0003      	movs	r3, r0
 80036d8:	e001      	b.n	80036de <CalculatePWMFromRPM+0x11e>
    }
    return -1; // No valid PWM in range
 80036da:	2301      	movs	r3, #1
 80036dc:	425b      	negs	r3, r3
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b009      	add	sp, #36	; 0x24
 80036e4:	bd90      	pop	{r4, r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	bd23d70a 	.word	0xbd23d70a
 80036ec:	419ae148 	.word	0x419ae148
 80036f0:	c4115b85 	.word	0xc4115b85
 80036f4:	41c80000 	.word	0x41c80000

080036f8 <setupTimer1PWM>:


// Setup TIM1 for PWM
void setupTimer1PWM(void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 11); // Enable TIM1 clock
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <setupTimer1PWM+0x8c>)
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <setupTimer1PWM+0x8c>)
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	0109      	lsls	r1, r1, #4
 8003706:	430a      	orrs	r2, r1
 8003708:	619a      	str	r2, [r3, #24]
    TIM1->ARR = 79; // Set auto-reload value for 100kHz PWM frequency
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <setupTimer1PWM+0x90>)
 800370c:	224f      	movs	r2, #79	; 0x4f
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM1->CCR2 = 25; // Set duty cycle for channel 2
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <setupTimer1PWM+0x90>)
 8003712:	2219      	movs	r2, #25
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCMR1 |= (0b110 << 12); // Set PWM mode 1 for channel 2
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <setupTimer1PWM+0x90>)
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <setupTimer1PWM+0x90>)
 800371c:	21c0      	movs	r1, #192	; 0xc0
 800371e:	01c9      	lsls	r1, r1, #7
 8003720:	430a      	orrs	r2, r1
 8003722:	619a      	str	r2, [r3, #24]
    TIM1->CCMR1 |= (1 << 11); // Enable preload for channel 2
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <setupTimer1PWM+0x90>)
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b17      	ldr	r3, [pc, #92]	; (8003788 <setupTimer1PWM+0x90>)
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	0109      	lsls	r1, r1, #4
 800372e:	430a      	orrs	r2, r1
 8003730:	619a      	str	r2, [r3, #24]
    TIM1->CCER |= (1 << 4); // Enable channel 2 output
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <setupTimer1PWM+0x90>)
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <setupTimer1PWM+0x90>)
 8003738:	2110      	movs	r1, #16
 800373a:	430a      	orrs	r2, r1
 800373c:	621a      	str	r2, [r3, #32]
    TIM1->BDTR |= (1 << 15); // Main output enable
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <setupTimer1PWM+0x90>)
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <setupTimer1PWM+0x90>)
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	430a      	orrs	r2, r1
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->CR1 |= (1 << 7); // Enable auto-reload preload
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <setupTimer1PWM+0x90>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <setupTimer1PWM+0x90>)
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
    TIM1->CR1 &= ~(0x3 << 5); // Set edge-aligned mode
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <setupTimer1PWM+0x90>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <setupTimer1PWM+0x90>)
 800375e:	2160      	movs	r1, #96	; 0x60
 8003760:	438a      	bics	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
    TIM1->CR1 &= ~(1 << 4); // Set up-counting mode
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <setupTimer1PWM+0x90>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <setupTimer1PWM+0x90>)
 800376a:	2110      	movs	r1, #16
 800376c:	438a      	bics	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
    TIM1->CR1 |= (1 << 0); // Enable counter
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <setupTimer1PWM+0x90>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <setupTimer1PWM+0x90>)
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	40021000 	.word	0x40021000
 8003788:	40012c00 	.word	0x40012c00

0800378c <StartRPMMeasurement>:
// Function to start the RPM measurement
void StartRPMMeasurement(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
    count = 0;  // Reset pulse count
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <StartRPMMeasurement+0x1c>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    startTime = HAL_GetTick();  // Get the current time in milliseconds
 8003796:	f001 fd5b 	bl	8005250 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <StartRPMMeasurement+0x20>)
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	200002b8 	.word	0x200002b8
 80037ac:	200002bc 	.word	0x200002bc

080037b0 <CalculateRPM>:

// Function to calculate RPM
float CalculateRPM(void) {
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 80037b6:	f001 fd4b 	bl	8005250 <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	60fb      	str	r3, [r7, #12]
    uint32_t elapsedTime = currentTime - startTime;
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <CalculateRPM+0xb0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	60bb      	str	r3, [r7, #8]

    if (elapsedTime >= 0.1) { // Example interval
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d041      	beq.n	8003852 <CalculateRPM+0xa2>
        float calculatedRPM = ((float)count / pulses_per_revolution) * 60.0f * 1000.0f / elapsedTime;
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <CalculateRPM+0xb4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7fd fd82 	bl	80012dc <__aeabi_ui2f>
 80037d8:	1c04      	adds	r4, r0, #0
 80037da:	230f      	movs	r3, #15
 80037dc:	0018      	movs	r0, r3
 80037de:	f7fd fd7d 	bl	80012dc <__aeabi_ui2f>
 80037e2:	1c03      	adds	r3, r0, #0
 80037e4:	1c19      	adds	r1, r3, #0
 80037e6:	1c20      	adds	r0, r4, #0
 80037e8:	f7fd f838 	bl	800085c <__aeabi_fdiv>
 80037ec:	1c03      	adds	r3, r0, #0
 80037ee:	491e      	ldr	r1, [pc, #120]	; (8003868 <CalculateRPM+0xb8>)
 80037f0:	1c18      	adds	r0, r3, #0
 80037f2:	f7fd f9fd 	bl	8000bf0 <__aeabi_fmul>
 80037f6:	1c03      	adds	r3, r0, #0
 80037f8:	491c      	ldr	r1, [pc, #112]	; (800386c <CalculateRPM+0xbc>)
 80037fa:	1c18      	adds	r0, r3, #0
 80037fc:	f7fd f9f8 	bl	8000bf0 <__aeabi_fmul>
 8003800:	1c03      	adds	r3, r0, #0
 8003802:	1c1c      	adds	r4, r3, #0
 8003804:	68b8      	ldr	r0, [r7, #8]
 8003806:	f7fd fd69 	bl	80012dc <__aeabi_ui2f>
 800380a:	1c03      	adds	r3, r0, #0
 800380c:	1c19      	adds	r1, r3, #0
 800380e:	1c20      	adds	r0, r4, #0
 8003810:	f7fd f824 	bl	800085c <__aeabi_fdiv>
 8003814:	1c03      	adds	r3, r0, #0
 8003816:	607b      	str	r3, [r7, #4]
        rpmMeasurements[rpmMeasurementIndex] = calculatedRPM;
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <CalculateRPM+0xc0>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	001a      	movs	r2, r3
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <CalculateRPM+0xc4>)
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	50d1      	str	r1, [r2, r3]
        rpmMeasurementIndex = (rpmMeasurementIndex + 1) % MOVING_AVERAGE_SIZE;
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <CalculateRPM+0xc0>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3301      	adds	r3, #1
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <CalculateRPM+0xc8>)
 8003832:	4013      	ands	r3, r2
 8003834:	d504      	bpl.n	8003840 <CalculateRPM+0x90>
 8003836:	3b01      	subs	r3, #1
 8003838:	2202      	movs	r2, #2
 800383a:	4252      	negs	r2, r2
 800383c:	4313      	orrs	r3, r2
 800383e:	3301      	adds	r3, #1
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <CalculateRPM+0xc0>)
 8003844:	701a      	strb	r2, [r3, #0]

        StartRPMMeasurement();
 8003846:	f7ff ffa1 	bl	800378c <StartRPMMeasurement>
        return CalculateMovingAverage(); // Calculate and return the average RPM
 800384a:	f000 f819 	bl	8003880 <CalculateMovingAverage>
 800384e:	1c03      	adds	r3, r0, #0
 8003850:	e001      	b.n	8003856 <CalculateRPM+0xa6>
    }
    return rpm; // Return the last calculated RPM
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <CalculateRPM+0xcc>)
 8003854:	681b      	ldr	r3, [r3, #0]
}
 8003856:	1c18      	adds	r0, r3, #0
 8003858:	46bd      	mov	sp, r7
 800385a:	b005      	add	sp, #20
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	200002bc 	.word	0x200002bc
 8003864:	200002b8 	.word	0x200002b8
 8003868:	42700000 	.word	0x42700000
 800386c:	447a0000 	.word	0x447a0000
 8003870:	200002d0 	.word	0x200002d0
 8003874:	200002c8 	.word	0x200002c8
 8003878:	80000001 	.word	0x80000001
 800387c:	200002b4 	.word	0x200002b4

08003880 <CalculateMovingAverage>:


float CalculateMovingAverage(void) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < MOVING_AVERAGE_SIZE; i++) {
 800388a:	1cfb      	adds	r3, r7, #3
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e00f      	b.n	80038b2 <CalculateMovingAverage+0x32>
        sum += rpmMeasurements[i];
 8003892:	1cfb      	adds	r3, r7, #3
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <CalculateMovingAverage+0x50>)
 8003898:	0092      	lsls	r2, r2, #2
 800389a:	58d3      	ldr	r3, [r2, r3]
 800389c:	1c19      	adds	r1, r3, #0
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fc fe3c 	bl	800051c <__aeabi_fadd>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < MOVING_AVERAGE_SIZE; i++) {
 80038a8:	1cfb      	adds	r3, r7, #3
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	1cfb      	adds	r3, r7, #3
 80038ae:	3201      	adds	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	1cfb      	adds	r3, r7, #3
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d9eb      	bls.n	8003892 <CalculateMovingAverage+0x12>
    }
    return sum / MOVING_AVERAGE_SIZE;
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	05c9      	lsls	r1, r1, #23
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fc ffcc 	bl	800085c <__aeabi_fdiv>
 80038c4:	1c03      	adds	r3, r0, #0
}
 80038c6:	1c18      	adds	r0, r3, #0
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	200002c8 	.word	0x200002c8

080038d4 <initGPIO>:


// Initialize GPIOs
void initGPIO(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= (1 << 17); // Enable GPIOA clock
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <initGPIO+0x134>)
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <initGPIO+0x134>)
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	0289      	lsls	r1, r1, #10
 80038e2:	430a      	orrs	r2, r1
 80038e4:	615a      	str	r2, [r3, #20]
    GPIOA->MODER |= (2 << 18); // Set PA9 to alternate function
 80038e6:	2390      	movs	r3, #144	; 0x90
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2390      	movs	r3, #144	; 0x90
 80038ee:	05db      	lsls	r3, r3, #23
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	0309      	lsls	r1, r1, #12
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[1] |= (2 << 4); // Set AF2 (TIM1_CH2) for PA9
 80038f8:	2390      	movs	r3, #144	; 0x90
 80038fa:	05db      	lsls	r3, r3, #23
 80038fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038fe:	2390      	movs	r3, #144	; 0x90
 8003900:	05db      	lsls	r3, r3, #23
 8003902:	2120      	movs	r1, #32
 8003904:	430a      	orrs	r2, r1
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
    // Configure PA12 and PA14 as input
    GPIOA->MODER &= ~(3 << (2 * 2)); // Set PA12 to input mode
 8003908:	2390      	movs	r3, #144	; 0x90
 800390a:	05db      	lsls	r3, r3, #23
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2390      	movs	r3, #144	; 0x90
 8003910:	05db      	lsls	r3, r3, #23
 8003912:	2130      	movs	r1, #48	; 0x30
 8003914:	438a      	bics	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(3 << (14 * 2)); // Set PA14 to input mode
 8003918:	2390      	movs	r3, #144	; 0x90
 800391a:	05db      	lsls	r3, r3, #23
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	2390      	movs	r3, #144	; 0x90
 8003920:	05db      	lsls	r3, r3, #23
 8003922:	493a      	ldr	r1, [pc, #232]	; (8003a0c <initGPIO+0x138>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

    GPIOA->MODER &= ~(GPIO_MODER_MODER0);  // Set PA0 as alternate function
 8003928:	2390      	movs	r3, #144	; 0x90
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	2390      	movs	r3, #144	; 0x90
 8003930:	05db      	lsls	r3, r3, #23
 8003932:	2103      	movs	r1, #3
 8003934:	438a      	bics	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1 << 1);
 8003938:	2390      	movs	r3, #144	; 0x90
 800393a:	05db      	lsls	r3, r3, #23
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	2390      	movs	r3, #144	; 0x90
 8003940:	05db      	lsls	r3, r3, #23
 8003942:	2102      	movs	r1, #2
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR &= ~(1 << 0);
 8003948:	2390      	movs	r3, #144	; 0x90
 800394a:	05db      	lsls	r3, r3, #23
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	2390      	movs	r3, #144	; 0x90
 8003950:	05db      	lsls	r3, r3, #23
 8003952:	2101      	movs	r1, #1
 8003954:	438a      	bics	r2, r1
 8003956:	60da      	str	r2, [r3, #12]
    GPIOA->AFR[0] |= (1 << 1);  // Set alternate function for PA0 to connect with TIM2
 8003958:	2390      	movs	r3, #144	; 0x90
 800395a:	05db      	lsls	r3, r3, #23
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	2390      	movs	r3, #144	; 0x90
 8003960:	05db      	lsls	r3, r3, #23
 8003962:	2102      	movs	r1, #2
 8003964:	430a      	orrs	r2, r1
 8003966:	621a      	str	r2, [r3, #32]


    RCC->AHBENR |= (1 << 18); // Enable GPIOB clock
 8003968:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <initGPIO+0x134>)
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <initGPIO+0x134>)
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	02c9      	lsls	r1, r1, #11
 8003972:	430a      	orrs	r2, r1
 8003974:	615a      	str	r2, [r3, #20]
    GPIOB->MODER &= ~(3 << (11 * 2)); // Set PB11 to input mode
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <initGPIO+0x13c>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <initGPIO+0x13c>)
 800397c:	4925      	ldr	r1, [pc, #148]	; (8003a14 <initGPIO+0x140>)
 800397e:	400a      	ands	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(3 << (12 * 2)); // Set PB12 to input mode
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <initGPIO+0x13c>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <initGPIO+0x13c>)
 8003988:	4923      	ldr	r1, [pc, #140]	; (8003a18 <initGPIO+0x144>)
 800398a:	400a      	ands	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

    // Configure PC0, PC1, and PC2 for ADC operation
    RCC->AHBENR |= (1 << 19); // Enable GPIOC clock
 800398e:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <initGPIO+0x134>)
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <initGPIO+0x134>)
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	0309      	lsls	r1, r1, #12
 8003998:	430a      	orrs	r2, r1
 800399a:	615a      	str	r2, [r3, #20]
    GPIOC->MODER |= (3 << (0 * 2)); // Set PC0 to analog mode
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <initGPIO+0x148>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <initGPIO+0x148>)
 80039a2:	2103      	movs	r1, #3
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (3 << (1 * 2)); // Set PC1 to analog mode
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <initGPIO+0x148>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <initGPIO+0x148>)
 80039ae:	210c      	movs	r1, #12
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (3 << (2 * 2)); // Set PC2 to analog mode
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <initGPIO+0x148>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <initGPIO+0x148>)
 80039ba:	2130      	movs	r1, #48	; 0x30
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

    // Initialize GPIO for Buzzer on PA1
    GPIOA->MODER |= (1 << 2);  // Set PA1 as output
 80039c0:	2390      	movs	r3, #144	; 0x90
 80039c2:	05db      	lsls	r3, r3, #23
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	2390      	movs	r3, #144	; 0x90
 80039c8:	05db      	lsls	r3, r3, #23
 80039ca:	2104      	movs	r1, #4
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
    GPIOA->OTYPER &= ~(1 << 1);  // Set PA1 as push-pull
 80039d0:	2390      	movs	r3, #144	; 0x90
 80039d2:	05db      	lsls	r3, r3, #23
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	2390      	movs	r3, #144	; 0x90
 80039d8:	05db      	lsls	r3, r3, #23
 80039da:	2102      	movs	r1, #2
 80039dc:	438a      	bics	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
    GPIOA->OSPEEDR &= ~(3 << 2);  // Set low speed for PA1
 80039e0:	2390      	movs	r3, #144	; 0x90
 80039e2:	05db      	lsls	r3, r3, #23
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	2390      	movs	r3, #144	; 0x90
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	210c      	movs	r1, #12
 80039ec:	438a      	bics	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
    GPIOA->PUPDR &= ~(3 << 2);  // No pull-up or pull-down for PA1
 80039f0:	2390      	movs	r3, #144	; 0x90
 80039f2:	05db      	lsls	r3, r3, #23
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	2390      	movs	r3, #144	; 0x90
 80039f8:	05db      	lsls	r3, r3, #23
 80039fa:	210c      	movs	r1, #12
 80039fc:	438a      	bics	r2, r1
 80039fe:	60da      	str	r2, [r3, #12]
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	cfffffff 	.word	0xcfffffff
 8003a10:	48000400 	.word	0x48000400
 8003a14:	ff3fffff 	.word	0xff3fffff
 8003a18:	fcffffff 	.word	0xfcffffff
 8003a1c:	48000800 	.word	0x48000800

08003a20 <initRotaryEncoder>:

// Initialize rotary encoder
void initRotaryEncoder(void) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 0); // Enable SYSCFG clock
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <initRotaryEncoder+0x48>)
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <initRotaryEncoder+0x48>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	619a      	str	r2, [r3, #24]
    SYSCFG->EXTICR[2] |= (1 << 12); // Connect EXTI11 to PB11
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <initRotaryEncoder+0x4c>)
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <initRotaryEncoder+0x4c>)
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	0149      	lsls	r1, r1, #5
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	611a      	str	r2, [r3, #16]
    EXTI->RTSR |= (1 << 11); // Enable rising edge trigger for EXTI11
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <initRotaryEncoder+0x50>)
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <initRotaryEncoder+0x50>)
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	0109      	lsls	r1, r1, #4
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
    EXTI->IMR |= (1 << 11); // Enable EXTI11 interrupt
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <initRotaryEncoder+0x50>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <initRotaryEncoder+0x50>)
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	0109      	lsls	r1, r1, #4
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(EXTI4_15_IRQn); // Enable EXTI4 to EXTI15 interrupt in NVIC
 8003a5a:	2007      	movs	r0, #7
 8003a5c:	f7ff fd96 	bl	800358c <__NVIC_EnableIRQ>
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40010400 	.word	0x40010400

08003a74 <EXTI4_15_IRQHandler>:

// IRQ handler for EXTI4 to EXTI15
void EXTI4_15_IRQHandler(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
    static uint8_t lastState = 0;

    // Read the current state of the encoder pins
    uint8_t currentState = ((GPIOB->IDR & (1 << 11)) >> 11) |
 8003a7a:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <EXTI4_15_IRQHandler+0x10c>)
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2201      	movs	r2, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	b2d9      	uxtb	r1, r3
                           ((GPIOB->IDR & (1 << 12)) >> (12 - 1));
 8003a88:	4b3d      	ldr	r3, [pc, #244]	; (8003b80 <EXTI4_15_IRQHandler+0x10c>)
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	0adb      	lsrs	r3, r3, #11
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2202      	movs	r2, #2
 8003a92:	4013      	ands	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
    uint8_t currentState = ((GPIOB->IDR & (1 << 11)) >> 11) |
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	701a      	strb	r2, [r3, #0]

    // Determine rotation direction based on state transition
    if ((lastState == 0b01 && currentState == 0b11) ||
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d103      	bne.n	8003aac <EXTI4_15_IRQHandler+0x38>
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d017      	beq.n	8003adc <EXTI4_15_IRQHandler+0x68>
        (lastState == 0b11 && currentState == 0b10) ||
 8003aac:	4b35      	ldr	r3, [pc, #212]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
    if ((lastState == 0b01 && currentState == 0b11) ||
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d103      	bne.n	8003abc <EXTI4_15_IRQHandler+0x48>
        (lastState == 0b11 && currentState == 0b10) ||
 8003ab4:	1dfb      	adds	r3, r7, #7
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d00f      	beq.n	8003adc <EXTI4_15_IRQHandler+0x68>
        (lastState == 0b10 && currentState == 0b00) ||
 8003abc:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
        (lastState == 0b11 && currentState == 0b10) ||
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d103      	bne.n	8003acc <EXTI4_15_IRQHandler+0x58>
        (lastState == 0b10 && currentState == 0b00) ||
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <EXTI4_15_IRQHandler+0x68>
        (lastState == 0b00 && currentState == 0b01)) {
 8003acc:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
        (lastState == 0b10 && currentState == 0b00) ||
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10c      	bne.n	8003aee <EXTI4_15_IRQHandler+0x7a>
        (lastState == 0b00 && currentState == 0b01)) {
 8003ad4:	1dfb      	adds	r3, r7, #7
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d108      	bne.n	8003aee <EXTI4_15_IRQHandler+0x7a>
        // Clockwise rotation
        targetPWM += PWMAdjustmentStep;
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e027      	b.n	8003b3e <EXTI4_15_IRQHandler+0xca>
    } else if ((lastState == 0b00 && currentState == 0b10) ||
 8003aee:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <EXTI4_15_IRQHandler+0x8a>
 8003af6:	1dfb      	adds	r3, r7, #7
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d017      	beq.n	8003b2e <EXTI4_15_IRQHandler+0xba>
               (lastState == 0b10 && currentState == 0b11) ||
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
    } else if ((lastState == 0b00 && currentState == 0b10) ||
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d103      	bne.n	8003b0e <EXTI4_15_IRQHandler+0x9a>
               (lastState == 0b10 && currentState == 0b11) ||
 8003b06:	1dfb      	adds	r3, r7, #7
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d00f      	beq.n	8003b2e <EXTI4_15_IRQHandler+0xba>
               (lastState == 0b11 && currentState == 0b01) ||
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
               (lastState == 0b10 && currentState == 0b11) ||
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d103      	bne.n	8003b1e <EXTI4_15_IRQHandler+0xaa>
               (lastState == 0b11 && currentState == 0b01) ||
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d007      	beq.n	8003b2e <EXTI4_15_IRQHandler+0xba>
               (lastState == 0b01 && currentState == 0b00)) {
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
               (lastState == 0b11 && currentState == 0b01) ||
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d10b      	bne.n	8003b3e <EXTI4_15_IRQHandler+0xca>
               (lastState == 0b01 && currentState == 0b00)) {
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <EXTI4_15_IRQHandler+0xca>
        // Counter-clockwise rotation
        targetPWM -= PWMAdjustmentStep;
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	001a      	movs	r2, r3
 8003b34:	2301      	movs	r3, #1
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	001a      	movs	r2, r3
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003b3c:	601a      	str	r2, [r3, #0]
    }

    // Update last state
    lastState = currentState;
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <EXTI4_15_IRQHandler+0x110>)
 8003b40:	1dfa      	adds	r2, r7, #7
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]

    // Clamp the targetPWM within valid range
    if (targetPWM < 25) targetPWM = 25;
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b18      	cmp	r3, #24
 8003b4c:	dc02      	bgt.n	8003b54 <EXTI4_15_IRQHandler+0xe0>
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003b50:	2219      	movs	r2, #25
 8003b52:	601a      	str	r2, [r3, #0]
    if (targetPWM > MaxPWMValue) targetPWM = MaxPWMValue;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	001a      	movs	r2, r3
 8003b5a:	2350      	movs	r3, #80	; 0x50
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d903      	bls.n	8003b68 <EXTI4_15_IRQHandler+0xf4>
 8003b60:	2350      	movs	r3, #80	; 0x50
 8003b62:	001a      	movs	r2, r3
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <EXTI4_15_IRQHandler+0x114>)
 8003b66:	601a      	str	r2, [r3, #0]

    // Clear interrupt flags
    EXTI->PR |= (1 << 11) | (1 << 12);
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <EXTI4_15_IRQHandler+0x118>)
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <EXTI4_15_IRQHandler+0x118>)
 8003b6e:	21c0      	movs	r1, #192	; 0xc0
 8003b70:	0149      	lsls	r1, r1, #5
 8003b72:	430a      	orrs	r2, r1
 8003b74:	615a      	str	r2, [r3, #20]
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	48000400 	.word	0x48000400
 8003b84:	20000380 	.word	0x20000380
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	40010400 	.word	0x40010400

08003b90 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_CC1IF_Msk);
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	05db      	lsls	r3, r3, #23
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	05db      	lsls	r3, r3, #23
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	611a      	str	r2, [r3, #16]

	//Edge Counter
	count++;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <TIM2_IRQHandler+0x24>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <TIM2_IRQHandler+0x24>)
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200002b8 	.word	0x200002b8

08003bb8 <EnableClocks>:

void EnableClocks(void) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 0); // Enable TIM2 clock
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <EnableClocks+0x24>)
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <EnableClocks+0x24>)
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	61da      	str	r2, [r3, #28]
    RCC->AHBENR |= (1 << 17); // Enable GPIOA clock
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <EnableClocks+0x24>)
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <EnableClocks+0x24>)
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	0289      	lsls	r1, r1, #10
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <ConfigureGPIOAForTIM2>:

void ConfigureGPIOAForTIM2(void) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
    // Set PA0 as alternate function
    GPIOA->MODER &= ~(GPIO_MODER_MODER0);
 8003be4:	2390      	movs	r3, #144	; 0x90
 8003be6:	05db      	lsls	r3, r3, #23
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2390      	movs	r3, #144	; 0x90
 8003bec:	05db      	lsls	r3, r3, #23
 8003bee:	2103      	movs	r1, #3
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1 << 1);
 8003bf4:	2390      	movs	r3, #144	; 0x90
 8003bf6:	05db      	lsls	r3, r3, #23
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	2390      	movs	r3, #144	; 0x90
 8003bfc:	05db      	lsls	r3, r3, #23
 8003bfe:	2102      	movs	r1, #2
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
    GPIOA->PUPDR &= ~(1 << 0);
 8003c04:	2390      	movs	r3, #144	; 0x90
 8003c06:	05db      	lsls	r3, r3, #23
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	2390      	movs	r3, #144	; 0x90
 8003c0c:	05db      	lsls	r3, r3, #23
 8003c0e:	2101      	movs	r1, #1
 8003c10:	438a      	bics	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]

    // Set alternate function for PA0 to connect with TIM2
    GPIOA->AFR[0] |= (1 << 1);
 8003c14:	2390      	movs	r3, #144	; 0x90
 8003c16:	05db      	lsls	r3, r3, #23
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	2390      	movs	r3, #144	; 0x90
 8003c1c:	05db      	lsls	r3, r3, #23
 8003c1e:	2102      	movs	r1, #2
 8003c20:	430a      	orrs	r2, r1
 8003c22:	621a      	str	r2, [r3, #32]
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <ConfigureTIM2>:

void ConfigureTIM2(void) {
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	af00      	add	r7, sp, #0
    // Clear CCMR1 register and set CC1 channel as input
    TIM2->CCMR1 = 0;
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	05db      	lsls	r3, r3, #23
 8003c32:	2200      	movs	r2, #0
 8003c34:	619a      	str	r2, [r3, #24]
    TIM2->CCMR1 |= 1 << 0; // CC1S = 0b01 : CC1 channel configured as input, IC1 mapped on TI1
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	05db      	lsls	r3, r3, #23
 8003c40:	2101      	movs	r1, #1
 8003c42:	430a      	orrs	r2, r1
 8003c44:	619a      	str	r2, [r3, #24]
    TIM2->CCMR1 |= (0b0011 << 4); // IC1F = 0b0011 : Filter set to 8 clock cycles
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	05db      	lsls	r3, r3, #23
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	05db      	lsls	r3, r3, #23
 8003c50:	2130      	movs	r1, #48	; 0x30
 8003c52:	430a      	orrs	r2, r1
 8003c54:	619a      	str	r2, [r3, #24]

    // Clear CCER register and select rising edge trigger
    TIM2->CCER = 0;
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	05db      	lsls	r3, r3, #23
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	621a      	str	r2, [r3, #32]
    TIM2->CCER &= ~(TIM_CCER_CC1P_Msk);
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	6a1a      	ldr	r2, [r3, #32]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	05db      	lsls	r3, r3, #23
 8003c68:	2102      	movs	r1, #2
 8003c6a:	438a      	bics	r2, r1
 8003c6c:	621a      	str	r2, [r3, #32]
    TIM2->CCER |= TIM_CCER_CC1E_Msk; // Enable capture
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	05db      	lsls	r3, r3, #23
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	05db      	lsls	r3, r3, #23
 8003c78:	2101      	movs	r1, #1
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	621a      	str	r2, [r3, #32]

    TIM2->DIER |= (1 << 1); // Enable Capture/Compare interrupt
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	05db      	lsls	r3, r3, #23
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	2102      	movs	r1, #2
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	60da      	str	r2, [r3, #12]

    // Enable TIM2 interrupt in NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8003c8e:	200f      	movs	r0, #15
 8003c90:	f7ff fc7c 	bl	800358c <__NVIC_EnableIRQ>

    // Enable TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN_Msk;
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	05db      	lsls	r3, r3, #23
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <CalculateSpeedKmH>:

// Function to calculate speed in km/h from RPM
float CalculateSpeedKmH(float rpm) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    const float wheelDiameterCm = 16.0f; // Diameter of the wheel in cm
 8003cb4:	2383      	movs	r3, #131	; 0x83
 8003cb6:	05db      	lsls	r3, r3, #23
 8003cb8:	617b      	str	r3, [r7, #20]
    const float pi = 3.14159265358979323846f;
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <CalculateSpeedKmH+0x44>)
 8003cbc:	613b      	str	r3, [r7, #16]
    float circumferenceKm = (pi * wheelDiameterCm) / 100000.0f; // Circumference in km (1 cm = 0.00001 km)
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	6938      	ldr	r0, [r7, #16]
 8003cc2:	f7fc ff95 	bl	8000bf0 <__aeabi_fmul>
 8003cc6:	1c03      	adds	r3, r0, #0
 8003cc8:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <CalculateSpeedKmH+0x48>)
 8003cca:	1c18      	adds	r0, r3, #0
 8003ccc:	f7fc fdc6 	bl	800085c <__aeabi_fdiv>
 8003cd0:	1c03      	adds	r3, r0, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
    return circumferenceKm * rpm * 60.0f; // Speed in km/h
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7fc ff8a 	bl	8000bf0 <__aeabi_fmul>
 8003cdc:	1c03      	adds	r3, r0, #0
 8003cde:	4906      	ldr	r1, [pc, #24]	; (8003cf8 <CalculateSpeedKmH+0x4c>)
 8003ce0:	1c18      	adds	r0, r3, #0
 8003ce2:	f7fc ff85 	bl	8000bf0 <__aeabi_fmul>
 8003ce6:	1c03      	adds	r3, r0, #0
}
 8003ce8:	1c18      	adds	r0, r3, #0
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b006      	add	sp, #24
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40490fdb 	.word	0x40490fdb
 8003cf4:	47c35000 	.word	0x47c35000
 8003cf8:	42700000 	.word	0x42700000

08003cfc <main>:
MPU6050_t MPU6050;

static void MX_I2C1_Init(void);

int main(void)
{
 8003cfc:	b5b0      	push	{r4, r5, r7, lr}
 8003cfe:	b090      	sub	sp, #64	; 0x40
 8003d00:	af02      	add	r7, sp, #8
   uint16_t adc_value_temp, adc_value_battery, adc_value_current;
   float temperature, battery_voltage, current;

  // Call initialization functions
  initGPIO();
 8003d02:	f7ff fde7 	bl	80038d4 <initGPIO>
  setupTimer1PWM();
 8003d06:	f7ff fcf7 	bl	80036f8 <setupTimer1PWM>
  initRotaryEncoder();
 8003d0a:	f7ff fe89 	bl	8003a20 <initRotaryEncoder>
  init_ADC();
 8003d0e:	f7ff fa61 	bl	80031d4 <init_ADC>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d12:	f001 fa43 	bl	800519c <HAL_Init>

  MX_I2C1_Init();
 8003d16:	f000 f937 	bl	8003f88 <MX_I2C1_Init>
  EnableClocks();
 8003d1a:	f7ff ff4d 	bl	8003bb8 <EnableClocks>
  ConfigureGPIOAForTIM2();
 8003d1e:	f7ff ff5f 	bl	8003be0 <ConfigureGPIOAForTIM2>
  ConfigureTIM2();
 8003d22:	f7ff ff82 	bl	8003c2a <ConfigureTIM2>
  StartRPMMeasurement();
 8003d26:	f7ff fd31 	bl	800378c <StartRPMMeasurement>

  while (MPU6050_Init(&hi2c1) == 1);
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <main+0x258>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 f96f 	bl	8004012 <MPU6050_Init>
 8003d34:	0003      	movs	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d0f8      	beq.n	8003d2c <main+0x30>
  SSD1306_Init();
 8003d3a:	f000 fdb3 	bl	80048a4 <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2000      	movs	r0, #0
 8003d42:	f000 ff2f 	bl	8004ba4 <SSD1306_GotoXY>
  SSD1306_Puts ("Quinta",&Font_11x18,1);
 8003d46:	4984      	ldr	r1, [pc, #528]	; (8003f58 <main+0x25c>)
 8003d48:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <main+0x260>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 ffc3 	bl	8004cd8 <SSD1306_Puts>
  SSD1306_GotoXY (10,30);
 8003d52:	211e      	movs	r1, #30
 8003d54:	200a      	movs	r0, #10
 8003d56:	f000 ff25 	bl	8004ba4 <SSD1306_GotoXY>
  SSD1306_Puts ("Rueda",&Font_11x18,1);
 8003d5a:	497f      	ldr	r1, [pc, #508]	; (8003f58 <main+0x25c>)
 8003d5c:	4b80      	ldr	r3, [pc, #512]	; (8003f60 <main+0x264>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 ffb9 	bl	8004cd8 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8003d66:	f000 fe61 	bl	8004a2c <SSD1306_UpdateScreen>

  HAL_Delay (1000);
 8003d6a:	23fa      	movs	r3, #250	; 0xfa
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f001 fa78 	bl	8005264 <HAL_Delay>
  SSD1306_Clear();
 8003d74:	f000 ffd6 	bl	8004d24 <SSD1306_Clear>

  SSD1306_DrawBitmap(0,0,logobn,128,64,1);
 8003d78:	4a7a      	ldr	r2, [pc, #488]	; (8003f64 <main+0x268>)
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2340      	movs	r3, #64	; 0x40
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	2100      	movs	r1, #0
 8003d86:	2000      	movs	r0, #0
 8003d88:	f000 fcec 	bl	8004764 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen();
 8003d8c:	f000 fe4e 	bl	8004a2c <SSD1306_UpdateScreen>

  HAL_Delay (2000);
 8003d90:	23fa      	movs	r3, #250	; 0xfa
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	0018      	movs	r0, r3
 8003d96:	f001 fa65 	bl	8005264 <HAL_Delay>
  SSD1306_Clear();
 8003d9a:	f000 ffc3 	bl	8004d24 <SSD1306_Clear>

  soundBuzzer(2000);
 8003d9e:	23fa      	movs	r3, #250	; 0xfa
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	0018      	movs	r0, r3
 8003da4:	f001 f9bb 	bl	800511e <soundBuzzer>

  while (1) {
	    static uint8_t lastState = 0;

	    // Read the current state of the encoder pins
	    uint8_t currentState = ((GPIOB->IDR & (1 << 11)) >> 11) |
 8003da8:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <main+0x26c>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	0adb      	lsrs	r3, r3, #11
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2201      	movs	r2, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	b2d9      	uxtb	r1, r3
	                           ((GPIOB->IDR & (1 << 12)) >> (12 - 1));
 8003db6:	4b6c      	ldr	r3, [pc, #432]	; (8003f68 <main+0x26c>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	0adb      	lsrs	r3, r3, #11
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b2da      	uxtb	r2, r3
	    uint8_t currentState = ((GPIOB->IDR & (1 << 11)) >> 11) |
 8003dc4:	2037      	movs	r0, #55	; 0x37
 8003dc6:	183b      	adds	r3, r7, r0
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	701a      	strb	r2, [r3, #0]

	    // Polling PA2 and PA14
	    int sensorPA2State = GPIOA->IDR & (1 << 2); // Read PA2
 8003dcc:	2390      	movs	r3, #144	; 0x90
 8003dce:	05db      	lsls	r3, r3, #23
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
	    int sensorPA14State = GPIOA->IDR & (1 << 14); // Read PA14
 8003dda:	2390      	movs	r3, #144	; 0x90
 8003ddc:	05db      	lsls	r3, r3, #23
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	001a      	movs	r2, r3
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	01db      	lsls	r3, r3, #7
 8003de6:	4013      	ands	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c

      int currentPWM = TIM1->CCR2;
 8003dea:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <main+0x270>)
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28

      if (lastState != currentState) {
 8003df0:	4b5f      	ldr	r3, [pc, #380]	; (8003f70 <main+0x274>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	183a      	adds	r2, r7, r0
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d008      	beq.n	8003e0e <main+0x112>
              // Reset the timer if there's a change in the encoder input
              lastEncoderChangeTime = HAL_GetTick();
 8003dfc:	f001 fa28 	bl	8005250 <HAL_GetTick>
 8003e00:	0002      	movs	r2, r0
 8003e02:	4b5c      	ldr	r3, [pc, #368]	; (8003f74 <main+0x278>)
 8003e04:	601a      	str	r2, [r3, #0]
              inAutomaticMode = 0;  // Switch to manual mode
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <main+0x27c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e00c      	b.n	8003e28 <main+0x12c>
          } else if (HAL_GetTick() - lastEncoderChangeTime > AUTO_MODE_TRIGGER_TIME) {
 8003e0e:	f001 fa1f 	bl	8005250 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	4b57      	ldr	r3, [pc, #348]	; (8003f74 <main+0x278>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	23fa      	movs	r3, #250	; 0xfa
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d902      	bls.n	8003e28 <main+0x12c>
              // Switch to automatic mode if there's been no encoder input for a defined duration
              inAutomaticMode = 1;
 8003e22:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <main+0x27c>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
          }
          lastState = currentState;
 8003e28:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <main+0x274>)
 8003e2a:	2237      	movs	r2, #55	; 0x37
 8003e2c:	18ba      	adds	r2, r7, r2
 8003e2e:	7812      	ldrb	r2, [r2, #0]
 8003e30:	701a      	strb	r2, [r3, #0]
      // Calculate current RPM of the fifth wheel
      float currentRPM = CalculateRPM();
 8003e32:	f7ff fcbd 	bl	80037b0 <CalculateRPM>
 8003e36:	1c03      	adds	r3, r0, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24

      // Manual control logic
      if (!inAutomaticMode) {
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <main+0x27c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d113      	bne.n	8003e6a <main+0x16e>
          // Increment or decrement PWM based on rotary encoder input
          if (currentPWM < targetPWM) {
 8003e42:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <main+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	da04      	bge.n	8003e56 <main+0x15a>
              TIM1->CCR2 = targetPWM;
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <main+0x280>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <main+0x270>)
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
 8003e54:	e020      	b.n	8003e98 <main+0x19c>
          } else if (currentPWM > targetPWM) {
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <main+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	dd1b      	ble.n	8003e98 <main+0x19c>
              TIM1->CCR2 = targetPWM;
 8003e60:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <main+0x280>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <main+0x270>)
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
 8003e68:	e016      	b.n	8003e98 <main+0x19c>
          }
      } else {
          // Automatic mode logic
          // Desired RPM is set to be the same as the current RPM
          float desiredRPM = currentRPM+1;
 8003e6a:	21fe      	movs	r1, #254	; 0xfe
 8003e6c:	0589      	lsls	r1, r1, #22
 8003e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e70:	f7fc fb54 	bl	800051c <__aeabi_fadd>
 8003e74:	1c03      	adds	r3, r0, #0
 8003e76:	623b      	str	r3, [r7, #32]
          int requiredPWM = CalculatePWMFromRPM(desiredRPM);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	1c18      	adds	r0, r3, #0
 8003e7c:	f7ff fba0 	bl	80035c0 <CalculatePWMFromRPM>
 8003e80:	0003      	movs	r3, r0
 8003e82:	61fb      	str	r3, [r7, #28]
          if (requiredPWM != -1) {
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	3301      	adds	r3, #1
 8003e88:	d002      	beq.n	8003e90 <main+0x194>
              targetPWM = requiredPWM;
 8003e8a:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <main+0x280>)
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	601a      	str	r2, [r3, #0]
          }
          TIM1->CCR2 = targetPWM;
 8003e90:	4b3a      	ldr	r3, [pc, #232]	; (8003f7c <main+0x280>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <main+0x270>)
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
      }

      // Read ADC values and convert to physical quantities
      adc_value_temp = read_ADC_Channel(10);
 8003e98:	251a      	movs	r5, #26
 8003e9a:	197c      	adds	r4, r7, r5
 8003e9c:	200a      	movs	r0, #10
 8003e9e:	f7ff f9bd 	bl	800321c <read_ADC_Channel>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	8023      	strh	r3, [r4, #0]
      temperature = ADC_to_Temperature(adc_value_temp);
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff f9d8 	bl	8003260 <ADC_to_Temperature>
 8003eb0:	1c03      	adds	r3, r0, #0
 8003eb2:	617b      	str	r3, [r7, #20]
      adc_value_battery = read_ADC_Channel(12);
 8003eb4:	2512      	movs	r5, #18
 8003eb6:	197c      	adds	r4, r7, r5
 8003eb8:	200c      	movs	r0, #12
 8003eba:	f7ff f9af 	bl	800321c <read_ADC_Channel>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	8023      	strh	r3, [r4, #0]
      battery_voltage = ADC_to_BatteryVoltage(adc_value_battery);
 8003ec2:	197b      	adds	r3, r7, r5
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7ff fa06 	bl	80032d8 <ADC_to_BatteryVoltage>
 8003ecc:	1c03      	adds	r3, r0, #0
 8003ece:	60fb      	str	r3, [r7, #12]
      adc_value_current = read_ADC_Channel(11);
 8003ed0:	250a      	movs	r5, #10
 8003ed2:	197c      	adds	r4, r7, r5
 8003ed4:	200b      	movs	r0, #11
 8003ed6:	f7ff f9a1 	bl	800321c <read_ADC_Channel>
 8003eda:	0003      	movs	r3, r0
 8003edc:	8023      	strh	r3, [r4, #0]
      current = ADC_to_Current(adc_value_current);
 8003ede:	197b      	adds	r3, r7, r5
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fa34 	bl	8003350 <ADC_to_Current>
 8003ee8:	1c03      	adds	r3, r0, #0
 8003eea:	607b      	str	r3, [r7, #4]
      float speedKmH = CalculateSpeedKmH(currentRPM);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1c18      	adds	r0, r3, #0
 8003ef0:	f7ff fedc 	bl	8003cac <CalculateSpeedKmH>
 8003ef4:	1c03      	adds	r3, r0, #0
 8003ef6:	603b      	str	r3, [r7, #0]
      if (currentRPM != rpm) {
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <main+0x284>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c19      	adds	r1, r3, #0
 8003efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f00:	f7fc fade 	bl	80004c0 <__aeabi_fcmpeq>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d102      	bne.n	8003f0e <main+0x212>
          rpm = currentRPM;
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <main+0x284>)
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0c:	601a      	str	r2, [r3, #0]
      }

      MPU6050_Read_All(&hi2c1, &MPU6050);
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <main+0x288>)
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <main+0x258>)
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 f8db 	bl	80040d0 <MPU6050_Read_All>
      // Call the function to update the display
      UpdateDisplay(currentPWM, MPU6050.KalmanAngleX, MPU6050.KalmanAngleY, temperature, speedKmH,battery_voltage);
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <main+0x288>)
 8003f1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	0010      	movs	r0, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	f7ff f8b2 	bl	800308c <__aeabi_d2f>
 8003f28:	1c04      	adds	r4, r0, #0
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <main+0x288>)
 8003f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	0010      	movs	r0, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	f7ff f8aa 	bl	800308c <__aeabi_d2f>
 8003f38:	1c01      	adds	r1, r0, #0
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	1c13      	adds	r3, r2, #0
 8003f48:	1c0a      	adds	r2, r1, #0
 8003f4a:	1c21      	adds	r1, r4, #0
 8003f4c:	f7ff fa46 	bl	80033dc <UpdateDisplay>
  while (1) {
 8003f50:	e72a      	b.n	8003da8 <main+0xac>
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	200002d4 	.word	0x200002d4
 8003f58:	20000008 	.word	0x20000008
 8003f5c:	08009ed8 	.word	0x08009ed8
 8003f60:	08009ee0 	.word	0x08009ee0
 8003f64:	0800b470 	.word	0x0800b470
 8003f68:	48000400 	.word	0x48000400
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	20000381 	.word	0x20000381
 8003f74:	200002c4 	.word	0x200002c4
 8003f78:	200002c0 	.word	0x200002c0
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	200002b4 	.word	0x200002b4
 8003f84:	20000328 	.word	0x20000328

08003f88 <MX_I2C1_Init>:
    Error_Handler();
  }
}

static void MX_I2C1_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <MX_I2C1_Init+0x78>)
 8003f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <MX_I2C1_Init+0x7c>)
 8003f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f001 fb95 	bl	80056f4 <HAL_I2C_Init>
 8003fca:	1e03      	subs	r3, r0, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003fce:	f000 f81b 	bl	8004008 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f002 fba0 	bl	800671c <HAL_I2CEx_ConfigAnalogFilter>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003fe0:	f000 f812 	bl	8004008 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <MX_I2C1_Init+0x74>)
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f002 fbe3 	bl	80067b4 <HAL_I2CEx_ConfigDigitalFilter>
 8003fee:	1e03      	subs	r3, r0, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ff2:	f000 f809 	bl	8004008 <Error_Handler>
  }

}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200002d4 	.word	0x200002d4
 8004000:	40005400 	.word	0x40005400
 8004004:	0000020b 	.word	0x0000020b

08004008 <Error_Handler>:


void Error_Handler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800400c:	b672      	cpsid	i
}
 800400e:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  while (1)
 8004010:	e7fe      	b.n	8004010 <Error_Handler+0x8>

08004012 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8004012:	b590      	push	{r4, r7, lr}
 8004014:	b089      	sub	sp, #36	; 0x24
 8004016:	af04      	add	r7, sp, #16
 8004018:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800401a:	2364      	movs	r3, #100	; 0x64
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	9302      	str	r3, [sp, #8]
 8004020:	2301      	movs	r3, #1
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	240f      	movs	r4, #15
 8004026:	193b      	adds	r3, r7, r4
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	2275      	movs	r2, #117	; 0x75
 800402e:	21d0      	movs	r1, #208	; 0xd0
 8004030:	f001 fe2c 	bl	8005c8c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8004034:	193b      	adds	r3, r7, r4
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b68      	cmp	r3, #104	; 0x68
 800403a:	d144      	bne.n	80040c6 <MPU6050_Init+0xb4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800403c:	210e      	movs	r1, #14
 800403e:	187b      	adds	r3, r7, r1
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8004044:	2364      	movs	r3, #100	; 0x64
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	9302      	str	r3, [sp, #8]
 800404a:	2301      	movs	r3, #1
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	000c      	movs	r4, r1
 8004050:	187b      	adds	r3, r7, r1
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2301      	movs	r3, #1
 8004056:	226b      	movs	r2, #107	; 0x6b
 8004058:	21d0      	movs	r1, #208	; 0xd0
 800405a:	f001 fce9 	bl	8005a30 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800405e:	0021      	movs	r1, r4
 8004060:	187b      	adds	r3, r7, r1
 8004062:	2207      	movs	r2, #7
 8004064:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8004066:	2364      	movs	r3, #100	; 0x64
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	2301      	movs	r3, #1
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	000c      	movs	r4, r1
 8004072:	187b      	adds	r3, r7, r1
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2301      	movs	r3, #1
 8004078:	2219      	movs	r2, #25
 800407a:	21d0      	movs	r1, #208	; 0xd0
 800407c:	f001 fcd8 	bl	8005a30 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8004080:	0021      	movs	r1, r4
 8004082:	187b      	adds	r3, r7, r1
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8004088:	2364      	movs	r3, #100	; 0x64
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	9302      	str	r3, [sp, #8]
 800408e:	2301      	movs	r3, #1
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	000c      	movs	r4, r1
 8004094:	187b      	adds	r3, r7, r1
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2301      	movs	r3, #1
 800409a:	221c      	movs	r2, #28
 800409c:	21d0      	movs	r1, #208	; 0xd0
 800409e:	f001 fcc7 	bl	8005a30 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80040a2:	0021      	movs	r1, r4
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80040aa:	2364      	movs	r3, #100	; 0x64
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	9302      	str	r3, [sp, #8]
 80040b0:	2301      	movs	r3, #1
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2301      	movs	r3, #1
 80040ba:	221b      	movs	r2, #27
 80040bc:	21d0      	movs	r1, #208	; 0xd0
 80040be:	f001 fcb7 	bl	8005a30 <HAL_I2C_Mem_Write>
        return 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <MPU6050_Init+0xb6>
    }
    return 1;
 80040c6:	2301      	movs	r3, #1
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b005      	add	sp, #20
 80040ce:	bd90      	pop	{r4, r7, pc}

080040d0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80040d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d2:	b099      	sub	sp, #100	; 0x64
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	6178      	str	r0, [r7, #20]
 80040d8:	6139      	str	r1, [r7, #16]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80040da:	2364      	movs	r3, #100	; 0x64
 80040dc:	6978      	ldr	r0, [r7, #20]
 80040de:	9302      	str	r3, [sp, #8]
 80040e0:	230e      	movs	r3, #14
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	2408      	movs	r4, #8
 80040e6:	2510      	movs	r5, #16
 80040e8:	1963      	adds	r3, r4, r5
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2301      	movs	r3, #1
 80040f0:	223b      	movs	r2, #59	; 0x3b
 80040f2:	21d0      	movs	r1, #208	; 0xd0
 80040f4:	f001 fdca 	bl	8005c8c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80040f8:	0020      	movs	r0, r4
 80040fa:	0029      	movs	r1, r5
 80040fc:	1843      	adds	r3, r0, r1
 80040fe:	19db      	adds	r3, r3, r7
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	b21a      	sxth	r2, r3
 8004106:	1843      	adds	r3, r0, r1
 8004108:	19db      	adds	r3, r3, r7
 800410a:	785b      	ldrb	r3, [r3, #1]
 800410c:	b21b      	sxth	r3, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	b21a      	sxth	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8004116:	1843      	adds	r3, r0, r1
 8004118:	19db      	adds	r3, r3, r7
 800411a:	789b      	ldrb	r3, [r3, #2]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	b21a      	sxth	r2, r3
 8004120:	1843      	adds	r3, r0, r1
 8004122:	19db      	adds	r3, r3, r7
 8004124:	78db      	ldrb	r3, [r3, #3]
 8004126:	b21b      	sxth	r3, r3
 8004128:	4313      	orrs	r3, r2
 800412a:	b21a      	sxth	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8004130:	1843      	adds	r3, r0, r1
 8004132:	19db      	adds	r3, r3, r7
 8004134:	791b      	ldrb	r3, [r3, #4]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	b21a      	sxth	r2, r3
 800413a:	1843      	adds	r3, r0, r1
 800413c:	19db      	adds	r3, r3, r7
 800413e:	795b      	ldrb	r3, [r3, #5]
 8004140:	b21b      	sxth	r3, r3
 8004142:	4313      	orrs	r3, r2
 8004144:	b21a      	sxth	r2, r3
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800414a:	000d      	movs	r5, r1
 800414c:	1843      	adds	r3, r0, r1
 800414e:	19db      	adds	r3, r3, r7
 8004150:	799b      	ldrb	r3, [r3, #6]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	b219      	sxth	r1, r3
 8004156:	1943      	adds	r3, r0, r5
 8004158:	19db      	adds	r3, r3, r7
 800415a:	79db      	ldrb	r3, [r3, #7]
 800415c:	b21a      	sxth	r2, r3
 800415e:	2436      	movs	r4, #54	; 0x36
 8004160:	1963      	adds	r3, r4, r5
 8004162:	19db      	adds	r3, r3, r7
 8004164:	430a      	orrs	r2, r1
 8004166:	801a      	strh	r2, [r3, #0]
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8004168:	0001      	movs	r1, r0
 800416a:	194b      	adds	r3, r1, r5
 800416c:	19db      	adds	r3, r3, r7
 800416e:	7a1b      	ldrb	r3, [r3, #8]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	b21a      	sxth	r2, r3
 8004174:	194b      	adds	r3, r1, r5
 8004176:	19db      	adds	r3, r3, r7
 8004178:	7a5b      	ldrb	r3, [r3, #9]
 800417a:	b21b      	sxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b21a      	sxth	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8004184:	194b      	adds	r3, r1, r5
 8004186:	19db      	adds	r3, r3, r7
 8004188:	7a9b      	ldrb	r3, [r3, #10]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	b21a      	sxth	r2, r3
 800418e:	194b      	adds	r3, r1, r5
 8004190:	19db      	adds	r3, r3, r7
 8004192:	7adb      	ldrb	r3, [r3, #11]
 8004194:	b21b      	sxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b21a      	sxth	r2, r3
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800419e:	194b      	adds	r3, r1, r5
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	7b1b      	ldrb	r3, [r3, #12]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	194b      	adds	r3, r1, r5
 80041aa:	19db      	adds	r3, r3, r7
 80041ac:	7b5b      	ldrb	r3, [r3, #13]
 80041ae:	b21b      	sxth	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2200      	movs	r2, #0
 80041bc:	5e9b      	ldrsh	r3, [r3, r2]
 80041be:	0018      	movs	r0, r3
 80041c0:	f7fe fec6 	bl	8002f50 <__aeabi_i2d>
 80041c4:	2200      	movs	r2, #0
 80041c6:	4bac      	ldr	r3, [pc, #688]	; (8004478 <MPU6050_Read_All+0x3a8>)
 80041c8:	f7fd fc30 	bl	8001a2c <__aeabi_ddiv>
 80041cc:	0002      	movs	r2, r0
 80041ce:	000b      	movs	r3, r1
 80041d0:	6939      	ldr	r1, [r7, #16]
 80041d2:	608a      	str	r2, [r1, #8]
 80041d4:	60cb      	str	r3, [r1, #12]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2202      	movs	r2, #2
 80041da:	5e9b      	ldrsh	r3, [r3, r2]
 80041dc:	0018      	movs	r0, r3
 80041de:	f7fe feb7 	bl	8002f50 <__aeabi_i2d>
 80041e2:	2200      	movs	r2, #0
 80041e4:	4ba4      	ldr	r3, [pc, #656]	; (8004478 <MPU6050_Read_All+0x3a8>)
 80041e6:	f7fd fc21 	bl	8001a2c <__aeabi_ddiv>
 80041ea:	0002      	movs	r2, r0
 80041ec:	000b      	movs	r3, r1
 80041ee:	6939      	ldr	r1, [r7, #16]
 80041f0:	610a      	str	r2, [r1, #16]
 80041f2:	614b      	str	r3, [r1, #20]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2204      	movs	r2, #4
 80041f8:	5e9b      	ldrsh	r3, [r3, r2]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7fe fea8 	bl	8002f50 <__aeabi_i2d>
 8004200:	2200      	movs	r2, #0
 8004202:	4b9e      	ldr	r3, [pc, #632]	; (800447c <MPU6050_Read_All+0x3ac>)
 8004204:	f7fd fc12 	bl	8001a2c <__aeabi_ddiv>
 8004208:	0002      	movs	r2, r0
 800420a:	000b      	movs	r3, r1
 800420c:	6939      	ldr	r1, [r7, #16]
 800420e:	618a      	str	r2, [r1, #24]
 8004210:	61cb      	str	r3, [r1, #28]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8004212:	1963      	adds	r3, r4, r5
 8004214:	19db      	adds	r3, r3, r7
 8004216:	2200      	movs	r2, #0
 8004218:	5e9b      	ldrsh	r3, [r3, r2]
 800421a:	0018      	movs	r0, r3
 800421c:	f7fd f80c 	bl	8001238 <__aeabi_i2f>
 8004220:	1c03      	adds	r3, r0, #0
 8004222:	4997      	ldr	r1, [pc, #604]	; (8004480 <MPU6050_Read_All+0x3b0>)
 8004224:	1c18      	adds	r0, r3, #0
 8004226:	f7fc fb19 	bl	800085c <__aeabi_fdiv>
 800422a:	1c03      	adds	r3, r0, #0
 800422c:	4995      	ldr	r1, [pc, #596]	; (8004484 <MPU6050_Read_All+0x3b4>)
 800422e:	1c18      	adds	r0, r3, #0
 8004230:	f7fc f974 	bl	800051c <__aeabi_fadd>
 8004234:	1c03      	adds	r3, r0, #0
 8004236:	1c1a      	adds	r2, r3, #0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2220      	movs	r2, #32
 8004240:	5e9b      	ldrsh	r3, [r3, r2]
 8004242:	0018      	movs	r0, r3
 8004244:	f7fe fe84 	bl	8002f50 <__aeabi_i2d>
 8004248:	2200      	movs	r2, #0
 800424a:	4b8f      	ldr	r3, [pc, #572]	; (8004488 <MPU6050_Read_All+0x3b8>)
 800424c:	f7fd fbee 	bl	8001a2c <__aeabi_ddiv>
 8004250:	0002      	movs	r2, r0
 8004252:	000b      	movs	r3, r1
 8004254:	6939      	ldr	r1, [r7, #16]
 8004256:	628a      	str	r2, [r1, #40]	; 0x28
 8004258:	62cb      	str	r3, [r1, #44]	; 0x2c
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2222      	movs	r2, #34	; 0x22
 800425e:	5e9b      	ldrsh	r3, [r3, r2]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fe fe75 	bl	8002f50 <__aeabi_i2d>
 8004266:	2200      	movs	r2, #0
 8004268:	4b87      	ldr	r3, [pc, #540]	; (8004488 <MPU6050_Read_All+0x3b8>)
 800426a:	f7fd fbdf 	bl	8001a2c <__aeabi_ddiv>
 800426e:	0002      	movs	r2, r0
 8004270:	000b      	movs	r3, r1
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	630a      	str	r2, [r1, #48]	; 0x30
 8004276:	634b      	str	r3, [r1, #52]	; 0x34
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	5e9b      	ldrsh	r3, [r3, r2]
 800427e:	0018      	movs	r0, r3
 8004280:	f7fe fe66 	bl	8002f50 <__aeabi_i2d>
 8004284:	2200      	movs	r2, #0
 8004286:	4b80      	ldr	r3, [pc, #512]	; (8004488 <MPU6050_Read_All+0x3b8>)
 8004288:	f7fd fbd0 	bl	8001a2c <__aeabi_ddiv>
 800428c:	0002      	movs	r2, r0
 800428e:	000b      	movs	r3, r1
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	638a      	str	r2, [r1, #56]	; 0x38
 8004294:	63cb      	str	r3, [r1, #60]	; 0x3c

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8004296:	f000 ffdb 	bl	8005250 <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	4b7b      	ldr	r3, [pc, #492]	; (800448c <MPU6050_Read_All+0x3bc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7fe fe84 	bl	8002fb0 <__aeabi_ui2d>
 80042a8:	2200      	movs	r2, #0
 80042aa:	4b79      	ldr	r3, [pc, #484]	; (8004490 <MPU6050_Read_All+0x3c0>)
 80042ac:	f7fd fbbe 	bl	8001a2c <__aeabi_ddiv>
 80042b0:	0002      	movs	r2, r0
 80042b2:	000b      	movs	r3, r1
 80042b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80042b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    timer = HAL_GetTick();
 80042b8:	f000 ffca 	bl	8005250 <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	4b73      	ldr	r3, [pc, #460]	; (800448c <MPU6050_Read_All+0x3bc>)
 80042c0:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2200      	movs	r2, #0
 80042c6:	5e9b      	ldrsh	r3, [r3, r2]
 80042c8:	001a      	movs	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2100      	movs	r1, #0
 80042ce:	5e5b      	ldrsh	r3, [r3, r1]
 80042d0:	435a      	muls	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2104      	movs	r1, #4
 80042d6:	5e5b      	ldrsh	r3, [r3, r1]
 80042d8:	0019      	movs	r1, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2004      	movs	r0, #4
 80042de:	5e1b      	ldrsh	r3, [r3, r0]
 80042e0:	434b      	muls	r3, r1
 80042e2:	18d3      	adds	r3, r2, r3
    double roll_sqrt = sqrt(
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7fe fe33 	bl	8002f50 <__aeabi_i2d>
 80042ea:	0002      	movs	r2, r0
 80042ec:	000b      	movs	r3, r1
 80042ee:	0010      	movs	r0, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	f005 f9eb 	bl	80096cc <sqrt>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	633a      	str	r2, [r7, #48]	; 0x30
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
    if (roll_sqrt != 0.0)
 80042fe:	2200      	movs	r2, #0
 8004300:	2300      	movs	r3, #0
 8004302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004304:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004306:	f7fc f8a1 	bl	800044c <__aeabi_dcmpeq>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d118      	bne.n	8004340 <MPU6050_Read_All+0x270>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2202      	movs	r2, #2
 8004312:	5e9b      	ldrsh	r3, [r3, r2]
 8004314:	0018      	movs	r0, r3
 8004316:	f7fe fe1b 	bl	8002f50 <__aeabi_i2d>
 800431a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	f7fd fb85 	bl	8001a2c <__aeabi_ddiv>
 8004322:	0002      	movs	r2, r0
 8004324:	000b      	movs	r3, r1
 8004326:	0010      	movs	r0, r2
 8004328:	0019      	movs	r1, r3
 800432a:	f005 f9f5 	bl	8009718 <atan>
 800432e:	4a59      	ldr	r2, [pc, #356]	; (8004494 <MPU6050_Read_All+0x3c4>)
 8004330:	4b59      	ldr	r3, [pc, #356]	; (8004498 <MPU6050_Read_All+0x3c8>)
 8004332:	f7fd ff75 	bl	8002220 <__aeabi_dmul>
 8004336:	0002      	movs	r2, r0
 8004338:	000b      	movs	r3, r1
 800433a:	64ba      	str	r2, [r7, #72]	; 0x48
 800433c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800433e:	e003      	b.n	8004348 <MPU6050_Read_All+0x278>
    }
    else
    {
        roll = 0.0;
 8004340:	2200      	movs	r2, #0
 8004342:	2300      	movs	r3, #0
 8004344:	64ba      	str	r2, [r7, #72]	; 0x48
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2200      	movs	r2, #0
 800434c:	5e9b      	ldrsh	r3, [r3, r2]
 800434e:	425b      	negs	r3, r3
 8004350:	0018      	movs	r0, r3
 8004352:	f7fe fdfd 	bl	8002f50 <__aeabi_i2d>
 8004356:	0004      	movs	r4, r0
 8004358:	000d      	movs	r5, r1
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2204      	movs	r2, #4
 800435e:	5e9b      	ldrsh	r3, [r3, r2]
 8004360:	0018      	movs	r0, r3
 8004362:	f7fe fdf5 	bl	8002f50 <__aeabi_i2d>
 8004366:	0002      	movs	r2, r0
 8004368:	000b      	movs	r3, r1
 800436a:	0020      	movs	r0, r4
 800436c:	0029      	movs	r1, r5
 800436e:	f005 f9a9 	bl	80096c4 <atan2>
 8004372:	4a48      	ldr	r2, [pc, #288]	; (8004494 <MPU6050_Read_All+0x3c4>)
 8004374:	4b48      	ldr	r3, [pc, #288]	; (8004498 <MPU6050_Read_All+0x3c8>)
 8004376:	f7fd ff53 	bl	8002220 <__aeabi_dmul>
 800437a:	0002      	movs	r2, r0
 800437c:	000b      	movs	r3, r1
 800437e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8004382:	2200      	movs	r2, #0
 8004384:	4b45      	ldr	r3, [pc, #276]	; (800449c <MPU6050_Read_All+0x3cc>)
 8004386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800438a:	f7fc f865 	bl	8000458 <__aeabi_dcmplt>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d008      	beq.n	80043a4 <MPU6050_Read_All+0x2d4>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004396:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004398:	2200      	movs	r2, #0
 800439a:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <MPU6050_Read_All+0x3d0>)
 800439c:	f7fc f870 	bl	8000480 <__aeabi_dcmpgt>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d110      	bne.n	80043c6 <MPU6050_Read_All+0x2f6>
 80043a4:	2200      	movs	r2, #0
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <MPU6050_Read_All+0x3d0>)
 80043a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ac:	f7fc f868 	bl	8000480 <__aeabi_dcmpgt>
 80043b0:	1e03      	subs	r3, r0, #0
 80043b2:	d013      	beq.n	80043dc <MPU6050_Read_All+0x30c>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80043b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043ba:	2200      	movs	r2, #0
 80043bc:	4b37      	ldr	r3, [pc, #220]	; (800449c <MPU6050_Read_All+0x3cc>)
 80043be:	f7fc f84b 	bl	8000458 <__aeabi_dcmplt>
 80043c2:	1e03      	subs	r3, r0, #0
 80043c4:	d00a      	beq.n	80043dc <MPU6050_Read_All+0x30c>
    {
        KalmanY.angle = pitch;
 80043c6:	4937      	ldr	r1, [pc, #220]	; (80044a4 <MPU6050_Read_All+0x3d4>)
 80043c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	618a      	str	r2, [r1, #24]
 80043ce:	61cb      	str	r3, [r1, #28]
        DataStruct->KalmanAngleY = pitch;
 80043d0:	6939      	ldr	r1, [r7, #16]
 80043d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	650a      	str	r2, [r1, #80]	; 0x50
 80043d8:	654b      	str	r3, [r1, #84]	; 0x54
 80043da:	e015      	b.n	8004408 <MPU6050_Read_All+0x338>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80043e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80043e6:	4e2f      	ldr	r6, [pc, #188]	; (80044a4 <MPU6050_Read_All+0x3d4>)
 80043e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ec:	9002      	str	r0, [sp, #8]
 80043ee:	9103      	str	r1, [sp, #12]
 80043f0:	9200      	str	r2, [sp, #0]
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	0022      	movs	r2, r4
 80043f6:	002b      	movs	r3, r5
 80043f8:	0030      	movs	r0, r6
 80043fa:	f000 f857 	bl	80044ac <Kalman_getAngle>
 80043fe:	0002      	movs	r2, r0
 8004400:	000b      	movs	r3, r1
 8004402:	6939      	ldr	r1, [r7, #16]
 8004404:	650a      	str	r2, [r1, #80]	; 0x50
 8004406:	654b      	str	r3, [r1, #84]	; 0x54
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	0011      	movs	r1, r2
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <MPU6050_Read_All+0x3d0>)
 800441c:	68b8      	ldr	r0, [r7, #8]
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	f7fc f82e 	bl	8000480 <__aeabi_dcmpgt>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d00d      	beq.n	8004444 <MPU6050_Read_All+0x374>
        DataStruct->Gx = -DataStruct->Gx;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	0011      	movs	r1, r2
 8004430:	6039      	str	r1, [r7, #0]
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	0609      	lsls	r1, r1, #24
 8004436:	4059      	eors	r1, r3
 8004438:	6079      	str	r1, [r7, #4]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6299      	str	r1, [r3, #40]	; 0x28
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800444c:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800444e:	4e16      	ldr	r6, [pc, #88]	; (80044a8 <MPU6050_Read_All+0x3d8>)
 8004450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004454:	9002      	str	r0, [sp, #8]
 8004456:	9103      	str	r1, [sp, #12]
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	0022      	movs	r2, r4
 800445e:	002b      	movs	r3, r5
 8004460:	0030      	movs	r0, r6
 8004462:	f000 f823 	bl	80044ac <Kalman_getAngle>
 8004466:	0002      	movs	r2, r0
 8004468:	000b      	movs	r3, r1
 800446a:	6939      	ldr	r1, [r7, #16]
 800446c:	648a      	str	r2, [r1, #72]	; 0x48
 800446e:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b015      	add	sp, #84	; 0x54
 8004476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004478:	40d00000 	.word	0x40d00000
 800447c:	40cc2900 	.word	0x40cc2900
 8004480:	43aa0000 	.word	0x43aa0000
 8004484:	42121eb8 	.word	0x42121eb8
 8004488:	40606000 	.word	0x40606000
 800448c:	20000384 	.word	0x20000384
 8004490:	408f4000 	.word	0x408f4000
 8004494:	1a63c1f8 	.word	0x1a63c1f8
 8004498:	404ca5dc 	.word	0x404ca5dc
 800449c:	c0568000 	.word	0xc0568000
 80044a0:	40568000 	.word	0x40568000
 80044a4:	20000060 	.word	0x20000060
 80044a8:	20000018 	.word	0x20000018

080044ac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80044ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ae:	b093      	sub	sp, #76	; 0x4c
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	603a      	str	r2, [r7, #0]
 80044b6:	607b      	str	r3, [r7, #4]
    double rate = newRate - Kalman->bias;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1a      	ldr	r2, [r3, #32]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80044c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80044c2:	f7fe f96f 	bl	80027a4 <__aeabi_dsub>
 80044c6:	0002      	movs	r2, r0
 80044c8:	000b      	movs	r3, r1
 80044ca:	643a      	str	r2, [r7, #64]	; 0x40
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
    Kalman->angle += dt * rate;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699c      	ldr	r4, [r3, #24]
 80044d2:	69dd      	ldr	r5, [r3, #28]
 80044d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80044da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80044dc:	f7fd fea0 	bl	8002220 <__aeabi_dmul>
 80044e0:	0002      	movs	r2, r0
 80044e2:	000b      	movs	r3, r1
 80044e4:	0020      	movs	r0, r4
 80044e6:	0029      	movs	r1, r5
 80044e8:	f7fc ff40 	bl	800136c <__aeabi_dadd>
 80044ec:	0002      	movs	r2, r0
 80044ee:	000b      	movs	r3, r1
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	618a      	str	r2, [r1, #24]
 80044f4:	61cb      	str	r3, [r1, #28]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80044fa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004500:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	f7fd fe8b 	bl	8002220 <__aeabi_dmul>
 800450a:	0002      	movs	r2, r0
 800450c:	000b      	movs	r3, r1
 800450e:	0010      	movs	r0, r2
 8004510:	0019      	movs	r1, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	f7fe f944 	bl	80027a4 <__aeabi_dsub>
 800451c:	0002      	movs	r2, r0
 800451e:	000b      	movs	r3, r1
 8004520:	0010      	movs	r0, r2
 8004522:	0019      	movs	r1, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	f7fe f93b 	bl	80027a4 <__aeabi_dsub>
 800452e:	0002      	movs	r2, r0
 8004530:	000b      	movs	r3, r1
 8004532:	0010      	movs	r0, r2
 8004534:	0019      	movs	r1, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f7fc ff16 	bl	800136c <__aeabi_dadd>
 8004540:	0002      	movs	r2, r0
 8004542:	000b      	movs	r3, r1
 8004544:	0010      	movs	r0, r2
 8004546:	0019      	movs	r1, r3
 8004548:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	f7fd fe68 	bl	8002220 <__aeabi_dmul>
 8004550:	0002      	movs	r2, r0
 8004552:	000b      	movs	r3, r1
 8004554:	0020      	movs	r0, r4
 8004556:	0029      	movs	r1, r5
 8004558:	f7fc ff08 	bl	800136c <__aeabi_dadd>
 800455c:	0002      	movs	r2, r0
 800455e:	000b      	movs	r3, r1
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	628a      	str	r2, [r1, #40]	; 0x28
 8004564:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800456a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004570:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004572:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	f7fd fe53 	bl	8002220 <__aeabi_dmul>
 800457a:	0002      	movs	r2, r0
 800457c:	000b      	movs	r3, r1
 800457e:	0020      	movs	r0, r4
 8004580:	0029      	movs	r1, r5
 8004582:	f7fe f90f 	bl	80027a4 <__aeabi_dsub>
 8004586:	0002      	movs	r2, r0
 8004588:	000b      	movs	r3, r1
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	630a      	str	r2, [r1, #48]	; 0x30
 800458e:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004594:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800459a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800459c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	f7fd fe3e 	bl	8002220 <__aeabi_dmul>
 80045a4:	0002      	movs	r2, r0
 80045a6:	000b      	movs	r3, r1
 80045a8:	0020      	movs	r0, r4
 80045aa:	0029      	movs	r1, r5
 80045ac:	f7fe f8fa 	bl	80027a4 <__aeabi_dsub>
 80045b0:	0002      	movs	r2, r0
 80045b2:	000b      	movs	r3, r1
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	638a      	str	r2, [r1, #56]	; 0x38
 80045b8:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80045be:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6898      	ldr	r0, [r3, #8]
 80045c4:	68d9      	ldr	r1, [r3, #12]
 80045c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	f7fd fe29 	bl	8002220 <__aeabi_dmul>
 80045ce:	0002      	movs	r2, r0
 80045d0:	000b      	movs	r3, r1
 80045d2:	0020      	movs	r0, r4
 80045d4:	0029      	movs	r1, r5
 80045d6:	f7fc fec9 	bl	800136c <__aeabi_dadd>
 80045da:	0002      	movs	r2, r0
 80045dc:	000b      	movs	r3, r1
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	640a      	str	r2, [r1, #64]	; 0x40
 80045e2:	644b      	str	r3, [r1, #68]	; 0x44

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80045e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f7fc febc 	bl	800136c <__aeabi_dadd>
 80045f4:	0002      	movs	r2, r0
 80045f6:	000b      	movs	r3, r1
 80045f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	f7fd fa11 	bl	8001a2c <__aeabi_ddiv>
 800460a:	0002      	movs	r2, r0
 800460c:	000b      	movs	r3, r1
 800460e:	2610      	movs	r6, #16
 8004610:	19b9      	adds	r1, r7, r6
 8004612:	600a      	str	r2, [r1, #0]
 8004614:	604b      	str	r3, [r1, #4]
    K[1] = Kalman->P[1][0] / S;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800461a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800461c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	f7fd fa04 	bl	8001a2c <__aeabi_ddiv>
 8004624:	0002      	movs	r2, r0
 8004626:	000b      	movs	r3, r1
 8004628:	19b9      	adds	r1, r7, r6
 800462a:	608a      	str	r2, [r1, #8]
 800462c:	60cb      	str	r3, [r1, #12]

    double y = newAngle - Kalman->angle;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	f7fe f8b4 	bl	80027a4 <__aeabi_dsub>
 800463c:	0002      	movs	r2, r0
 800463e:	000b      	movs	r3, r1
 8004640:	633a      	str	r2, [r7, #48]	; 0x30
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
    Kalman->angle += K[0] * y;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	699c      	ldr	r4, [r3, #24]
 8004648:	69dd      	ldr	r5, [r3, #28]
 800464a:	19bb      	adds	r3, r7, r6
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	f7fd fde4 	bl	8002220 <__aeabi_dmul>
 8004658:	0002      	movs	r2, r0
 800465a:	000b      	movs	r3, r1
 800465c:	0020      	movs	r0, r4
 800465e:	0029      	movs	r1, r5
 8004660:	f7fc fe84 	bl	800136c <__aeabi_dadd>
 8004664:	0002      	movs	r2, r0
 8004666:	000b      	movs	r3, r1
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	618a      	str	r2, [r1, #24]
 800466c:	61cb      	str	r3, [r1, #28]
    Kalman->bias += K[1] * y;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1c      	ldr	r4, [r3, #32]
 8004672:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004674:	19bb      	adds	r3, r7, r6
 8004676:	6898      	ldr	r0, [r3, #8]
 8004678:	68d9      	ldr	r1, [r3, #12]
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467e:	f7fd fdcf 	bl	8002220 <__aeabi_dmul>
 8004682:	0002      	movs	r2, r0
 8004684:	000b      	movs	r3, r1
 8004686:	0020      	movs	r0, r4
 8004688:	0029      	movs	r1, r5
 800468a:	f7fc fe6f 	bl	800136c <__aeabi_dadd>
 800468e:	0002      	movs	r2, r0
 8004690:	000b      	movs	r3, r1
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	620a      	str	r2, [r1, #32]
 8004696:	624b      	str	r3, [r1, #36]	; 0x24

    double P00_temp = Kalman->P[0][0];
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	62ba      	str	r2, [r7, #40]	; 0x28
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    double P01_temp = Kalman->P[0][1];
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	623a      	str	r2, [r7, #32]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24

    Kalman->P[0][0] -= K[0] * P00_temp;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80046b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80046b2:	19bb      	adds	r3, r7, r6
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	f7fd fdb0 	bl	8002220 <__aeabi_dmul>
 80046c0:	0002      	movs	r2, r0
 80046c2:	000b      	movs	r3, r1
 80046c4:	0020      	movs	r0, r4
 80046c6:	0029      	movs	r1, r5
 80046c8:	f7fe f86c 	bl	80027a4 <__aeabi_dsub>
 80046cc:	0002      	movs	r2, r0
 80046ce:	000b      	movs	r3, r1
 80046d0:	68f9      	ldr	r1, [r7, #12]
 80046d2:	628a      	str	r2, [r1, #40]	; 0x28
 80046d4:	62cb      	str	r3, [r1, #44]	; 0x2c
    Kalman->P[0][1] -= K[0] * P01_temp;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80046da:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80046dc:	19bb      	adds	r3, r7, r6
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	6a3a      	ldr	r2, [r7, #32]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f7fd fd9b 	bl	8002220 <__aeabi_dmul>
 80046ea:	0002      	movs	r2, r0
 80046ec:	000b      	movs	r3, r1
 80046ee:	0020      	movs	r0, r4
 80046f0:	0029      	movs	r1, r5
 80046f2:	f7fe f857 	bl	80027a4 <__aeabi_dsub>
 80046f6:	0002      	movs	r2, r0
 80046f8:	000b      	movs	r3, r1
 80046fa:	68f9      	ldr	r1, [r7, #12]
 80046fc:	630a      	str	r2, [r1, #48]	; 0x30
 80046fe:	634b      	str	r3, [r1, #52]	; 0x34
    Kalman->P[1][0] -= K[1] * P00_temp;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004704:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8004706:	19bb      	adds	r3, r7, r6
 8004708:	6898      	ldr	r0, [r3, #8]
 800470a:	68d9      	ldr	r1, [r3, #12]
 800470c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	f7fd fd86 	bl	8002220 <__aeabi_dmul>
 8004714:	0002      	movs	r2, r0
 8004716:	000b      	movs	r3, r1
 8004718:	0020      	movs	r0, r4
 800471a:	0029      	movs	r1, r5
 800471c:	f7fe f842 	bl	80027a4 <__aeabi_dsub>
 8004720:	0002      	movs	r2, r0
 8004722:	000b      	movs	r3, r1
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	638a      	str	r2, [r1, #56]	; 0x38
 8004728:	63cb      	str	r3, [r1, #60]	; 0x3c
    Kalman->P[1][1] -= K[1] * P01_temp;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800472e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8004730:	19bb      	adds	r3, r7, r6
 8004732:	6898      	ldr	r0, [r3, #8]
 8004734:	68d9      	ldr	r1, [r3, #12]
 8004736:	6a3a      	ldr	r2, [r7, #32]
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f7fd fd71 	bl	8002220 <__aeabi_dmul>
 800473e:	0002      	movs	r2, r0
 8004740:	000b      	movs	r3, r1
 8004742:	0020      	movs	r0, r4
 8004744:	0029      	movs	r1, r5
 8004746:	f7fe f82d 	bl	80027a4 <__aeabi_dsub>
 800474a:	0002      	movs	r2, r0
 800474c:	000b      	movs	r3, r1
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	640a      	str	r2, [r1, #64]	; 0x40
 8004752:	644b      	str	r3, [r1, #68]	; 0x44

    return Kalman->angle;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	69db      	ldr	r3, [r3, #28]
};
 800475a:	0010      	movs	r0, r2
 800475c:	0019      	movs	r1, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b013      	add	sp, #76	; 0x4c
 8004762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004764 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	0004      	movs	r4, r0
 800476c:	0008      	movs	r0, r1
 800476e:	60ba      	str	r2, [r7, #8]
 8004770:	0019      	movs	r1, r3
 8004772:	230e      	movs	r3, #14
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	1c22      	adds	r2, r4, #0
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	230c      	movs	r3, #12
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	1c02      	adds	r2, r0, #0
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	1dbb      	adds	r3, r7, #6
 8004784:	1c0a      	adds	r2, r1, #0
 8004786:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004788:	1dbb      	adds	r3, r7, #6
 800478a:	2200      	movs	r2, #0
 800478c:	5e9b      	ldrsh	r3, [r3, r2]
 800478e:	3307      	adds	r3, #7
 8004790:	2b00      	cmp	r3, #0
 8004792:	da00      	bge.n	8004796 <SSD1306_DrawBitmap+0x32>
 8004794:	3307      	adds	r3, #7
 8004796:	10db      	asrs	r3, r3, #3
 8004798:	001a      	movs	r2, r3
 800479a:	2310      	movs	r3, #16
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80047a0:	2317      	movs	r3, #23
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 80047a8:	2314      	movs	r3, #20
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	2200      	movs	r2, #0
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	e068      	b.n	8004884 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 80047b2:	2312      	movs	r3, #18
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2200      	movs	r2, #0
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	e048      	b.n	800484e <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 80047bc:	2312      	movs	r3, #18
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	001a      	movs	r2, r3
 80047c4:	2307      	movs	r3, #7
 80047c6:	4013      	ands	r3, r2
 80047c8:	d006      	beq.n	80047d8 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 80047ca:	2317      	movs	r3, #23
 80047cc:	18fa      	adds	r2, r7, r3
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	18db      	adds	r3, r3, r3
 80047d4:	7013      	strb	r3, [r2, #0]
 80047d6:	e019      	b.n	800480c <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80047d8:	2314      	movs	r3, #20
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	2200      	movs	r2, #0
 80047de:	5e9b      	ldrsh	r3, [r3, r2]
 80047e0:	2210      	movs	r2, #16
 80047e2:	18ba      	adds	r2, r7, r2
 80047e4:	2100      	movs	r1, #0
 80047e6:	5e52      	ldrsh	r2, [r2, r1]
 80047e8:	435a      	muls	r2, r3
 80047ea:	2312      	movs	r3, #18
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	2100      	movs	r1, #0
 80047f0:	5e5b      	ldrsh	r3, [r3, r1]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da00      	bge.n	80047f8 <SSD1306_DrawBitmap+0x94>
 80047f6:	3307      	adds	r3, #7
 80047f8:	10db      	asrs	r3, r3, #3
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	18d3      	adds	r3, r2, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	189a      	adds	r2, r3, r2
 8004804:	2317      	movs	r3, #23
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800480c:	2317      	movs	r3, #23
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b25b      	sxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	da11      	bge.n	800483c <SSD1306_DrawBitmap+0xd8>
 8004818:	230e      	movs	r3, #14
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	2312      	movs	r3, #18
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	18d3      	adds	r3, r2, r3
 8004826:	b298      	uxth	r0, r3
 8004828:	230c      	movs	r3, #12
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	8819      	ldrh	r1, [r3, #0]
 800482e:	232c      	movs	r3, #44	; 0x2c
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	001a      	movs	r2, r3
 8004838:	f000 f946 	bl	8004ac8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800483c:	2112      	movs	r1, #18
 800483e:	187b      	adds	r3, r7, r1
 8004840:	2200      	movs	r2, #0
 8004842:	5e9b      	ldrsh	r3, [r3, r2]
 8004844:	b29b      	uxth	r3, r3
 8004846:	3301      	adds	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	187b      	adds	r3, r7, r1
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	2312      	movs	r3, #18
 8004850:	18fa      	adds	r2, r7, r3
 8004852:	1dbb      	adds	r3, r7, #6
 8004854:	2100      	movs	r1, #0
 8004856:	5e52      	ldrsh	r2, [r2, r1]
 8004858:	2100      	movs	r1, #0
 800485a:	5e5b      	ldrsh	r3, [r3, r1]
 800485c:	429a      	cmp	r2, r3
 800485e:	dbad      	blt.n	80047bc <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8004860:	2114      	movs	r1, #20
 8004862:	187b      	adds	r3, r7, r1
 8004864:	2200      	movs	r2, #0
 8004866:	5e9b      	ldrsh	r3, [r3, r2]
 8004868:	b29b      	uxth	r3, r3
 800486a:	3301      	adds	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	187b      	adds	r3, r7, r1
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	210c      	movs	r1, #12
 8004874:	187b      	adds	r3, r7, r1
 8004876:	2200      	movs	r2, #0
 8004878:	5e9b      	ldrsh	r3, [r3, r2]
 800487a:	b29b      	uxth	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	187b      	adds	r3, r7, r1
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	2314      	movs	r3, #20
 8004886:	18fa      	adds	r2, r7, r3
 8004888:	2328      	movs	r3, #40	; 0x28
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	2100      	movs	r1, #0
 800488e:	5e52      	ldrsh	r2, [r2, r1]
 8004890:	2100      	movs	r1, #0
 8004892:	5e5b      	ldrsh	r3, [r3, r1]
 8004894:	429a      	cmp	r2, r3
 8004896:	db8c      	blt.n	80047b2 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b007      	add	sp, #28
 80048a0:	bd90      	pop	{r4, r7, pc}
	...

080048a4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80048aa:	f000 fa45 	bl	8004d38 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80048ae:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <SSD1306_Init+0x178>)
 80048b0:	485b      	ldr	r0, [pc, #364]	; (8004a20 <SSD1306_Init+0x17c>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	2178      	movs	r1, #120	; 0x78
 80048b6:	f001 fb1d 	bl	8005ef4 <HAL_I2C_IsDeviceReady>
 80048ba:	1e03      	subs	r3, r0, #0
 80048bc:	d001      	beq.n	80048c2 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	e0a8      	b.n	8004a14 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80048c2:	4b58      	ldr	r3, [pc, #352]	; (8004a24 <SSD1306_Init+0x180>)
 80048c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80048c6:	e002      	b.n	80048ce <SSD1306_Init+0x2a>
		p--;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f9      	bne.n	80048c8 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80048d4:	22ae      	movs	r2, #174	; 0xae
 80048d6:	2100      	movs	r1, #0
 80048d8:	2078      	movs	r0, #120	; 0x78
 80048da:	f000 faad 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80048de:	2220      	movs	r2, #32
 80048e0:	2100      	movs	r1, #0
 80048e2:	2078      	movs	r0, #120	; 0x78
 80048e4:	f000 faa8 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80048e8:	2210      	movs	r2, #16
 80048ea:	2100      	movs	r1, #0
 80048ec:	2078      	movs	r0, #120	; 0x78
 80048ee:	f000 faa3 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80048f2:	22b0      	movs	r2, #176	; 0xb0
 80048f4:	2100      	movs	r1, #0
 80048f6:	2078      	movs	r0, #120	; 0x78
 80048f8:	f000 fa9e 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80048fc:	22c8      	movs	r2, #200	; 0xc8
 80048fe:	2100      	movs	r1, #0
 8004900:	2078      	movs	r0, #120	; 0x78
 8004902:	f000 fa99 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	2078      	movs	r0, #120	; 0x78
 800490c:	f000 fa94 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004910:	2210      	movs	r2, #16
 8004912:	2100      	movs	r1, #0
 8004914:	2078      	movs	r0, #120	; 0x78
 8004916:	f000 fa8f 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	2100      	movs	r1, #0
 800491e:	2078      	movs	r0, #120	; 0x78
 8004920:	f000 fa8a 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004924:	2281      	movs	r2, #129	; 0x81
 8004926:	2100      	movs	r1, #0
 8004928:	2078      	movs	r0, #120	; 0x78
 800492a:	f000 fa85 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800492e:	22ff      	movs	r2, #255	; 0xff
 8004930:	2100      	movs	r1, #0
 8004932:	2078      	movs	r0, #120	; 0x78
 8004934:	f000 fa80 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004938:	22a1      	movs	r2, #161	; 0xa1
 800493a:	2100      	movs	r1, #0
 800493c:	2078      	movs	r0, #120	; 0x78
 800493e:	f000 fa7b 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004942:	22a6      	movs	r2, #166	; 0xa6
 8004944:	2100      	movs	r1, #0
 8004946:	2078      	movs	r0, #120	; 0x78
 8004948:	f000 fa76 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800494c:	22a8      	movs	r2, #168	; 0xa8
 800494e:	2100      	movs	r1, #0
 8004950:	2078      	movs	r0, #120	; 0x78
 8004952:	f000 fa71 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004956:	223f      	movs	r2, #63	; 0x3f
 8004958:	2100      	movs	r1, #0
 800495a:	2078      	movs	r0, #120	; 0x78
 800495c:	f000 fa6c 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004960:	22a4      	movs	r2, #164	; 0xa4
 8004962:	2100      	movs	r1, #0
 8004964:	2078      	movs	r0, #120	; 0x78
 8004966:	f000 fa67 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800496a:	22d3      	movs	r2, #211	; 0xd3
 800496c:	2100      	movs	r1, #0
 800496e:	2078      	movs	r0, #120	; 0x78
 8004970:	f000 fa62 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	2078      	movs	r0, #120	; 0x78
 800497a:	f000 fa5d 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800497e:	22d5      	movs	r2, #213	; 0xd5
 8004980:	2100      	movs	r1, #0
 8004982:	2078      	movs	r0, #120	; 0x78
 8004984:	f000 fa58 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004988:	22f0      	movs	r2, #240	; 0xf0
 800498a:	2100      	movs	r1, #0
 800498c:	2078      	movs	r0, #120	; 0x78
 800498e:	f000 fa53 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004992:	22d9      	movs	r2, #217	; 0xd9
 8004994:	2100      	movs	r1, #0
 8004996:	2078      	movs	r0, #120	; 0x78
 8004998:	f000 fa4e 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800499c:	2222      	movs	r2, #34	; 0x22
 800499e:	2100      	movs	r1, #0
 80049a0:	2078      	movs	r0, #120	; 0x78
 80049a2:	f000 fa49 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80049a6:	22da      	movs	r2, #218	; 0xda
 80049a8:	2100      	movs	r1, #0
 80049aa:	2078      	movs	r0, #120	; 0x78
 80049ac:	f000 fa44 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80049b0:	2212      	movs	r2, #18
 80049b2:	2100      	movs	r1, #0
 80049b4:	2078      	movs	r0, #120	; 0x78
 80049b6:	f000 fa3f 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80049ba:	22db      	movs	r2, #219	; 0xdb
 80049bc:	2100      	movs	r1, #0
 80049be:	2078      	movs	r0, #120	; 0x78
 80049c0:	f000 fa3a 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80049c4:	2220      	movs	r2, #32
 80049c6:	2100      	movs	r1, #0
 80049c8:	2078      	movs	r0, #120	; 0x78
 80049ca:	f000 fa35 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80049ce:	228d      	movs	r2, #141	; 0x8d
 80049d0:	2100      	movs	r1, #0
 80049d2:	2078      	movs	r0, #120	; 0x78
 80049d4:	f000 fa30 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80049d8:	2214      	movs	r2, #20
 80049da:	2100      	movs	r1, #0
 80049dc:	2078      	movs	r0, #120	; 0x78
 80049de:	f000 fa2b 	bl	8004e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80049e2:	22af      	movs	r2, #175	; 0xaf
 80049e4:	2100      	movs	r1, #0
 80049e6:	2078      	movs	r0, #120	; 0x78
 80049e8:	f000 fa26 	bl	8004e38 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80049ec:	222e      	movs	r2, #46	; 0x2e
 80049ee:	2100      	movs	r1, #0
 80049f0:	2078      	movs	r0, #120	; 0x78
 80049f2:	f000 fa21 	bl	8004e38 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80049f6:	2000      	movs	r0, #0
 80049f8:	f000 f84c 	bl	8004a94 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80049fc:	f000 f816 	bl	8004a2c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8004a00:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <SSD1306_Init+0x184>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <SSD1306_Init+0x184>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <SSD1306_Init+0x184>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8004a12:	2301      	movs	r3, #1
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	00004e20 	.word	0x00004e20
 8004a20:	200002d4 	.word	0x200002d4
 8004a24:	000009c4 	.word	0x000009c4
 8004a28:	20000788 	.word	0x20000788

08004a2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e021      	b.n	8004a7e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004a3a:	1dfb      	adds	r3, r7, #7
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	3b50      	subs	r3, #80	; 0x50
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	001a      	movs	r2, r3
 8004a44:	2100      	movs	r1, #0
 8004a46:	2078      	movs	r0, #120	; 0x78
 8004a48:	f000 f9f6 	bl	8004e38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2078      	movs	r0, #120	; 0x78
 8004a52:	f000 f9f1 	bl	8004e38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004a56:	2210      	movs	r2, #16
 8004a58:	2100      	movs	r1, #0
 8004a5a:	2078      	movs	r0, #120	; 0x78
 8004a5c:	f000 f9ec 	bl	8004e38 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	01da      	lsls	r2, r3, #7
 8004a66:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <SSD1306_UpdateScreen+0x64>)
 8004a68:	18d2      	adds	r2, r2, r3
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	2078      	movs	r0, #120	; 0x78
 8004a70:	f000 f976 	bl	8004d60 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	1dfb      	adds	r3, r7, #7
 8004a7a:	3201      	adds	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	1dfb      	adds	r3, r7, #7
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b07      	cmp	r3, #7
 8004a84:	d9d9      	bls.n	8004a3a <SSD1306_UpdateScreen+0xe>
	}
}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000388 	.word	0x20000388

08004a94 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <SSD1306_Fill+0x18>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <SSD1306_Fill+0x1a>
 8004aac:	23ff      	movs	r3, #255	; 0xff
 8004aae:	2280      	movs	r2, #128	; 0x80
 8004ab0:	00d2      	lsls	r2, r2, #3
 8004ab2:	4804      	ldr	r0, [pc, #16]	; (8004ac4 <SSD1306_Fill+0x30>)
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	f002 fc77 	bl	80073a8 <memset>
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b002      	add	sp, #8
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	20000388 	.word	0x20000388

08004ac8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	0004      	movs	r4, r0
 8004ad0:	0008      	movs	r0, r1
 8004ad2:	0011      	movs	r1, r2
 8004ad4:	1dbb      	adds	r3, r7, #6
 8004ad6:	1c22      	adds	r2, r4, #0
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	1c02      	adds	r2, r0, #0
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	1cfb      	adds	r3, r7, #3
 8004ae2:	1c0a      	adds	r2, r1, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
	if (
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	2b7f      	cmp	r3, #127	; 0x7f
 8004aec:	d852      	bhi.n	8004b94 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	2b3f      	cmp	r3, #63	; 0x3f
 8004af4:	d84e      	bhi.n	8004b94 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004af6:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <SSD1306_DrawPixel+0xd4>)
 8004af8:	791b      	ldrb	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8004afe:	1cfb      	adds	r3, r7, #3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	425a      	negs	r2, r3
 8004b04:	4153      	adcs	r3, r2
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	1cfb      	adds	r3, r7, #3
 8004b0a:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004b0c:	1cfb      	adds	r3, r7, #3
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d11e      	bne.n	8004b52 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004b14:	1dbb      	adds	r3, r7, #6
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	1d3b      	adds	r3, r7, #4
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	b298      	uxth	r0, r3
 8004b20:	0003      	movs	r3, r0
 8004b22:	01db      	lsls	r3, r3, #7
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <SSD1306_DrawPixel+0xd8>)
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
 8004b2a:	b25a      	sxtb	r2, r3
 8004b2c:	1d3b      	adds	r3, r7, #4
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	2107      	movs	r1, #7
 8004b32:	400b      	ands	r3, r1
 8004b34:	2101      	movs	r1, #1
 8004b36:	4099      	lsls	r1, r3
 8004b38:	000b      	movs	r3, r1
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	b259      	sxtb	r1, r3
 8004b40:	1dbb      	adds	r3, r7, #6
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	0003      	movs	r3, r0
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	b2c9      	uxtb	r1, r1
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <SSD1306_DrawPixel+0xd8>)
 8004b4e:	54d1      	strb	r1, [r2, r3]
 8004b50:	e021      	b.n	8004b96 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	b298      	uxth	r0, r3
 8004b5e:	0003      	movs	r3, r0
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	18d3      	adds	r3, r2, r3
 8004b64:	4a0e      	ldr	r2, [pc, #56]	; (8004ba0 <SSD1306_DrawPixel+0xd8>)
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	1d3a      	adds	r2, r7, #4
 8004b6c:	8812      	ldrh	r2, [r2, #0]
 8004b6e:	2107      	movs	r1, #7
 8004b70:	400a      	ands	r2, r1
 8004b72:	2101      	movs	r1, #1
 8004b74:	4091      	lsls	r1, r2
 8004b76:	000a      	movs	r2, r1
 8004b78:	b252      	sxtb	r2, r2
 8004b7a:	43d2      	mvns	r2, r2
 8004b7c:	b252      	sxtb	r2, r2
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b259      	sxtb	r1, r3
 8004b82:	1dbb      	adds	r3, r7, #6
 8004b84:	881a      	ldrh	r2, [r3, #0]
 8004b86:	0003      	movs	r3, r0
 8004b88:	01db      	lsls	r3, r3, #7
 8004b8a:	18d3      	adds	r3, r2, r3
 8004b8c:	b2c9      	uxtb	r1, r1
 8004b8e:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <SSD1306_DrawPixel+0xd8>)
 8004b90:	54d1      	strb	r1, [r2, r3]
 8004b92:	e000      	b.n	8004b96 <SSD1306_DrawPixel+0xce>
		return;
 8004b94:	46c0      	nop			; (mov r8, r8)
	}
}
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b003      	add	sp, #12
 8004b9a:	bd90      	pop	{r4, r7, pc}
 8004b9c:	20000788 	.word	0x20000788
 8004ba0:	20000388 	.word	0x20000388

08004ba4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	0002      	movs	r2, r0
 8004bac:	1dbb      	adds	r3, r7, #6
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	1d3b      	adds	r3, r7, #4
 8004bb2:	1c0a      	adds	r2, r1, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <SSD1306_GotoXY+0x2c>)
 8004bb8:	1dba      	adds	r2, r7, #6
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <SSD1306_GotoXY+0x2c>)
 8004bc0:	1d3a      	adds	r2, r7, #4
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	805a      	strh	r2, [r3, #2]
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b002      	add	sp, #8
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	20000788 	.word	0x20000788

08004bd4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6039      	str	r1, [r7, #0]
 8004bdc:	0011      	movs	r1, r2
 8004bde:	1dfb      	adds	r3, r7, #7
 8004be0:	1c02      	adds	r2, r0, #0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	1dbb      	adds	r3, r7, #6
 8004be6:	1c0a      	adds	r2, r1, #0
 8004be8:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004bea:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	001a      	movs	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	18d3      	adds	r3, r2, r3
	if (
 8004bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf8:	dc07      	bgt.n	8004c0a <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004bfc:	885b      	ldrh	r3, [r3, #2]
 8004bfe:	001a      	movs	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004c06:	2b3f      	cmp	r3, #63	; 0x3f
 8004c08:	dd01      	ble.n	8004c0e <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e05e      	b.n	8004ccc <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e04a      	b.n	8004caa <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	1dfb      	adds	r3, r7, #7
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	3b20      	subs	r3, #32
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	7849      	ldrb	r1, [r1, #1]
 8004c22:	434b      	muls	r3, r1
 8004c24:	0019      	movs	r1, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	18cb      	adds	r3, r1, r3
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	18d3      	adds	r3, r2, r3
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e02f      	b.n	8004c98 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	4013      	ands	r3, r2
 8004c44:	d011      	beq.n	8004c6a <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004c46:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	18d3      	adds	r3, r2, r3
 8004c50:	b298      	uxth	r0, r3
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004c54:	885a      	ldrh	r2, [r3, #2]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	18d3      	adds	r3, r2, r3
 8004c5c:	b299      	uxth	r1, r3
 8004c5e:	1dbb      	adds	r3, r7, #6
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	001a      	movs	r2, r3
 8004c64:	f7ff ff30 	bl	8004ac8 <SSD1306_DrawPixel>
 8004c68:	e013      	b.n	8004c92 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	b298      	uxth	r0, r3
 8004c76:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004c78:	885a      	ldrh	r2, [r3, #2]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	b299      	uxth	r1, r3
 8004c82:	1dbb      	adds	r3, r7, #6
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	425a      	negs	r2, r3
 8004c88:	4153      	adcs	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	f7ff ff1b 	bl	8004ac8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3301      	adds	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d3c9      	bcc.n	8004c38 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	001a      	movs	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d3ae      	bcc.n	8004c14 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004cb8:	881a      	ldrh	r2, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <SSD1306_Putc+0x100>)
 8004cc6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	781b      	ldrb	r3, [r3, #0]
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b006      	add	sp, #24
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000788 	.word	0x20000788

08004cd8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	1dfb      	adds	r3, r7, #7
 8004ce4:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8004ce6:	e013      	b.n	8004d10 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	7818      	ldrb	r0, [r3, #0]
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	0019      	movs	r1, r3
 8004cf4:	f7ff ff6e 	bl	8004bd4 <SSD1306_Putc>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d002      	beq.n	8004d0a <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e7      	bne.n	8004ce8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7ff feb3 	bl	8004a94 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8004d2e:	f7ff fe7d 	bl	8004a2c <SSD1306_UpdateScreen>
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <ssd1306_I2C_Init+0x24>)
 8004d40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004d42:	e002      	b.n	8004d4a <ssd1306_I2C_Init+0x12>
		p--;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f9      	bne.n	8004d44 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	0003d090 	.word	0x0003d090

08004d60 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b0c6      	sub	sp, #280	; 0x118
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	0004      	movs	r4, r0
 8004d68:	0008      	movs	r0, r1
 8004d6a:	603a      	str	r2, [r7, #0]
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <ssd1306_I2C_WriteMulti+0xc4>)
 8004d70:	2588      	movs	r5, #136	; 0x88
 8004d72:	006d      	lsls	r5, r5, #1
 8004d74:	195b      	adds	r3, r3, r5
 8004d76:	19db      	adds	r3, r3, r7
 8004d78:	1c22      	adds	r2, r4, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <ssd1306_I2C_WriteMulti+0xc8>)
 8004d7e:	002c      	movs	r4, r5
 8004d80:	191b      	adds	r3, r3, r4
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	1c02      	adds	r2, r0, #0
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	4b28      	ldr	r3, [pc, #160]	; (8004e2c <ssd1306_I2C_WriteMulti+0xcc>)
 8004d8a:	0020      	movs	r0, r4
 8004d8c:	181b      	adds	r3, r3, r0
 8004d8e:	19db      	adds	r3, r3, r7
 8004d90:	1c0a      	adds	r2, r1, #0
 8004d92:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004d94:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <ssd1306_I2C_WriteMulti+0xd0>)
 8004d96:	181b      	adds	r3, r3, r0
 8004d98:	19db      	adds	r3, r3, r7
 8004d9a:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <ssd1306_I2C_WriteMulti+0xc8>)
 8004d9c:	1812      	adds	r2, r2, r0
 8004d9e:	19d2      	adds	r2, r2, r7
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004da4:	2310      	movs	r3, #16
 8004da6:	33ff      	adds	r3, #255	; 0xff
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e014      	b.n	8004dda <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8004db0:	2010      	movs	r0, #16
 8004db2:	30ff      	adds	r0, #255	; 0xff
 8004db4:	183b      	adds	r3, r7, r0
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	18d2      	adds	r2, r2, r3
 8004dbc:	183b      	adds	r3, r7, r0
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	7811      	ldrb	r1, [r2, #0]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <ssd1306_I2C_WriteMulti+0xd0>)
 8004dc6:	2488      	movs	r4, #136	; 0x88
 8004dc8:	0064      	lsls	r4, r4, #1
 8004dca:	1912      	adds	r2, r2, r4
 8004dcc:	19d2      	adds	r2, r2, r7
 8004dce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004dd0:	183b      	adds	r3, r7, r0
 8004dd2:	781a      	ldrb	r2, [r3, #0]
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	3201      	adds	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	2310      	movs	r3, #16
 8004ddc:	33ff      	adds	r3, #255	; 0xff
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <ssd1306_I2C_WriteMulti+0xcc>)
 8004de6:	2188      	movs	r1, #136	; 0x88
 8004de8:	0049      	lsls	r1, r1, #1
 8004dea:	1852      	adds	r2, r2, r1
 8004dec:	19d2      	adds	r2, r2, r7
 8004dee:	8812      	ldrh	r2, [r2, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d8dd      	bhi.n	8004db0 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <ssd1306_I2C_WriteMulti+0xc4>)
 8004df6:	000a      	movs	r2, r1
 8004df8:	189b      	adds	r3, r3, r2
 8004dfa:	19db      	adds	r3, r3, r7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b299      	uxth	r1, r3
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <ssd1306_I2C_WriteMulti+0xcc>)
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	19db      	adds	r3, r3, r7
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	220c      	movs	r2, #12
 8004e0e:	18ba      	adds	r2, r7, r2
 8004e10:	4808      	ldr	r0, [pc, #32]	; (8004e34 <ssd1306_I2C_WriteMulti+0xd4>)
 8004e12:	240a      	movs	r4, #10
 8004e14:	9400      	str	r4, [sp, #0]
 8004e16:	f000 fd03 	bl	8005820 <HAL_I2C_Master_Transmit>
}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b044      	add	sp, #272	; 0x110
 8004e20:	bdb0      	pop	{r4, r5, r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	fffffef7 	.word	0xfffffef7
 8004e28:	fffffef6 	.word	0xfffffef6
 8004e2c:	fffffef4 	.word	0xfffffef4
 8004e30:	fffffefc 	.word	0xfffffefc
 8004e34:	200002d4 	.word	0x200002d4

08004e38 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	0004      	movs	r4, r0
 8004e40:	0008      	movs	r0, r1
 8004e42:	0011      	movs	r1, r2
 8004e44:	1dfb      	adds	r3, r7, #7
 8004e46:	1c22      	adds	r2, r4, #0
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	1dbb      	adds	r3, r7, #6
 8004e4c:	1c02      	adds	r2, r0, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	1d7b      	adds	r3, r7, #5
 8004e52:	1c0a      	adds	r2, r1, #0
 8004e54:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8004e56:	200c      	movs	r0, #12
 8004e58:	183b      	adds	r3, r7, r0
 8004e5a:	1dba      	adds	r2, r7, #6
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	1d7a      	adds	r2, r7, #5
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	b299      	uxth	r1, r3
 8004e6e:	183a      	adds	r2, r7, r0
 8004e70:	4804      	ldr	r0, [pc, #16]	; (8004e84 <ssd1306_I2C_Write+0x4c>)
 8004e72:	230a      	movs	r3, #10
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2302      	movs	r3, #2
 8004e78:	f000 fcd2 	bl	8005820 <HAL_I2C_Master_Transmit>
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b005      	add	sp, #20
 8004e82:	bd90      	pop	{r4, r7, pc}
 8004e84:	200002d4 	.word	0x200002d4

08004e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <HAL_MspInit+0x44>)
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <HAL_MspInit+0x44>)
 8004e94:	2101      	movs	r1, #1
 8004e96:	430a      	orrs	r2, r1
 8004e98:	619a      	str	r2, [r3, #24]
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <HAL_MspInit+0x44>)
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <HAL_MspInit+0x44>)
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_MspInit+0x44>)
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0549      	lsls	r1, r1, #21
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	61da      	str	r2, [r3, #28]
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_MspInit+0x44>)
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	055b      	lsls	r3, r3, #21
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b002      	add	sp, #8
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	40021000 	.word	0x40021000

08004ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b08b      	sub	sp, #44	; 0x2c
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	2414      	movs	r4, #20
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	0018      	movs	r0, r3
 8004ede:	2314      	movs	r3, #20
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f002 fa60 	bl	80073a8 <memset>
  if(hi2c->Instance==I2C1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <HAL_I2C_MspInit+0x90>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d131      	bne.n	8004f56 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <HAL_I2C_MspInit+0x94>)
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_I2C_MspInit+0x94>)
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	02c9      	lsls	r1, r1, #11
 8004efc:	430a      	orrs	r2, r1
 8004efe:	615a      	str	r2, [r3, #20]
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_I2C_MspInit+0x94>)
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	02db      	lsls	r3, r3, #11
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f0e:	0021      	movs	r1, r4
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	22c0      	movs	r2, #192	; 0xc0
 8004f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	2212      	movs	r2, #18
 8004f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f22:	187b      	adds	r3, r7, r1
 8004f24:	2203      	movs	r2, #3
 8004f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2e:	187b      	adds	r3, r7, r1
 8004f30:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <HAL_I2C_MspInit+0x98>)
 8004f32:	0019      	movs	r1, r3
 8004f34:	0010      	movs	r0, r2
 8004f36:	f000 fa6d 	bl	8005414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_I2C_MspInit+0x94>)
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <HAL_I2C_MspInit+0x94>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	0389      	lsls	r1, r1, #14
 8004f44:	430a      	orrs	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_I2C_MspInit+0x94>)
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	039b      	lsls	r3, r3, #14
 8004f50:	4013      	ands	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b00b      	add	sp, #44	; 0x2c
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	40005400 	.word	0x40005400
 8004f64:	40021000 	.word	0x40021000
 8004f68:	48000400 	.word	0x48000400

08004f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f70:	e7fe      	b.n	8004f70 <NMI_Handler+0x4>

08004f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f76:	e7fe      	b.n	8004f76 <HardFault_Handler+0x4>

08004f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f90:	f000 f94c 	bl	800522c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f94:	46c0      	nop			; (mov r8, r8)
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	af00      	add	r7, sp, #0
  return 1;
 8004f9e:	2301      	movs	r3, #1
}
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <_kill>:

int _kill(int pid, int sig)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fb0:	f002 fa54 	bl	800745c <__errno>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	2216      	movs	r2, #22
 8004fb8:	601a      	str	r2, [r3, #0]
  return -1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	425b      	negs	r3, r3
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_exit>:

void _exit (int status)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fce:	2301      	movs	r3, #1
 8004fd0:	425a      	negs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0011      	movs	r1, r2
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f7ff ffe5 	bl	8004fa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fdc:	e7fe      	b.n	8004fdc <_exit+0x16>

08004fde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e00a      	b.n	8005006 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ff0:	e000      	b.n	8004ff4 <_read+0x16>
 8004ff2:	bf00      	nop
 8004ff4:	0001      	movs	r1, r0
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	60ba      	str	r2, [r7, #8]
 8004ffc:	b2ca      	uxtb	r2, r1
 8004ffe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3301      	adds	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	dbf0      	blt.n	8004ff0 <_read+0x12>
  }

  return len;
 800500e:	687b      	ldr	r3, [r7, #4]
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	b006      	add	sp, #24
 8005016:	bd80      	pop	{r7, pc}

08005018 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e009      	b.n	800503e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	60ba      	str	r2, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	0018      	movs	r0, r3
 8005034:	e000      	b.n	8005038 <_write+0x20>
 8005036:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3301      	adds	r3, #1
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	429a      	cmp	r2, r3
 8005044:	dbf1      	blt.n	800502a <_write+0x12>
  }
  return len;
 8005046:	687b      	ldr	r3, [r7, #4]
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b006      	add	sp, #24
 800504e:	bd80      	pop	{r7, pc}

08005050 <_close>:

int _close(int file)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005058:	2301      	movs	r3, #1
 800505a:	425b      	negs	r3, r3
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	b002      	add	sp, #8
 8005062:	bd80      	pop	{r7, pc}

08005064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	0192      	lsls	r2, r2, #6
 8005074:	605a      	str	r2, [r3, #4]
  return 0;
 8005076:	2300      	movs	r3, #0
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}

08005080 <_isatty>:

int _isatty(int file)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005088:	2301      	movs	r3, #1
}
 800508a:	0018      	movs	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	b002      	add	sp, #8
 8005090:	bd80      	pop	{r7, pc}

08005092 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b004      	add	sp, #16
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <_sbrk+0x5c>)
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <_sbrk+0x60>)
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <_sbrk+0x64>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <_sbrk+0x64>)
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <_sbrk+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <_sbrk+0x64>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d207      	bcs.n	80050e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050d8:	f002 f9c0 	bl	800745c <__errno>
 80050dc:	0003      	movs	r3, r0
 80050de:	220c      	movs	r2, #12
 80050e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	425b      	negs	r3, r3
 80050e6:	e009      	b.n	80050fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <_sbrk+0x64>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <_sbrk+0x64>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	18d2      	adds	r2, r2, r3
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <_sbrk+0x64>)
 80050f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b006      	add	sp, #24
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20002000 	.word	0x20002000
 8005108:	00000400 	.word	0x00000400
 800510c:	20000790 	.word	0x20000790
 8005110:	200008e8 	.word	0x200008e8

08005114 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <soundBuzzer>:
 */

#include "utilities.h"

// Function to sound buzzer for a specified duration
void soundBuzzer(uint32_t duration_ms) {
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
    GPIOA->BSRR = (1 << 1); // Turn on Buzzer
 8005126:	2390      	movs	r3, #144	; 0x90
 8005128:	05db      	lsls	r3, r3, #23
 800512a:	2202      	movs	r2, #2
 800512c:	619a      	str	r2, [r3, #24]
    HAL_Delay(duration_ms); // Delay for duration
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 f897 	bl	8005264 <HAL_Delay>
    GPIOA->BSRR = (1 << (1 + 16)); // Turn off Buzzer
 8005136:	2390      	movs	r3, #144	; 0x90
 8005138:	05db      	lsls	r3, r3, #23
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	0292      	lsls	r2, r2, #10
 800513e:	619a      	str	r2, [r3, #24]
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}

08005148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800514a:	4685      	mov	sp, r0

  /* Call the clock system initialization function.*/
  bl  SystemInit
 800514c:	f7ff ffe2 	bl	8005114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005150:	480c      	ldr	r0, [pc, #48]	; (8005184 <LoopForever+0x6>)
  ldr r1, =_edata
 8005152:	490d      	ldr	r1, [pc, #52]	; (8005188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <LoopForever+0xe>)
  movs r3, #0
 8005156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005158:	e002      	b.n	8005160 <LoopCopyDataInit>

0800515a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800515a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800515c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800515e:	3304      	adds	r3, #4

08005160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005164:	d3f9      	bcc.n	800515a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005168:	4c0a      	ldr	r4, [pc, #40]	; (8005194 <LoopForever+0x16>)
  movs r3, #0
 800516a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800516c:	e001      	b.n	8005172 <LoopFillZerobss>

0800516e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800516e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005170:	3204      	adds	r2, #4

08005172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005174:	d3fb      	bcc.n	800516e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005176:	f002 f977 	bl	8007468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800517a:	f7fe fdbf 	bl	8003cfc <main>

0800517e <LoopForever>:

LoopForever:
    b LoopForever
 800517e:	e7fe      	b.n	800517e <LoopForever>
  ldr   r0, =_estack
 8005180:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005188:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 800518c:	0800bc60 	.word	0x0800bc60
  ldr r2, =_sbss
 8005190:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8005194:	200008e4 	.word	0x200008e4

08005198 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005198:	e7fe      	b.n	8005198 <ADC1_COMP_IRQHandler>
	...

0800519c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <HAL_Init+0x24>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_Init+0x24>)
 80051a6:	2110      	movs	r1, #16
 80051a8:	430a      	orrs	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80051ac:	2003      	movs	r0, #3
 80051ae:	f000 f809 	bl	80051c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051b2:	f7ff fe69 	bl	8004e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	0018      	movs	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	40022000 	.word	0x40022000

080051c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051cc:	4b14      	ldr	r3, [pc, #80]	; (8005220 <HAL_InitTick+0x5c>)
 80051ce:	681c      	ldr	r4, [r3, #0]
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <HAL_InitTick+0x60>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	0019      	movs	r1, r3
 80051d6:	23fa      	movs	r3, #250	; 0xfa
 80051d8:	0098      	lsls	r0, r3, #2
 80051da:	f7fa ffb1 	bl	8000140 <__udivsi3>
 80051de:	0003      	movs	r3, r0
 80051e0:	0019      	movs	r1, r3
 80051e2:	0020      	movs	r0, r4
 80051e4:	f7fa ffac 	bl	8000140 <__udivsi3>
 80051e8:	0003      	movs	r3, r0
 80051ea:	0018      	movs	r0, r3
 80051ec:	f000 f905 	bl	80053fa <HAL_SYSTICK_Config>
 80051f0:	1e03      	subs	r3, r0, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e00f      	b.n	8005218 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d80b      	bhi.n	8005216 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	2301      	movs	r3, #1
 8005202:	425b      	negs	r3, r3
 8005204:	2200      	movs	r2, #0
 8005206:	0018      	movs	r0, r3
 8005208:	f000 f8e2 	bl	80053d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_InitTick+0x64>)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	e000      	b.n	8005218 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
}
 8005218:	0018      	movs	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	b003      	add	sp, #12
 800521e:	bd90      	pop	{r4, r7, pc}
 8005220:	200000a8 	.word	0x200000a8
 8005224:	200000b0 	.word	0x200000b0
 8005228:	200000ac 	.word	0x200000ac

0800522c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_IncTick+0x1c>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	001a      	movs	r2, r3
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_IncTick+0x20>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	18d2      	adds	r2, r2, r3
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <HAL_IncTick+0x20>)
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	200000b0 	.word	0x200000b0
 800524c:	20000794 	.word	0x20000794

08005250 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  return uwTick;
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <HAL_GetTick+0x10>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	20000794 	.word	0x20000794

08005264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800526c:	f7ff fff0 	bl	8005250 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	d005      	beq.n	800528a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_Delay+0x44>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	001a      	movs	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	189b      	adds	r3, r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	f7ff ffe0 	bl	8005250 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	429a      	cmp	r2, r3
 800529a:	d8f7      	bhi.n	800528c <HAL_Delay+0x28>
  {
  }
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	200000b0 	.word	0x200000b0

080052ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	0002      	movs	r2, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	1dfb      	adds	r3, r7, #7
 80052b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80052ba:	1dfb      	adds	r3, r7, #7
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b7f      	cmp	r3, #127	; 0x7f
 80052c0:	d828      	bhi.n	8005314 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80052c2:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <__NVIC_SetPriority+0xd4>)
 80052c4:	1dfb      	adds	r3, r7, #7
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b25b      	sxtb	r3, r3
 80052ca:	089b      	lsrs	r3, r3, #2
 80052cc:	33c0      	adds	r3, #192	; 0xc0
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	589b      	ldr	r3, [r3, r2]
 80052d2:	1dfa      	adds	r2, r7, #7
 80052d4:	7812      	ldrb	r2, [r2, #0]
 80052d6:	0011      	movs	r1, r2
 80052d8:	2203      	movs	r2, #3
 80052da:	400a      	ands	r2, r1
 80052dc:	00d2      	lsls	r2, r2, #3
 80052de:	21ff      	movs	r1, #255	; 0xff
 80052e0:	4091      	lsls	r1, r2
 80052e2:	000a      	movs	r2, r1
 80052e4:	43d2      	mvns	r2, r2
 80052e6:	401a      	ands	r2, r3
 80052e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	22ff      	movs	r2, #255	; 0xff
 80052f0:	401a      	ands	r2, r3
 80052f2:	1dfb      	adds	r3, r7, #7
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	0018      	movs	r0, r3
 80052f8:	2303      	movs	r3, #3
 80052fa:	4003      	ands	r3, r0
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005300:	481f      	ldr	r0, [pc, #124]	; (8005380 <__NVIC_SetPriority+0xd4>)
 8005302:	1dfb      	adds	r3, r7, #7
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b25b      	sxtb	r3, r3
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	430a      	orrs	r2, r1
 800530c:	33c0      	adds	r3, #192	; 0xc0
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005312:	e031      	b.n	8005378 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005314:	4a1b      	ldr	r2, [pc, #108]	; (8005384 <__NVIC_SetPriority+0xd8>)
 8005316:	1dfb      	adds	r3, r7, #7
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	0019      	movs	r1, r3
 800531c:	230f      	movs	r3, #15
 800531e:	400b      	ands	r3, r1
 8005320:	3b08      	subs	r3, #8
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	3306      	adds	r3, #6
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	18d3      	adds	r3, r2, r3
 800532a:	3304      	adds	r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1dfa      	adds	r2, r7, #7
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	0011      	movs	r1, r2
 8005334:	2203      	movs	r2, #3
 8005336:	400a      	ands	r2, r1
 8005338:	00d2      	lsls	r2, r2, #3
 800533a:	21ff      	movs	r1, #255	; 0xff
 800533c:	4091      	lsls	r1, r2
 800533e:	000a      	movs	r2, r1
 8005340:	43d2      	mvns	r2, r2
 8005342:	401a      	ands	r2, r3
 8005344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	22ff      	movs	r2, #255	; 0xff
 800534c:	401a      	ands	r2, r3
 800534e:	1dfb      	adds	r3, r7, #7
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	0018      	movs	r0, r3
 8005354:	2303      	movs	r3, #3
 8005356:	4003      	ands	r3, r0
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800535c:	4809      	ldr	r0, [pc, #36]	; (8005384 <__NVIC_SetPriority+0xd8>)
 800535e:	1dfb      	adds	r3, r7, #7
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	001c      	movs	r4, r3
 8005364:	230f      	movs	r3, #15
 8005366:	4023      	ands	r3, r4
 8005368:	3b08      	subs	r3, #8
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	430a      	orrs	r2, r1
 800536e:	3306      	adds	r3, #6
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	18c3      	adds	r3, r0, r3
 8005374:	3304      	adds	r3, #4
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b003      	add	sp, #12
 800537e:	bd90      	pop	{r4, r7, pc}
 8005380:	e000e100 	.word	0xe000e100
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	045b      	lsls	r3, r3, #17
 8005398:	429a      	cmp	r2, r3
 800539a:	d301      	bcc.n	80053a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800539c:	2301      	movs	r3, #1
 800539e:	e010      	b.n	80053c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <SysTick_Config+0x44>)
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	3a01      	subs	r2, #1
 80053a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053a8:	2301      	movs	r3, #1
 80053aa:	425b      	negs	r3, r3
 80053ac:	2103      	movs	r1, #3
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7ff ff7c 	bl	80052ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <SysTick_Config+0x44>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ba:	4b04      	ldr	r3, [pc, #16]	; (80053cc <SysTick_Config+0x44>)
 80053bc:	2207      	movs	r2, #7
 80053be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b002      	add	sp, #8
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	e000e010 	.word	0xe000e010

080053d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	210f      	movs	r1, #15
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	1c02      	adds	r2, r0, #0
 80053e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	0011      	movs	r1, r2
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7ff ff5d 	bl	80052ac <__NVIC_SetPriority>
}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b004      	add	sp, #16
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0018      	movs	r0, r3
 8005406:	f7ff ffbf 	bl	8005388 <SysTick_Config>
 800540a:	0003      	movs	r3, r0
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005422:	e14f      	b.n	80056c4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2101      	movs	r1, #1
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4091      	lsls	r1, r2
 800542e:	000a      	movs	r2, r1
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d100      	bne.n	800543c <HAL_GPIO_Init+0x28>
 800543a:	e140      	b.n	80056be <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2203      	movs	r2, #3
 8005442:	4013      	ands	r3, r2
 8005444:	2b01      	cmp	r3, #1
 8005446:	d005      	beq.n	8005454 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2203      	movs	r2, #3
 800544e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005450:	2b02      	cmp	r3, #2
 8005452:	d130      	bne.n	80054b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	409a      	lsls	r2, r3
 8005462:	0013      	movs	r3, r2
 8005464:	43da      	mvns	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	409a      	lsls	r2, r3
 8005476:	0013      	movs	r3, r2
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800548a:	2201      	movs	r2, #1
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	409a      	lsls	r2, r3
 8005490:	0013      	movs	r3, r2
 8005492:	43da      	mvns	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	2201      	movs	r2, #1
 80054a2:	401a      	ands	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	409a      	lsls	r2, r3
 80054a8:	0013      	movs	r3, r2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2203      	movs	r2, #3
 80054bc:	4013      	ands	r3, r2
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d017      	beq.n	80054f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2203      	movs	r2, #3
 80054ce:	409a      	lsls	r2, r3
 80054d0:	0013      	movs	r3, r2
 80054d2:	43da      	mvns	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	0013      	movs	r3, r2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2203      	movs	r2, #3
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d123      	bne.n	8005546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	08da      	lsrs	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3208      	adds	r2, #8
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	58d3      	ldr	r3, [r2, r3]
 800550a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2207      	movs	r2, #7
 8005510:	4013      	ands	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	220f      	movs	r2, #15
 8005516:	409a      	lsls	r2, r3
 8005518:	0013      	movs	r3, r2
 800551a:	43da      	mvns	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2107      	movs	r1, #7
 800552a:	400b      	ands	r3, r1
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	409a      	lsls	r2, r3
 8005530:	0013      	movs	r3, r2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	08da      	lsrs	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3208      	adds	r2, #8
 8005540:	0092      	lsls	r2, r2, #2
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	2203      	movs	r2, #3
 8005552:	409a      	lsls	r2, r3
 8005554:	0013      	movs	r3, r2
 8005556:	43da      	mvns	r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2203      	movs	r2, #3
 8005564:	401a      	ands	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	409a      	lsls	r2, r3
 800556c:	0013      	movs	r3, r2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	23c0      	movs	r3, #192	; 0xc0
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	4013      	ands	r3, r2
 8005584:	d100      	bne.n	8005588 <HAL_GPIO_Init+0x174>
 8005586:	e09a      	b.n	80056be <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005588:	4b54      	ldr	r3, [pc, #336]	; (80056dc <HAL_GPIO_Init+0x2c8>)
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_GPIO_Init+0x2c8>)
 800558e:	2101      	movs	r1, #1
 8005590:	430a      	orrs	r2, r1
 8005592:	619a      	str	r2, [r3, #24]
 8005594:	4b51      	ldr	r3, [pc, #324]	; (80056dc <HAL_GPIO_Init+0x2c8>)
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2201      	movs	r2, #1
 800559a:	4013      	ands	r3, r2
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055a0:	4a4f      	ldr	r2, [pc, #316]	; (80056e0 <HAL_GPIO_Init+0x2cc>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	589b      	ldr	r3, [r3, r2]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2203      	movs	r2, #3
 80055b2:	4013      	ands	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	220f      	movs	r2, #15
 80055b8:	409a      	lsls	r2, r3
 80055ba:	0013      	movs	r3, r2
 80055bc:	43da      	mvns	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4013      	ands	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	2390      	movs	r3, #144	; 0x90
 80055c8:	05db      	lsls	r3, r3, #23
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d013      	beq.n	80055f6 <HAL_GPIO_Init+0x1e2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a44      	ldr	r2, [pc, #272]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00d      	beq.n	80055f2 <HAL_GPIO_Init+0x1de>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a43      	ldr	r2, [pc, #268]	; (80056e8 <HAL_GPIO_Init+0x2d4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <HAL_GPIO_Init+0x1da>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a42      	ldr	r2, [pc, #264]	; (80056ec <HAL_GPIO_Init+0x2d8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d101      	bne.n	80055ea <HAL_GPIO_Init+0x1d6>
 80055e6:	2303      	movs	r3, #3
 80055e8:	e006      	b.n	80055f8 <HAL_GPIO_Init+0x1e4>
 80055ea:	2305      	movs	r3, #5
 80055ec:	e004      	b.n	80055f8 <HAL_GPIO_Init+0x1e4>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e002      	b.n	80055f8 <HAL_GPIO_Init+0x1e4>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <HAL_GPIO_Init+0x1e4>
 80055f6:	2300      	movs	r3, #0
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	2103      	movs	r1, #3
 80055fc:	400a      	ands	r2, r1
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	4093      	lsls	r3, r2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005608:	4935      	ldr	r1, [pc, #212]	; (80056e0 <HAL_GPIO_Init+0x2cc>)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	089b      	lsrs	r3, r3, #2
 800560e:	3302      	adds	r3, #2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005616:	4b36      	ldr	r3, [pc, #216]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	43da      	mvns	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	035b      	lsls	r3, r3, #13
 800562e:	4013      	ands	r3, r2
 8005630:	d003      	beq.n	800563a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800563a:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43da      	mvns	r2, r3
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	039b      	lsls	r3, r3, #14
 8005658:	4013      	ands	r3, r2
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005664:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43da      	mvns	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	4013      	ands	r3, r2
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	43da      	mvns	r2, r3
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	025b      	lsls	r3, r3, #9
 80056ac:	4013      	ands	r3, r2
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <HAL_GPIO_Init+0x2dc>)
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3301      	adds	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	40da      	lsrs	r2, r3
 80056cc:	1e13      	subs	r3, r2, #0
 80056ce:	d000      	beq.n	80056d2 <HAL_GPIO_Init+0x2be>
 80056d0:	e6a8      	b.n	8005424 <HAL_GPIO_Init+0x10>
  } 
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b006      	add	sp, #24
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40010000 	.word	0x40010000
 80056e4:	48000400 	.word	0x48000400
 80056e8:	48000800 	.word	0x48000800
 80056ec:	48000c00 	.word	0x48000c00
 80056f0:	40010400 	.word	0x40010400

080056f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e082      	b.n	800580c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2241      	movs	r2, #65	; 0x41
 800570a:	5c9b      	ldrb	r3, [r3, r2]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	2100      	movs	r1, #0
 8005718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f7ff fbd7 	bl	8004ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2241      	movs	r2, #65	; 0x41
 8005726:	2124      	movs	r1, #36	; 0x24
 8005728:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2101      	movs	r1, #1
 8005736:	438a      	bics	r2, r1
 8005738:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4934      	ldr	r1, [pc, #208]	; (8005814 <HAL_I2C_Init+0x120>)
 8005744:	400a      	ands	r2, r1
 8005746:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4931      	ldr	r1, [pc, #196]	; (8005818 <HAL_I2C_Init+0x124>)
 8005754:	400a      	ands	r2, r1
 8005756:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d108      	bne.n	8005772 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	0209      	lsls	r1, r1, #8
 800576c:	430a      	orrs	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	e007      	b.n	8005782 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2184      	movs	r1, #132	; 0x84
 800577c:	0209      	lsls	r1, r1, #8
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d104      	bne.n	8005794 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	0112      	lsls	r2, r2, #4
 8005792:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	491f      	ldr	r1, [pc, #124]	; (800581c <HAL_I2C_Init+0x128>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	491a      	ldr	r1, [pc, #104]	; (8005818 <HAL_I2C_Init+0x124>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	431a      	orrs	r2, r3
 80057be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69d9      	ldr	r1, [r3, #28]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2241      	movs	r2, #65	; 0x41
 80057f8:	2120      	movs	r1, #32
 80057fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2242      	movs	r2, #66	; 0x42
 8005806:	2100      	movs	r1, #0
 8005808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}
 8005814:	f0ffffff 	.word	0xf0ffffff
 8005818:	ffff7fff 	.word	0xffff7fff
 800581c:	02008000 	.word	0x02008000

08005820 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	0008      	movs	r0, r1
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	0019      	movs	r1, r3
 800582e:	230a      	movs	r3, #10
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	1c02      	adds	r2, r0, #0
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	2308      	movs	r3, #8
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	1c0a      	adds	r2, r1, #0
 800583c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2241      	movs	r2, #65	; 0x41
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b20      	cmp	r3, #32
 8005848:	d000      	beq.n	800584c <HAL_I2C_Master_Transmit+0x2c>
 800584a:	e0e7      	b.n	8005a1c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	5c9b      	ldrb	r3, [r3, r2]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_I2C_Master_Transmit+0x3a>
 8005856:	2302      	movs	r3, #2
 8005858:	e0e1      	b.n	8005a1e <HAL_I2C_Master_Transmit+0x1fe>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2240      	movs	r2, #64	; 0x40
 800585e:	2101      	movs	r1, #1
 8005860:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005862:	f7ff fcf5 	bl	8005250 <HAL_GetTick>
 8005866:	0003      	movs	r3, r0
 8005868:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	0219      	lsls	r1, r3, #8
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2319      	movs	r3, #25
 8005876:	2201      	movs	r2, #1
 8005878:	f000 fd3e 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 800587c:	1e03      	subs	r3, r0, #0
 800587e:	d001      	beq.n	8005884 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0cc      	b.n	8005a1e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2241      	movs	r2, #65	; 0x41
 8005888:	2121      	movs	r1, #33	; 0x21
 800588a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2242      	movs	r2, #66	; 0x42
 8005890:	2110      	movs	r1, #16
 8005892:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2208      	movs	r2, #8
 80058a4:	18ba      	adds	r2, r7, r2
 80058a6:	8812      	ldrh	r2, [r2, #0]
 80058a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2bff      	cmp	r3, #255	; 0xff
 80058b8:	d911      	bls.n	80058de <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	045c      	lsls	r4, r3, #17
 80058ca:	230a      	movs	r3, #10
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	8819      	ldrh	r1, [r3, #0]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <HAL_I2C_Master_Transmit+0x208>)
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	0023      	movs	r3, r4
 80058d8:	f000 fee6 	bl	80066a8 <I2C_TransferConfig>
 80058dc:	e075      	b.n	80059ca <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	049c      	lsls	r4, r3, #18
 80058f2:	230a      	movs	r3, #10
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	8819      	ldrh	r1, [r3, #0]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	4b4b      	ldr	r3, [pc, #300]	; (8005a28 <HAL_I2C_Master_Transmit+0x208>)
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	0023      	movs	r3, r4
 8005900:	f000 fed2 	bl	80066a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005904:	e061      	b.n	80059ca <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	0018      	movs	r0, r3
 800590e:	f000 fd41 	bl	8006394 <I2C_WaitOnTXISFlagUntilTimeout>
 8005912:	1e03      	subs	r3, r0, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e081      	b.n	8005a1e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d03a      	beq.n	80059ca <HAL_I2C_Master_Transmit+0x1aa>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d136      	bne.n	80059ca <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800595c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	0013      	movs	r3, r2
 8005966:	2200      	movs	r2, #0
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	f000 fcc5 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 800596e:	1e03      	subs	r3, r0, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e053      	b.n	8005a1e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2bff      	cmp	r3, #255	; 0xff
 800597e:	d911      	bls.n	80059a4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	22ff      	movs	r2, #255	; 0xff
 8005984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	b2da      	uxtb	r2, r3
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	045c      	lsls	r4, r3, #17
 8005990:	230a      	movs	r3, #10
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	8819      	ldrh	r1, [r3, #0]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	2300      	movs	r3, #0
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	0023      	movs	r3, r4
 800599e:	f000 fe83 	bl	80066a8 <I2C_TransferConfig>
 80059a2:	e012      	b.n	80059ca <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	049c      	lsls	r4, r3, #18
 80059b8:	230a      	movs	r3, #10
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	8819      	ldrh	r1, [r3, #0]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	2300      	movs	r3, #0
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	0023      	movs	r3, r4
 80059c6:	f000 fe6f 	bl	80066a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d198      	bne.n	8005906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	0018      	movs	r0, r3
 80059dc:	f000 fd20 	bl	8006420 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e01a      	b.n	8005a1e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2220      	movs	r2, #32
 80059ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	490c      	ldr	r1, [pc, #48]	; (8005a2c <HAL_I2C_Master_Transmit+0x20c>)
 80059fc:	400a      	ands	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2241      	movs	r2, #65	; 0x41
 8005a04:	2120      	movs	r1, #32
 8005a06:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2242      	movs	r2, #66	; 0x42
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2240      	movs	r2, #64	; 0x40
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	0018      	movs	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b007      	add	sp, #28
 8005a24:	bd90      	pop	{r4, r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	80002000 	.word	0x80002000
 8005a2c:	fe00e800 	.word	0xfe00e800

08005a30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b089      	sub	sp, #36	; 0x24
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	000c      	movs	r4, r1
 8005a3a:	0010      	movs	r0, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	230a      	movs	r3, #10
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	1c22      	adds	r2, r4, #0
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	2308      	movs	r3, #8
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	1c02      	adds	r2, r0, #0
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	1dbb      	adds	r3, r7, #6
 8005a50:	1c0a      	adds	r2, r1, #0
 8005a52:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2241      	movs	r2, #65	; 0x41
 8005a58:	5c9b      	ldrb	r3, [r3, r2]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d000      	beq.n	8005a62 <HAL_I2C_Mem_Write+0x32>
 8005a60:	e10c      	b.n	8005c7c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <HAL_I2C_Mem_Write+0x42>
 8005a68:	232c      	movs	r3, #44	; 0x2c
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d105      	bne.n	8005a7e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	0092      	lsls	r2, r2, #2
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0ff      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2240      	movs	r2, #64	; 0x40
 8005a82:	5c9b      	ldrb	r3, [r3, r2]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d101      	bne.n	8005a8c <HAL_I2C_Mem_Write+0x5c>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e0f8      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2240      	movs	r2, #64	; 0x40
 8005a90:	2101      	movs	r1, #1
 8005a92:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a94:	f7ff fbdc 	bl	8005250 <HAL_GetTick>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	0219      	lsls	r1, r3, #8
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2319      	movs	r3, #25
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f000 fc25 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 8005aae:	1e03      	subs	r3, r0, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e0e3      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2241      	movs	r2, #65	; 0x41
 8005aba:	2121      	movs	r1, #33	; 0x21
 8005abc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2242      	movs	r2, #66	; 0x42
 8005ac2:	2140      	movs	r1, #64	; 0x40
 8005ac4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	222c      	movs	r2, #44	; 0x2c
 8005ad6:	18ba      	adds	r2, r7, r2
 8005ad8:	8812      	ldrh	r2, [r2, #0]
 8005ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ae2:	1dbb      	adds	r3, r7, #6
 8005ae4:	881c      	ldrh	r4, [r3, #0]
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	230a      	movs	r3, #10
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	8819      	ldrh	r1, [r3, #0]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	0023      	movs	r3, r4
 8005afe:	f000 fb13 	bl	8006128 <I2C_RequestMemoryWrite>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e0b5      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2bff      	cmp	r3, #255	; 0xff
 8005b1a:	d911      	bls.n	8005b40 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	22ff      	movs	r2, #255	; 0xff
 8005b20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	045c      	lsls	r4, r3, #17
 8005b2c:	230a      	movs	r3, #10
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	8819      	ldrh	r1, [r3, #0]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	2300      	movs	r3, #0
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	0023      	movs	r3, r4
 8005b3a:	f000 fdb5 	bl	80066a8 <I2C_TransferConfig>
 8005b3e:	e012      	b.n	8005b66 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	049c      	lsls	r4, r3, #18
 8005b54:	230a      	movs	r3, #10
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	8819      	ldrh	r1, [r3, #0]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	0023      	movs	r3, r4
 8005b62:	f000 fda1 	bl	80066a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 fc11 	bl	8006394 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b72:	1e03      	subs	r3, r0, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e081      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	781a      	ldrb	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03a      	beq.n	8005c2a <HAL_I2C_Mem_Write+0x1fa>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d136      	bne.n	8005c2a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	0013      	movs	r3, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	f000 fb95 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 8005bce:	1e03      	subs	r3, r0, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e053      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2bff      	cmp	r3, #255	; 0xff
 8005bde:	d911      	bls.n	8005c04 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	22ff      	movs	r2, #255	; 0xff
 8005be4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	045c      	lsls	r4, r3, #17
 8005bf0:	230a      	movs	r3, #10
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	8819      	ldrh	r1, [r3, #0]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	0023      	movs	r3, r4
 8005bfe:	f000 fd53 	bl	80066a8 <I2C_TransferConfig>
 8005c02:	e012      	b.n	8005c2a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	049c      	lsls	r4, r3, #18
 8005c18:	230a      	movs	r3, #10
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	8819      	ldrh	r1, [r3, #0]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	0023      	movs	r3, r4
 8005c26:	f000 fd3f 	bl	80066a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d198      	bne.n	8005b66 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 fbf0 	bl	8006420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c40:	1e03      	subs	r3, r0, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e01a      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	490b      	ldr	r1, [pc, #44]	; (8005c88 <HAL_I2C_Mem_Write+0x258>)
 8005c5c:	400a      	ands	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2241      	movs	r2, #65	; 0x41
 8005c64:	2120      	movs	r1, #32
 8005c66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2242      	movs	r2, #66	; 0x42
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	2100      	movs	r1, #0
 8005c76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b007      	add	sp, #28
 8005c84:	bd90      	pop	{r4, r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	fe00e800 	.word	0xfe00e800

08005c8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	000c      	movs	r4, r1
 8005c96:	0010      	movs	r0, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	1c22      	adds	r2, r4, #0
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	1c02      	adds	r2, r0, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	1dbb      	adds	r3, r7, #6
 8005cac:	1c0a      	adds	r2, r1, #0
 8005cae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2241      	movs	r2, #65	; 0x41
 8005cb4:	5c9b      	ldrb	r3, [r3, r2]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d000      	beq.n	8005cbe <HAL_I2C_Mem_Read+0x32>
 8005cbc:	e110      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <HAL_I2C_Mem_Read+0x42>
 8005cc4:	232c      	movs	r3, #44	; 0x2c
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2280      	movs	r2, #128	; 0x80
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e103      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2240      	movs	r2, #64	; 0x40
 8005cde:	5c9b      	ldrb	r3, [r3, r2]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_I2C_Mem_Read+0x5c>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e0fc      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2240      	movs	r2, #64	; 0x40
 8005cec:	2101      	movs	r1, #1
 8005cee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cf0:	f7ff faae 	bl	8005250 <HAL_GetTick>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	0219      	lsls	r1, r3, #8
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2319      	movs	r3, #25
 8005d04:	2201      	movs	r2, #1
 8005d06:	f000 faf7 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e0e7      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2241      	movs	r2, #65	; 0x41
 8005d16:	2122      	movs	r1, #34	; 0x22
 8005d18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2242      	movs	r2, #66	; 0x42
 8005d1e:	2140      	movs	r1, #64	; 0x40
 8005d20:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	222c      	movs	r2, #44	; 0x2c
 8005d32:	18ba      	adds	r2, r7, r2
 8005d34:	8812      	ldrh	r2, [r2, #0]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d3e:	1dbb      	adds	r3, r7, #6
 8005d40:	881c      	ldrh	r4, [r3, #0]
 8005d42:	2308      	movs	r3, #8
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	230a      	movs	r3, #10
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	8819      	ldrh	r1, [r3, #0]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	0023      	movs	r3, r4
 8005d5a:	f000 fa49 	bl	80061f0 <I2C_RequestMemoryRead>
 8005d5e:	1e03      	subs	r3, r0, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2240      	movs	r2, #64	; 0x40
 8005d66:	2100      	movs	r1, #0
 8005d68:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e0b9      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2bff      	cmp	r3, #255	; 0xff
 8005d76:	d911      	bls.n	8005d9c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	22ff      	movs	r2, #255	; 0xff
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	2380      	movs	r3, #128	; 0x80
 8005d86:	045c      	lsls	r4, r3, #17
 8005d88:	230a      	movs	r3, #10
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	8819      	ldrh	r1, [r3, #0]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	4b56      	ldr	r3, [pc, #344]	; (8005eec <HAL_I2C_Mem_Read+0x260>)
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	0023      	movs	r3, r4
 8005d96:	f000 fc87 	bl	80066a8 <I2C_TransferConfig>
 8005d9a:	e012      	b.n	8005dc2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	049c      	lsls	r4, r3, #18
 8005db0:	230a      	movs	r3, #10
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	8819      	ldrh	r1, [r3, #0]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	4b4c      	ldr	r3, [pc, #304]	; (8005eec <HAL_I2C_Mem_Read+0x260>)
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	0023      	movs	r3, r4
 8005dbe:	f000 fc73 	bl	80066a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	0013      	movs	r3, r2
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2104      	movs	r1, #4
 8005dd0:	f000 fa92 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 8005dd4:	1e03      	subs	r3, r0, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e082      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03a      	beq.n	8005e8e <HAL_I2C_Mem_Read+0x202>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d136      	bne.n	8005e8e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	0013      	movs	r3, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2180      	movs	r1, #128	; 0x80
 8005e2e:	f000 fa63 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 8005e32:	1e03      	subs	r3, r0, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e053      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2bff      	cmp	r3, #255	; 0xff
 8005e42:	d911      	bls.n	8005e68 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	22ff      	movs	r2, #255	; 0xff
 8005e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	045c      	lsls	r4, r3, #17
 8005e54:	230a      	movs	r3, #10
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	8819      	ldrh	r1, [r3, #0]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	0023      	movs	r3, r4
 8005e62:	f000 fc21 	bl	80066a8 <I2C_TransferConfig>
 8005e66:	e012      	b.n	8005e8e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	049c      	lsls	r4, r3, #18
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	8819      	ldrh	r1, [r3, #0]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	2300      	movs	r3, #0
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	0023      	movs	r3, r4
 8005e8a:	f000 fc0d 	bl	80066a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d194      	bne.n	8005dc2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 fabe 	bl	8006420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ea4:	1e03      	subs	r3, r0, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e01a      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	490c      	ldr	r1, [pc, #48]	; (8005ef0 <HAL_I2C_Mem_Read+0x264>)
 8005ec0:	400a      	ands	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2241      	movs	r2, #65	; 0x41
 8005ec8:	2120      	movs	r1, #32
 8005eca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2242      	movs	r2, #66	; 0x42
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2240      	movs	r2, #64	; 0x40
 8005ed8:	2100      	movs	r1, #0
 8005eda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b007      	add	sp, #28
 8005ee8:	bd90      	pop	{r4, r7, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	80002400 	.word	0x80002400
 8005ef0:	fe00e800 	.word	0xfe00e800

08005ef4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08a      	sub	sp, #40	; 0x28
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	230a      	movs	r3, #10
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	1c0a      	adds	r2, r1, #0
 8005f06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2241      	movs	r2, #65	; 0x41
 8005f10:	5c9b      	ldrb	r3, [r3, r2]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d000      	beq.n	8005f1a <HAL_I2C_IsDeviceReady+0x26>
 8005f18:	e0fd      	b.n	8006116 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699a      	ldr	r2, [r3, #24]
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	401a      	ands	r2, r3
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d101      	bne.n	8005f32 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e0f2      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2240      	movs	r2, #64	; 0x40
 8005f36:	5c9b      	ldrb	r3, [r3, r2]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_I2C_IsDeviceReady+0x4c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0eb      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2240      	movs	r2, #64	; 0x40
 8005f44:	2101      	movs	r1, #1
 8005f46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2241      	movs	r2, #65	; 0x41
 8005f4c:	2124      	movs	r1, #36	; 0x24
 8005f4e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d107      	bne.n	8005f6e <HAL_I2C_IsDeviceReady+0x7a>
 8005f5e:	230a      	movs	r3, #10
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	059b      	lsls	r3, r3, #22
 8005f66:	0d9b      	lsrs	r3, r3, #22
 8005f68:	4a6d      	ldr	r2, [pc, #436]	; (8006120 <HAL_I2C_IsDeviceReady+0x22c>)
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	e006      	b.n	8005f7c <HAL_I2C_IsDeviceReady+0x88>
 8005f6e:	230a      	movs	r3, #10
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	059b      	lsls	r3, r3, #22
 8005f76:	0d9b      	lsrs	r3, r3, #22
 8005f78:	4a6a      	ldr	r2, [pc, #424]	; (8006124 <HAL_I2C_IsDeviceReady+0x230>)
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005f82:	f7ff f965 	bl	8005250 <HAL_GetTick>
 8005f86:	0003      	movs	r3, r0
 8005f88:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2220      	movs	r2, #32
 8005f92:	4013      	ands	r3, r2
 8005f94:	3b20      	subs	r3, #32
 8005f96:	425a      	negs	r2, r3
 8005f98:	4153      	adcs	r3, r2
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	231f      	movs	r3, #31
 8005f9e:	18fb      	adds	r3, r7, r3
 8005fa0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2210      	movs	r2, #16
 8005faa:	4013      	ands	r3, r2
 8005fac:	3b10      	subs	r3, #16
 8005fae:	425a      	negs	r2, r3
 8005fb0:	4153      	adcs	r3, r2
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	231e      	movs	r3, #30
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005fba:	e035      	b.n	8006028 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	d01a      	beq.n	8005ff8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fc2:	f7ff f945 	bl	8005250 <HAL_GetTick>
 8005fc6:	0002      	movs	r2, r0
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d302      	bcc.n	8005fd8 <HAL_I2C_IsDeviceReady+0xe4>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10f      	bne.n	8005ff8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2241      	movs	r2, #65	; 0x41
 8005fdc:	2120      	movs	r1, #32
 8005fde:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2240      	movs	r2, #64	; 0x40
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e08f      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2220      	movs	r2, #32
 8006000:	4013      	ands	r3, r2
 8006002:	3b20      	subs	r3, #32
 8006004:	425a      	negs	r2, r3
 8006006:	4153      	adcs	r3, r2
 8006008:	b2da      	uxtb	r2, r3
 800600a:	231f      	movs	r3, #31
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2210      	movs	r2, #16
 8006018:	4013      	ands	r3, r2
 800601a:	3b10      	subs	r3, #16
 800601c:	425a      	negs	r2, r3
 800601e:	4153      	adcs	r3, r2
 8006020:	b2da      	uxtb	r2, r3
 8006022:	231e      	movs	r3, #30
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006028:	231f      	movs	r3, #31
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <HAL_I2C_IsDeviceReady+0x148>
 8006032:	231e      	movs	r3, #30
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0bf      	beq.n	8005fbc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2210      	movs	r2, #16
 8006044:	4013      	ands	r3, r2
 8006046:	2b10      	cmp	r3, #16
 8006048:	d01a      	beq.n	8006080 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	0013      	movs	r3, r2
 8006054:	2200      	movs	r2, #0
 8006056:	2120      	movs	r1, #32
 8006058:	f000 f94e 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 800605c:	1e03      	subs	r3, r0, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e059      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2220      	movs	r2, #32
 800606a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2241      	movs	r2, #65	; 0x41
 8006070:	2120      	movs	r1, #32
 8006072:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	2100      	movs	r1, #0
 800607a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e04b      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	0013      	movs	r3, r2
 800608a:	2200      	movs	r2, #0
 800608c:	2120      	movs	r1, #32
 800608e:	f000 f933 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 8006092:	1e03      	subs	r3, r0, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e03e      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2210      	movs	r2, #16
 80060a0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2220      	movs	r2, #32
 80060a8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d119      	bne.n	80060e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2180      	movs	r1, #128	; 0x80
 80060be:	01c9      	lsls	r1, r1, #7
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	0013      	movs	r3, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	2120      	movs	r1, #32
 80060d2:	f000 f911 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 80060d6:	1e03      	subs	r3, r0, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e01c      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2220      	movs	r2, #32
 80060e4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	3301      	adds	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d900      	bls.n	80060f6 <HAL_I2C_IsDeviceReady+0x202>
 80060f4:	e72f      	b.n	8005f56 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2241      	movs	r2, #65	; 0x41
 80060fa:	2120      	movs	r1, #32
 80060fc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	2220      	movs	r2, #32
 8006104:	431a      	orrs	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	2100      	movs	r1, #0
 8006110:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006116:	2302      	movs	r3, #2
  }
}
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	b008      	add	sp, #32
 800611e:	bd80      	pop	{r7, pc}
 8006120:	02002000 	.word	0x02002000
 8006124:	02002800 	.word	0x02002800

08006128 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	000c      	movs	r4, r1
 8006132:	0010      	movs	r0, r2
 8006134:	0019      	movs	r1, r3
 8006136:	250a      	movs	r5, #10
 8006138:	197b      	adds	r3, r7, r5
 800613a:	1c22      	adds	r2, r4, #0
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	2308      	movs	r3, #8
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	1c02      	adds	r2, r0, #0
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	1dbb      	adds	r3, r7, #6
 8006148:	1c0a      	adds	r2, r1, #0
 800614a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800614c:	1dbb      	adds	r3, r7, #6
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	045c      	lsls	r4, r3, #17
 8006156:	197b      	adds	r3, r7, r5
 8006158:	8819      	ldrh	r1, [r3, #0]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	4b23      	ldr	r3, [pc, #140]	; (80061ec <I2C_RequestMemoryWrite+0xc4>)
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	0023      	movs	r3, r4
 8006162:	f000 faa1 	bl	80066a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	6a39      	ldr	r1, [r7, #32]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	0018      	movs	r0, r3
 800616e:	f000 f911 	bl	8006394 <I2C_WaitOnTXISFlagUntilTimeout>
 8006172:	1e03      	subs	r3, r0, #0
 8006174:	d001      	beq.n	800617a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e033      	b.n	80061e2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800617a:	1dbb      	adds	r3, r7, #6
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d107      	bne.n	8006192 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006182:	2308      	movs	r3, #8
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
 8006190:	e019      	b.n	80061c6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006192:	2308      	movs	r3, #8
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	b29b      	uxth	r3, r3
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	0018      	movs	r0, r3
 80061ac:	f000 f8f2 	bl	8006394 <I2C_WaitOnTXISFlagUntilTimeout>
 80061b0:	1e03      	subs	r3, r0, #0
 80061b2:	d001      	beq.n	80061b8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e014      	b.n	80061e2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b8:	2308      	movs	r3, #8
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	0013      	movs	r3, r2
 80061d0:	2200      	movs	r2, #0
 80061d2:	2180      	movs	r1, #128	; 0x80
 80061d4:	f000 f890 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 80061d8:	1e03      	subs	r3, r0, #0
 80061da:	d001      	beq.n	80061e0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b004      	add	sp, #16
 80061e8:	bdb0      	pop	{r4, r5, r7, pc}
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	80002000 	.word	0x80002000

080061f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	000c      	movs	r4, r1
 80061fa:	0010      	movs	r0, r2
 80061fc:	0019      	movs	r1, r3
 80061fe:	250a      	movs	r5, #10
 8006200:	197b      	adds	r3, r7, r5
 8006202:	1c22      	adds	r2, r4, #0
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	2308      	movs	r3, #8
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	1c02      	adds	r2, r0, #0
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	1dbb      	adds	r3, r7, #6
 8006210:	1c0a      	adds	r2, r1, #0
 8006212:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006214:	1dbb      	adds	r3, r7, #6
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	197b      	adds	r3, r7, r5
 800621c:	8819      	ldrh	r1, [r3, #0]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	4b23      	ldr	r3, [pc, #140]	; (80062b0 <I2C_RequestMemoryRead+0xc0>)
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	f000 fa3f 	bl	80066a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	0018      	movs	r0, r3
 8006232:	f000 f8af 	bl	8006394 <I2C_WaitOnTXISFlagUntilTimeout>
 8006236:	1e03      	subs	r3, r0, #0
 8006238:	d001      	beq.n	800623e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e033      	b.n	80062a6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800623e:	1dbb      	adds	r3, r7, #6
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006246:	2308      	movs	r3, #8
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28
 8006254:	e019      	b.n	800628a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006256:	2308      	movs	r3, #8
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	0a1b      	lsrs	r3, r3, #8
 800625e:	b29b      	uxth	r3, r3
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626a:	6a39      	ldr	r1, [r7, #32]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 f890 	bl	8006394 <I2C_WaitOnTXISFlagUntilTimeout>
 8006274:	1e03      	subs	r3, r0, #0
 8006276:	d001      	beq.n	800627c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e014      	b.n	80062a6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800627c:	2308      	movs	r3, #8
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800628a:	6a3a      	ldr	r2, [r7, #32]
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	0013      	movs	r3, r2
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	; 0x40
 8006298:	f000 f82e 	bl	80062f8 <I2C_WaitOnFlagUntilTimeout>
 800629c:	1e03      	subs	r3, r0, #0
 800629e:	d001      	beq.n	80062a4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b004      	add	sp, #16
 80062ac:	bdb0      	pop	{r4, r5, r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	80002000 	.word	0x80002000

080062b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	2202      	movs	r2, #2
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d103      	bne.n	80062d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2201      	movs	r2, #1
 80062da:	4013      	ands	r3, r2
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2101      	movs	r1, #1
 80062ec:	430a      	orrs	r2, r1
 80062ee:	619a      	str	r2, [r3, #24]
  }
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	1dfb      	adds	r3, r7, #7
 8006306:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006308:	e030      	b.n	800636c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	d02d      	beq.n	800636c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006310:	f7fe ff9e 	bl	8005250 <HAL_GetTick>
 8006314:	0002      	movs	r2, r0
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d122      	bne.n	800636c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4013      	ands	r3, r2
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	425a      	negs	r2, r3
 8006336:	4153      	adcs	r3, r2
 8006338:	b2db      	uxtb	r3, r3
 800633a:	001a      	movs	r2, r3
 800633c:	1dfb      	adds	r3, r7, #7
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d113      	bne.n	800636c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	2220      	movs	r2, #32
 800634a:	431a      	orrs	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2241      	movs	r2, #65	; 0x41
 8006354:	2120      	movs	r1, #32
 8006356:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2242      	movs	r2, #66	; 0x42
 800635c:	2100      	movs	r1, #0
 800635e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2240      	movs	r2, #64	; 0x40
 8006364:	2100      	movs	r1, #0
 8006366:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e00f      	b.n	800638c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4013      	ands	r3, r2
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	425a      	negs	r2, r3
 800637c:	4153      	adcs	r3, r2
 800637e:	b2db      	uxtb	r3, r3
 8006380:	001a      	movs	r2, r3
 8006382:	1dfb      	adds	r3, r7, #7
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d0bf      	beq.n	800630a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	0018      	movs	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	b004      	add	sp, #16
 8006392:	bd80      	pop	{r7, pc}

08006394 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063a0:	e032      	b.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 f87d 	bl	80064a8 <I2C_IsErrorOccurred>
 80063ae:	1e03      	subs	r3, r0, #0
 80063b0:	d001      	beq.n	80063b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e030      	b.n	8006418 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3301      	adds	r3, #1
 80063ba:	d025      	beq.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063bc:	f7fe ff48 	bl	8005250 <HAL_GetTick>
 80063c0:	0002      	movs	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d11a      	bne.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2202      	movs	r2, #2
 80063da:	4013      	ands	r3, r2
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d013      	beq.n	8006408 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	2220      	movs	r2, #32
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2241      	movs	r2, #65	; 0x41
 80063f0:	2120      	movs	r1, #32
 80063f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2242      	movs	r2, #66	; 0x42
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2240      	movs	r2, #64	; 0x40
 8006400:	2100      	movs	r1, #0
 8006402:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	2202      	movs	r2, #2
 8006410:	4013      	ands	r3, r2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d1c5      	bne.n	80063a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	0018      	movs	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	b004      	add	sp, #16
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800642c:	e02f      	b.n	800648e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	0018      	movs	r0, r3
 8006436:	f000 f837 	bl	80064a8 <I2C_IsErrorOccurred>
 800643a:	1e03      	subs	r3, r0, #0
 800643c:	d001      	beq.n	8006442 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e02d      	b.n	800649e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006442:	f7fe ff05 	bl	8005250 <HAL_GetTick>
 8006446:	0002      	movs	r2, r0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11a      	bne.n	800648e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2220      	movs	r2, #32
 8006460:	4013      	ands	r3, r2
 8006462:	2b20      	cmp	r3, #32
 8006464:	d013      	beq.n	800648e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	2220      	movs	r2, #32
 800646c:	431a      	orrs	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2241      	movs	r2, #65	; 0x41
 8006476:	2120      	movs	r1, #32
 8006478:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2242      	movs	r2, #66	; 0x42
 800647e:	2100      	movs	r1, #0
 8006480:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2240      	movs	r2, #64	; 0x40
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e007      	b.n	800649e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2220      	movs	r2, #32
 8006496:	4013      	ands	r3, r2
 8006498:	2b20      	cmp	r3, #32
 800649a:	d1c8      	bne.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	0018      	movs	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b004      	add	sp, #16
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a8:	b590      	push	{r4, r7, lr}
 80064aa:	b08b      	sub	sp, #44	; 0x2c
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b4:	2327      	movs	r3, #39	; 0x27
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2210      	movs	r2, #16
 80064d0:	4013      	ands	r3, r2
 80064d2:	d100      	bne.n	80064d6 <I2C_IsErrorOccurred+0x2e>
 80064d4:	e082      	b.n	80065dc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064de:	e060      	b.n	80065a2 <I2C_IsErrorOccurred+0xfa>
 80064e0:	2427      	movs	r4, #39	; 0x27
 80064e2:	193b      	adds	r3, r7, r4
 80064e4:	193a      	adds	r2, r7, r4
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3301      	adds	r3, #1
 80064ee:	d058      	beq.n	80065a2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064f0:	f7fe feae 	bl	8005250 <HAL_GetTick>
 80064f4:	0002      	movs	r2, r0
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d306      	bcc.n	800650e <I2C_IsErrorOccurred+0x66>
 8006500:	193b      	adds	r3, r7, r4
 8006502:	193a      	adds	r2, r7, r4
 8006504:	7812      	ldrb	r2, [r2, #0]
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d149      	bne.n	80065a2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	2380      	movs	r3, #128	; 0x80
 8006516:	01db      	lsls	r3, r3, #7
 8006518:	4013      	ands	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800651c:	2013      	movs	r0, #19
 800651e:	183b      	adds	r3, r7, r0
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	2142      	movs	r1, #66	; 0x42
 8006524:	5c52      	ldrb	r2, [r2, r1]
 8006526:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	401a      	ands	r2, r3
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	429a      	cmp	r2, r3
 800653a:	d126      	bne.n	800658a <I2C_IsErrorOccurred+0xe2>
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	429a      	cmp	r2, r3
 8006544:	d021      	beq.n	800658a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006546:	183b      	adds	r3, r7, r0
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b20      	cmp	r3, #32
 800654c:	d01d      	beq.n	800658a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2180      	movs	r1, #128	; 0x80
 800655a:	01c9      	lsls	r1, r1, #7
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006560:	f7fe fe76 	bl	8005250 <HAL_GetTick>
 8006564:	0003      	movs	r3, r0
 8006566:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006568:	e00f      	b.n	800658a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800656a:	f7fe fe71 	bl	8005250 <HAL_GetTick>
 800656e:	0002      	movs	r2, r0
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b19      	cmp	r3, #25
 8006576:	d908      	bls.n	800658a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	2220      	movs	r2, #32
 800657c:	4313      	orrs	r3, r2
 800657e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006580:	2327      	movs	r3, #39	; 0x27
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2201      	movs	r2, #1
 8006586:	701a      	strb	r2, [r3, #0]

              break;
 8006588:	e00b      	b.n	80065a2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2220      	movs	r2, #32
 8006592:	4013      	ands	r3, r2
 8006594:	2127      	movs	r1, #39	; 0x27
 8006596:	187a      	adds	r2, r7, r1
 8006598:	1879      	adds	r1, r7, r1
 800659a:	7809      	ldrb	r1, [r1, #0]
 800659c:	7011      	strb	r1, [r2, #0]
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d1e3      	bne.n	800656a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	2220      	movs	r2, #32
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d004      	beq.n	80065ba <I2C_IsErrorOccurred+0x112>
 80065b0:	2327      	movs	r3, #39	; 0x27
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d092      	beq.n	80064e0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065ba:	2327      	movs	r3, #39	; 0x27
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d103      	bne.n	80065cc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	2204      	movs	r2, #4
 80065d0:	4313      	orrs	r3, r2
 80065d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80065d4:	2327      	movs	r3, #39	; 0x27
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	4013      	ands	r3, r2
 80065ec:	d00c      	beq.n	8006608 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	2201      	movs	r2, #1
 80065f2:	4313      	orrs	r3, r2
 80065f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2280      	movs	r2, #128	; 0x80
 80065fc:	0052      	lsls	r2, r2, #1
 80065fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006600:	2327      	movs	r3, #39	; 0x27
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4013      	ands	r3, r2
 8006610:	d00c      	beq.n	800662c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	2208      	movs	r2, #8
 8006616:	4313      	orrs	r3, r2
 8006618:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	00d2      	lsls	r2, r2, #3
 8006622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006624:	2327      	movs	r3, #39	; 0x27
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	2201      	movs	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	2380      	movs	r3, #128	; 0x80
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4013      	ands	r3, r2
 8006634:	d00c      	beq.n	8006650 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	2202      	movs	r2, #2
 800663a:	4313      	orrs	r3, r2
 800663c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2280      	movs	r2, #128	; 0x80
 8006644:	0092      	lsls	r2, r2, #2
 8006646:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006648:	2327      	movs	r3, #39	; 0x27
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006650:	2327      	movs	r3, #39	; 0x27
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01d      	beq.n	8006696 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	0018      	movs	r0, r3
 800665e:	f7ff fe29 	bl	80062b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	490d      	ldr	r1, [pc, #52]	; (80066a4 <I2C_IsErrorOccurred+0x1fc>)
 800666e:	400a      	ands	r2, r1
 8006670:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2241      	movs	r2, #65	; 0x41
 8006682:	2120      	movs	r1, #32
 8006684:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2242      	movs	r2, #66	; 0x42
 800668a:	2100      	movs	r1, #0
 800668c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2240      	movs	r2, #64	; 0x40
 8006692:	2100      	movs	r1, #0
 8006694:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006696:	2327      	movs	r3, #39	; 0x27
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	781b      	ldrb	r3, [r3, #0]
}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	b00b      	add	sp, #44	; 0x2c
 80066a2:	bd90      	pop	{r4, r7, pc}
 80066a4:	fe00e800 	.word	0xfe00e800

080066a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066a8:	b590      	push	{r4, r7, lr}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	0008      	movs	r0, r1
 80066b2:	0011      	movs	r1, r2
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	240a      	movs	r4, #10
 80066b8:	193b      	adds	r3, r7, r4
 80066ba:	1c02      	adds	r2, r0, #0
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	2009      	movs	r0, #9
 80066c0:	183b      	adds	r3, r7, r0
 80066c2:	1c0a      	adds	r2, r1, #0
 80066c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	059b      	lsls	r3, r3, #22
 80066cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066ce:	183b      	adds	r3, r7, r0
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	0419      	lsls	r1, r3, #16
 80066d4:	23ff      	movs	r3, #255	; 0xff
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	4313      	orrs	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f2:	0d51      	lsrs	r1, r2, #21
 80066f4:	2280      	movs	r2, #128	; 0x80
 80066f6:	00d2      	lsls	r2, r2, #3
 80066f8:	400a      	ands	r2, r1
 80066fa:	4907      	ldr	r1, [pc, #28]	; (8006718 <I2C_TransferConfig+0x70>)
 80066fc:	430a      	orrs	r2, r1
 80066fe:	43d2      	mvns	r2, r2
 8006700:	401a      	ands	r2, r3
 8006702:	0011      	movs	r1, r2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	46bd      	mov	sp, r7
 8006712:	b007      	add	sp, #28
 8006714:	bd90      	pop	{r4, r7, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	03ff63ff 	.word	0x03ff63ff

0800671c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2241      	movs	r2, #65	; 0x41
 800672a:	5c9b      	ldrb	r3, [r3, r2]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b20      	cmp	r3, #32
 8006730:	d138      	bne.n	80067a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2240      	movs	r2, #64	; 0x40
 8006736:	5c9b      	ldrb	r3, [r3, r2]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800673c:	2302      	movs	r3, #2
 800673e:	e032      	b.n	80067a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2240      	movs	r2, #64	; 0x40
 8006744:	2101      	movs	r1, #1
 8006746:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2241      	movs	r2, #65	; 0x41
 800674c:	2124      	movs	r1, #36	; 0x24
 800674e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2101      	movs	r1, #1
 800675c:	438a      	bics	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4911      	ldr	r1, [pc, #68]	; (80067b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800676c:	400a      	ands	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6819      	ldr	r1, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2101      	movs	r1, #1
 800678c:	430a      	orrs	r2, r1
 800678e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2241      	movs	r2, #65	; 0x41
 8006794:	2120      	movs	r1, #32
 8006796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	2100      	movs	r1, #0
 800679e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b002      	add	sp, #8
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	ffffefff 	.word	0xffffefff

080067b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2241      	movs	r2, #65	; 0x41
 80067c2:	5c9b      	ldrb	r3, [r3, r2]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d139      	bne.n	800683e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	5c9b      	ldrb	r3, [r3, r2]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e033      	b.n	8006840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	2101      	movs	r1, #1
 80067de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2241      	movs	r2, #65	; 0x41
 80067e4:	2124      	movs	r1, #36	; 0x24
 80067e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2101      	movs	r1, #1
 80067f4:	438a      	bics	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a11      	ldr	r2, [pc, #68]	; (8006848 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006804:	4013      	ands	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2101      	movs	r1, #1
 8006826:	430a      	orrs	r2, r1
 8006828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2241      	movs	r2, #65	; 0x41
 800682e:	2120      	movs	r1, #32
 8006830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2240      	movs	r2, #64	; 0x40
 8006836:	2100      	movs	r1, #0
 8006838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
  }
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b004      	add	sp, #16
 8006846:	bd80      	pop	{r7, pc}
 8006848:	fffff0ff 	.word	0xfffff0ff

0800684c <__cvt>:
 800684c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684e:	001e      	movs	r6, r3
 8006850:	2300      	movs	r3, #0
 8006852:	0014      	movs	r4, r2
 8006854:	b08b      	sub	sp, #44	; 0x2c
 8006856:	429e      	cmp	r6, r3
 8006858:	da04      	bge.n	8006864 <__cvt+0x18>
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	0609      	lsls	r1, r1, #24
 800685e:	1873      	adds	r3, r6, r1
 8006860:	001e      	movs	r6, r3
 8006862:	232d      	movs	r3, #45	; 0x2d
 8006864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006866:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006868:	7013      	strb	r3, [r2, #0]
 800686a:	2320      	movs	r3, #32
 800686c:	2203      	movs	r2, #3
 800686e:	439f      	bics	r7, r3
 8006870:	2f46      	cmp	r7, #70	; 0x46
 8006872:	d007      	beq.n	8006884 <__cvt+0x38>
 8006874:	003b      	movs	r3, r7
 8006876:	3b45      	subs	r3, #69	; 0x45
 8006878:	4259      	negs	r1, r3
 800687a:	414b      	adcs	r3, r1
 800687c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800687e:	3a01      	subs	r2, #1
 8006880:	18cb      	adds	r3, r1, r3
 8006882:	9310      	str	r3, [sp, #64]	; 0x40
 8006884:	ab09      	add	r3, sp, #36	; 0x24
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	ab08      	add	r3, sp, #32
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800688e:	9200      	str	r2, [sp, #0]
 8006890:	9302      	str	r3, [sp, #8]
 8006892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006894:	0022      	movs	r2, r4
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	0033      	movs	r3, r6
 800689a:	f000 fea7 	bl	80075ec <_dtoa_r>
 800689e:	0005      	movs	r5, r0
 80068a0:	2f47      	cmp	r7, #71	; 0x47
 80068a2:	d102      	bne.n	80068aa <__cvt+0x5e>
 80068a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a6:	07db      	lsls	r3, r3, #31
 80068a8:	d528      	bpl.n	80068fc <__cvt+0xb0>
 80068aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ac:	18eb      	adds	r3, r5, r3
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	2f46      	cmp	r7, #70	; 0x46
 80068b2:	d114      	bne.n	80068de <__cvt+0x92>
 80068b4:	782b      	ldrb	r3, [r5, #0]
 80068b6:	2b30      	cmp	r3, #48	; 0x30
 80068b8:	d10c      	bne.n	80068d4 <__cvt+0x88>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	0020      	movs	r0, r4
 80068c0:	0031      	movs	r1, r6
 80068c2:	f7f9 fdc3 	bl	800044c <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d104      	bne.n	80068d4 <__cvt+0x88>
 80068ca:	2301      	movs	r3, #1
 80068cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068d6:	9a07      	ldr	r2, [sp, #28]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	18d3      	adds	r3, r2, r3
 80068dc:	9307      	str	r3, [sp, #28]
 80068de:	2200      	movs	r2, #0
 80068e0:	2300      	movs	r3, #0
 80068e2:	0020      	movs	r0, r4
 80068e4:	0031      	movs	r1, r6
 80068e6:	f7f9 fdb1 	bl	800044c <__aeabi_dcmpeq>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d001      	beq.n	80068f2 <__cvt+0xa6>
 80068ee:	9b07      	ldr	r3, [sp, #28]
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
 80068f2:	2230      	movs	r2, #48	; 0x30
 80068f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f6:	9907      	ldr	r1, [sp, #28]
 80068f8:	428b      	cmp	r3, r1
 80068fa:	d306      	bcc.n	800690a <__cvt+0xbe>
 80068fc:	0028      	movs	r0, r5
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006902:	1b5b      	subs	r3, r3, r5
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	b00b      	add	sp, #44	; 0x2c
 8006908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	9109      	str	r1, [sp, #36]	; 0x24
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e7f0      	b.n	80068f4 <__cvt+0xa8>

08006912 <__exponent>:
 8006912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006914:	1c83      	adds	r3, r0, #2
 8006916:	b087      	sub	sp, #28
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	0005      	movs	r5, r0
 800691c:	000c      	movs	r4, r1
 800691e:	232b      	movs	r3, #43	; 0x2b
 8006920:	7002      	strb	r2, [r0, #0]
 8006922:	2900      	cmp	r1, #0
 8006924:	da01      	bge.n	800692a <__exponent+0x18>
 8006926:	424c      	negs	r4, r1
 8006928:	3302      	adds	r3, #2
 800692a:	706b      	strb	r3, [r5, #1]
 800692c:	2c09      	cmp	r4, #9
 800692e:	dd2f      	ble.n	8006990 <__exponent+0x7e>
 8006930:	270a      	movs	r7, #10
 8006932:	ab04      	add	r3, sp, #16
 8006934:	1dde      	adds	r6, r3, #7
 8006936:	0020      	movs	r0, r4
 8006938:	0039      	movs	r1, r7
 800693a:	9601      	str	r6, [sp, #4]
 800693c:	f7f9 fd70 	bl	8000420 <__aeabi_idivmod>
 8006940:	3e01      	subs	r6, #1
 8006942:	3130      	adds	r1, #48	; 0x30
 8006944:	0020      	movs	r0, r4
 8006946:	7031      	strb	r1, [r6, #0]
 8006948:	0039      	movs	r1, r7
 800694a:	9402      	str	r4, [sp, #8]
 800694c:	f7f9 fc82 	bl	8000254 <__divsi3>
 8006950:	9b02      	ldr	r3, [sp, #8]
 8006952:	0004      	movs	r4, r0
 8006954:	2b63      	cmp	r3, #99	; 0x63
 8006956:	dcee      	bgt.n	8006936 <__exponent+0x24>
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	3430      	adds	r4, #48	; 0x30
 800695c:	1e9a      	subs	r2, r3, #2
 800695e:	0013      	movs	r3, r2
 8006960:	9903      	ldr	r1, [sp, #12]
 8006962:	7014      	strb	r4, [r2, #0]
 8006964:	a804      	add	r0, sp, #16
 8006966:	3007      	adds	r0, #7
 8006968:	4298      	cmp	r0, r3
 800696a:	d80c      	bhi.n	8006986 <__exponent+0x74>
 800696c:	2300      	movs	r3, #0
 800696e:	4282      	cmp	r2, r0
 8006970:	d804      	bhi.n	800697c <__exponent+0x6a>
 8006972:	aa04      	add	r2, sp, #16
 8006974:	3309      	adds	r3, #9
 8006976:	189b      	adds	r3, r3, r2
 8006978:	9a01      	ldr	r2, [sp, #4]
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	9a03      	ldr	r2, [sp, #12]
 800697e:	18d3      	adds	r3, r2, r3
 8006980:	1b58      	subs	r0, r3, r5
 8006982:	b007      	add	sp, #28
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	7818      	ldrb	r0, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	7008      	strb	r0, [r1, #0]
 800698c:	3101      	adds	r1, #1
 800698e:	e7e9      	b.n	8006964 <__exponent+0x52>
 8006990:	2330      	movs	r3, #48	; 0x30
 8006992:	3430      	adds	r4, #48	; 0x30
 8006994:	70ab      	strb	r3, [r5, #2]
 8006996:	70ec      	strb	r4, [r5, #3]
 8006998:	1d2b      	adds	r3, r5, #4
 800699a:	e7f1      	b.n	8006980 <__exponent+0x6e>

0800699c <_printf_float>:
 800699c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699e:	b095      	sub	sp, #84	; 0x54
 80069a0:	000c      	movs	r4, r1
 80069a2:	9208      	str	r2, [sp, #32]
 80069a4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80069a6:	9309      	str	r3, [sp, #36]	; 0x24
 80069a8:	0007      	movs	r7, r0
 80069aa:	f000 fd05 	bl	80073b8 <_localeconv_r>
 80069ae:	6803      	ldr	r3, [r0, #0]
 80069b0:	0018      	movs	r0, r3
 80069b2:	930c      	str	r3, [sp, #48]	; 0x30
 80069b4:	f7f9 fba8 	bl	8000108 <strlen>
 80069b8:	2300      	movs	r3, #0
 80069ba:	9312      	str	r3, [sp, #72]	; 0x48
 80069bc:	7e23      	ldrb	r3, [r4, #24]
 80069be:	2207      	movs	r2, #7
 80069c0:	930a      	str	r3, [sp, #40]	; 0x28
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	900d      	str	r0, [sp, #52]	; 0x34
 80069c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069ca:	682b      	ldr	r3, [r5, #0]
 80069cc:	05c9      	lsls	r1, r1, #23
 80069ce:	d547      	bpl.n	8006a60 <_printf_float+0xc4>
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	4393      	bics	r3, r2
 80069d4:	001a      	movs	r2, r3
 80069d6:	3208      	adds	r2, #8
 80069d8:	602a      	str	r2, [r5, #0]
 80069da:	681e      	ldr	r6, [r3, #0]
 80069dc:	685d      	ldr	r5, [r3, #4]
 80069de:	0032      	movs	r2, r6
 80069e0:	002b      	movs	r3, r5
 80069e2:	64a2      	str	r2, [r4, #72]	; 0x48
 80069e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80069e6:	2201      	movs	r2, #1
 80069e8:	006b      	lsls	r3, r5, #1
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	930e      	str	r3, [sp, #56]	; 0x38
 80069ee:	0030      	movs	r0, r6
 80069f0:	4bab      	ldr	r3, [pc, #684]	; (8006ca0 <_printf_float+0x304>)
 80069f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80069f4:	4252      	negs	r2, r2
 80069f6:	f7fc fa57 	bl	8002ea8 <__aeabi_dcmpun>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d132      	bne.n	8006a64 <_printf_float+0xc8>
 80069fe:	2201      	movs	r2, #1
 8006a00:	0030      	movs	r0, r6
 8006a02:	4ba7      	ldr	r3, [pc, #668]	; (8006ca0 <_printf_float+0x304>)
 8006a04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a06:	4252      	negs	r2, r2
 8006a08:	f7f9 fd30 	bl	800046c <__aeabi_dcmple>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d129      	bne.n	8006a64 <_printf_float+0xc8>
 8006a10:	2200      	movs	r2, #0
 8006a12:	2300      	movs	r3, #0
 8006a14:	0030      	movs	r0, r6
 8006a16:	0029      	movs	r1, r5
 8006a18:	f7f9 fd1e 	bl	8000458 <__aeabi_dcmplt>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d003      	beq.n	8006a28 <_printf_float+0x8c>
 8006a20:	0023      	movs	r3, r4
 8006a22:	222d      	movs	r2, #45	; 0x2d
 8006a24:	3343      	adds	r3, #67	; 0x43
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	4d9e      	ldr	r5, [pc, #632]	; (8006ca4 <_printf_float+0x308>)
 8006a2c:	2b47      	cmp	r3, #71	; 0x47
 8006a2e:	d900      	bls.n	8006a32 <_printf_float+0x96>
 8006a30:	4d9d      	ldr	r5, [pc, #628]	; (8006ca8 <_printf_float+0x30c>)
 8006a32:	2303      	movs	r3, #3
 8006a34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	439a      	bics	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6022      	str	r2, [r4, #0]
 8006a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a44:	0021      	movs	r1, r4
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	0038      	movs	r0, r7
 8006a4a:	9b08      	ldr	r3, [sp, #32]
 8006a4c:	aa13      	add	r2, sp, #76	; 0x4c
 8006a4e:	f000 f9fb 	bl	8006e48 <_printf_common>
 8006a52:	3001      	adds	r0, #1
 8006a54:	d000      	beq.n	8006a58 <_printf_float+0xbc>
 8006a56:	e0a3      	b.n	8006ba0 <_printf_float+0x204>
 8006a58:	2001      	movs	r0, #1
 8006a5a:	4240      	negs	r0, r0
 8006a5c:	b015      	add	sp, #84	; 0x54
 8006a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a60:	3307      	adds	r3, #7
 8006a62:	e7b6      	b.n	80069d2 <_printf_float+0x36>
 8006a64:	0032      	movs	r2, r6
 8006a66:	002b      	movs	r3, r5
 8006a68:	0030      	movs	r0, r6
 8006a6a:	0029      	movs	r1, r5
 8006a6c:	f7fc fa1c 	bl	8002ea8 <__aeabi_dcmpun>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d00b      	beq.n	8006a8c <_printf_float+0xf0>
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	da03      	bge.n	8006a80 <_printf_float+0xe4>
 8006a78:	0023      	movs	r3, r4
 8006a7a:	222d      	movs	r2, #45	; 0x2d
 8006a7c:	3343      	adds	r3, #67	; 0x43
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a82:	4d8a      	ldr	r5, [pc, #552]	; (8006cac <_printf_float+0x310>)
 8006a84:	2b47      	cmp	r3, #71	; 0x47
 8006a86:	d9d4      	bls.n	8006a32 <_printf_float+0x96>
 8006a88:	4d89      	ldr	r5, [pc, #548]	; (8006cb0 <_printf_float+0x314>)
 8006a8a:	e7d2      	b.n	8006a32 <_printf_float+0x96>
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a90:	6863      	ldr	r3, [r4, #4]
 8006a92:	4391      	bics	r1, r2
 8006a94:	910e      	str	r1, [sp, #56]	; 0x38
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	d14a      	bne.n	8006b30 <_printf_float+0x194>
 8006a9a:	3307      	adds	r3, #7
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	9206      	str	r2, [sp, #24]
 8006aaa:	aa12      	add	r2, sp, #72	; 0x48
 8006aac:	9205      	str	r2, [sp, #20]
 8006aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	9204      	str	r2, [sp, #16]
 8006ab4:	aa11      	add	r2, sp, #68	; 0x44
 8006ab6:	9203      	str	r2, [sp, #12]
 8006ab8:	2223      	movs	r2, #35	; 0x23
 8006aba:	a908      	add	r1, sp, #32
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	1852      	adds	r2, r2, r1
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	0032      	movs	r2, r6
 8006ac8:	002b      	movs	r3, r5
 8006aca:	0038      	movs	r0, r7
 8006acc:	f7ff febe 	bl	800684c <__cvt>
 8006ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad2:	0005      	movs	r5, r0
 8006ad4:	2b47      	cmp	r3, #71	; 0x47
 8006ad6:	d109      	bne.n	8006aec <_printf_float+0x150>
 8006ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ada:	1cda      	adds	r2, r3, #3
 8006adc:	db02      	blt.n	8006ae4 <_printf_float+0x148>
 8006ade:	6862      	ldr	r2, [r4, #4]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	dd49      	ble.n	8006b78 <_printf_float+0x1dc>
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae6:	3b02      	subs	r3, #2
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	930a      	str	r3, [sp, #40]	; 0x28
 8006aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006af0:	2b65      	cmp	r3, #101	; 0x65
 8006af2:	d824      	bhi.n	8006b3e <_printf_float+0x1a2>
 8006af4:	0020      	movs	r0, r4
 8006af6:	001a      	movs	r2, r3
 8006af8:	3901      	subs	r1, #1
 8006afa:	3050      	adds	r0, #80	; 0x50
 8006afc:	9111      	str	r1, [sp, #68]	; 0x44
 8006afe:	f7ff ff08 	bl	8006912 <__exponent>
 8006b02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b06:	1813      	adds	r3, r2, r0
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	2a01      	cmp	r2, #1
 8006b0c:	dc02      	bgt.n	8006b14 <_printf_float+0x178>
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	07d2      	lsls	r2, r2, #31
 8006b12:	d501      	bpl.n	8006b18 <_printf_float+0x17c>
 8006b14:	3301      	adds	r3, #1
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	2323      	movs	r3, #35	; 0x23
 8006b1a:	aa08      	add	r2, sp, #32
 8006b1c:	189b      	adds	r3, r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d100      	bne.n	8006b26 <_printf_float+0x18a>
 8006b24:	e78d      	b.n	8006a42 <_printf_float+0xa6>
 8006b26:	0023      	movs	r3, r4
 8006b28:	222d      	movs	r2, #45	; 0x2d
 8006b2a:	3343      	adds	r3, #67	; 0x43
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e788      	b.n	8006a42 <_printf_float+0xa6>
 8006b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b32:	2a47      	cmp	r2, #71	; 0x47
 8006b34:	d1b3      	bne.n	8006a9e <_printf_float+0x102>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1b1      	bne.n	8006a9e <_printf_float+0x102>
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	e7ae      	b.n	8006a9c <_printf_float+0x100>
 8006b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b40:	2b66      	cmp	r3, #102	; 0x66
 8006b42:	d11b      	bne.n	8006b7c <_printf_float+0x1e0>
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	2900      	cmp	r1, #0
 8006b48:	dd09      	ble.n	8006b5e <_printf_float+0x1c2>
 8006b4a:	6121      	str	r1, [r4, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <_printf_float+0x1ba>
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	07d2      	lsls	r2, r2, #31
 8006b54:	d50b      	bpl.n	8006b6e <_printf_float+0x1d2>
 8006b56:	3301      	adds	r3, #1
 8006b58:	185b      	adds	r3, r3, r1
 8006b5a:	6123      	str	r3, [r4, #16]
 8006b5c:	e007      	b.n	8006b6e <_printf_float+0x1d2>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d103      	bne.n	8006b6a <_printf_float+0x1ce>
 8006b62:	2201      	movs	r2, #1
 8006b64:	6821      	ldr	r1, [r4, #0]
 8006b66:	4211      	tst	r1, r2
 8006b68:	d000      	beq.n	8006b6c <_printf_float+0x1d0>
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	6122      	str	r2, [r4, #16]
 8006b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b70:	65a3      	str	r3, [r4, #88]	; 0x58
 8006b72:	2300      	movs	r3, #0
 8006b74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b76:	e7cf      	b.n	8006b18 <_printf_float+0x17c>
 8006b78:	2367      	movs	r3, #103	; 0x67
 8006b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b80:	4299      	cmp	r1, r3
 8006b82:	db06      	blt.n	8006b92 <_printf_float+0x1f6>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	6121      	str	r1, [r4, #16]
 8006b88:	07db      	lsls	r3, r3, #31
 8006b8a:	d5f0      	bpl.n	8006b6e <_printf_float+0x1d2>
 8006b8c:	3101      	adds	r1, #1
 8006b8e:	6121      	str	r1, [r4, #16]
 8006b90:	e7ed      	b.n	8006b6e <_printf_float+0x1d2>
 8006b92:	2201      	movs	r2, #1
 8006b94:	2900      	cmp	r1, #0
 8006b96:	dc01      	bgt.n	8006b9c <_printf_float+0x200>
 8006b98:	1892      	adds	r2, r2, r2
 8006b9a:	1a52      	subs	r2, r2, r1
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	e7dc      	b.n	8006b5a <_printf_float+0x1be>
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	0553      	lsls	r3, r2, #21
 8006ba4:	d408      	bmi.n	8006bb8 <_printf_float+0x21c>
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	002a      	movs	r2, r5
 8006baa:	0038      	movs	r0, r7
 8006bac:	9908      	ldr	r1, [sp, #32]
 8006bae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006bb0:	47a8      	blx	r5
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d12a      	bne.n	8006c0c <_printf_float+0x270>
 8006bb6:	e74f      	b.n	8006a58 <_printf_float+0xbc>
 8006bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bba:	2b65      	cmp	r3, #101	; 0x65
 8006bbc:	d800      	bhi.n	8006bc0 <_printf_float+0x224>
 8006bbe:	e0ec      	b.n	8006d9a <_printf_float+0x3fe>
 8006bc0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006bc2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f7f9 fc40 	bl	800044c <__aeabi_dcmpeq>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d034      	beq.n	8006c3a <_printf_float+0x29e>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	0038      	movs	r0, r7
 8006bd4:	4a37      	ldr	r2, [pc, #220]	; (8006cb4 <_printf_float+0x318>)
 8006bd6:	9908      	ldr	r1, [sp, #32]
 8006bd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006bda:	47a8      	blx	r5
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d100      	bne.n	8006be2 <_printf_float+0x246>
 8006be0:	e73a      	b.n	8006a58 <_printf_float+0xbc>
 8006be2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006be4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006be6:	429a      	cmp	r2, r3
 8006be8:	db02      	blt.n	8006bf0 <_printf_float+0x254>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	07db      	lsls	r3, r3, #31
 8006bee:	d50d      	bpl.n	8006c0c <_printf_float+0x270>
 8006bf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006bf2:	0038      	movs	r0, r7
 8006bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf8:	9908      	ldr	r1, [sp, #32]
 8006bfa:	47a8      	blx	r5
 8006bfc:	2500      	movs	r5, #0
 8006bfe:	3001      	adds	r0, #1
 8006c00:	d100      	bne.n	8006c04 <_printf_float+0x268>
 8006c02:	e729      	b.n	8006a58 <_printf_float+0xbc>
 8006c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c06:	3b01      	subs	r3, #1
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc0a      	bgt.n	8006c22 <_printf_float+0x286>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	079b      	lsls	r3, r3, #30
 8006c10:	d500      	bpl.n	8006c14 <_printf_float+0x278>
 8006c12:	e116      	b.n	8006e42 <_printf_float+0x4a6>
 8006c14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c16:	68e0      	ldr	r0, [r4, #12]
 8006c18:	4298      	cmp	r0, r3
 8006c1a:	db00      	blt.n	8006c1e <_printf_float+0x282>
 8006c1c:	e71e      	b.n	8006a5c <_printf_float+0xc0>
 8006c1e:	0018      	movs	r0, r3
 8006c20:	e71c      	b.n	8006a5c <_printf_float+0xc0>
 8006c22:	0022      	movs	r2, r4
 8006c24:	2301      	movs	r3, #1
 8006c26:	0038      	movs	r0, r7
 8006c28:	9908      	ldr	r1, [sp, #32]
 8006c2a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c2c:	321a      	adds	r2, #26
 8006c2e:	47b0      	blx	r6
 8006c30:	3001      	adds	r0, #1
 8006c32:	d100      	bne.n	8006c36 <_printf_float+0x29a>
 8006c34:	e710      	b.n	8006a58 <_printf_float+0xbc>
 8006c36:	3501      	adds	r5, #1
 8006c38:	e7e4      	b.n	8006c04 <_printf_float+0x268>
 8006c3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dc3b      	bgt.n	8006cb8 <_printf_float+0x31c>
 8006c40:	2301      	movs	r3, #1
 8006c42:	0038      	movs	r0, r7
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <_printf_float+0x318>)
 8006c46:	9908      	ldr	r1, [sp, #32]
 8006c48:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c4a:	47b0      	blx	r6
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d100      	bne.n	8006c52 <_printf_float+0x2b6>
 8006c50:	e702      	b.n	8006a58 <_printf_float+0xbc>
 8006c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c56:	4313      	orrs	r3, r2
 8006c58:	d102      	bne.n	8006c60 <_printf_float+0x2c4>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	07db      	lsls	r3, r3, #31
 8006c5e:	d5d5      	bpl.n	8006c0c <_printf_float+0x270>
 8006c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c62:	0038      	movs	r0, r7
 8006c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c66:	9908      	ldr	r1, [sp, #32]
 8006c68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c6a:	47b0      	blx	r6
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d100      	bne.n	8006c74 <_printf_float+0x2d8>
 8006c72:	e6f1      	b.n	8006a58 <_printf_float+0xbc>
 8006c74:	930a      	str	r3, [sp, #40]	; 0x28
 8006c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c7a:	425b      	negs	r3, r3
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	dc01      	bgt.n	8006c84 <_printf_float+0x2e8>
 8006c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c82:	e791      	b.n	8006ba8 <_printf_float+0x20c>
 8006c84:	0022      	movs	r2, r4
 8006c86:	2301      	movs	r3, #1
 8006c88:	0038      	movs	r0, r7
 8006c8a:	9908      	ldr	r1, [sp, #32]
 8006c8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c8e:	321a      	adds	r2, #26
 8006c90:	47b0      	blx	r6
 8006c92:	3001      	adds	r0, #1
 8006c94:	d100      	bne.n	8006c98 <_printf_float+0x2fc>
 8006c96:	e6df      	b.n	8006a58 <_printf_float+0xbc>
 8006c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	e7ea      	b.n	8006c74 <_printf_float+0x2d8>
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	7fefffff 	.word	0x7fefffff
 8006ca4:	0800b870 	.word	0x0800b870
 8006ca8:	0800b874 	.word	0x0800b874
 8006cac:	0800b878 	.word	0x0800b878
 8006cb0:	0800b87c 	.word	0x0800b87c
 8006cb4:	0800b880 	.word	0x0800b880
 8006cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	dd00      	ble.n	8006cc4 <_printf_float+0x328>
 8006cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc3d      	bgt.n	8006d46 <_printf_float+0x3aa>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8006cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	17db      	asrs	r3, r3, #31
 8006cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cde:	4013      	ands	r3, r2
 8006ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	dc36      	bgt.n	8006d58 <_printf_float+0x3bc>
 8006cea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	db40      	blt.n	8006d74 <_printf_float+0x3d8>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	07db      	lsls	r3, r3, #31
 8006cf6:	d43d      	bmi.n	8006d74 <_printf_float+0x3d8>
 8006cf8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006cfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfe:	1af3      	subs	r3, r6, r3
 8006d00:	1ab6      	subs	r6, r6, r2
 8006d02:	429e      	cmp	r6, r3
 8006d04:	dd00      	ble.n	8006d08 <_printf_float+0x36c>
 8006d06:	001e      	movs	r6, r3
 8006d08:	2e00      	cmp	r6, #0
 8006d0a:	dc3c      	bgt.n	8006d86 <_printf_float+0x3ea>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d10:	43f3      	mvns	r3, r6
 8006d12:	17db      	asrs	r3, r3, #31
 8006d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d1e:	4032      	ands	r2, r6
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d24:	4293      	cmp	r3, r2
 8006d26:	dc00      	bgt.n	8006d2a <_printf_float+0x38e>
 8006d28:	e770      	b.n	8006c0c <_printf_float+0x270>
 8006d2a:	0022      	movs	r2, r4
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	0038      	movs	r0, r7
 8006d30:	9908      	ldr	r1, [sp, #32]
 8006d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d34:	321a      	adds	r2, #26
 8006d36:	47a8      	blx	r5
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d100      	bne.n	8006d3e <_printf_float+0x3a2>
 8006d3c:	e68c      	b.n	8006a58 <_printf_float+0xbc>
 8006d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d40:	3301      	adds	r3, #1
 8006d42:	930a      	str	r3, [sp, #40]	; 0x28
 8006d44:	e7e7      	b.n	8006d16 <_printf_float+0x37a>
 8006d46:	002a      	movs	r2, r5
 8006d48:	0038      	movs	r0, r7
 8006d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4c:	9908      	ldr	r1, [sp, #32]
 8006d4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d50:	47b0      	blx	r6
 8006d52:	3001      	adds	r0, #1
 8006d54:	d1b9      	bne.n	8006cca <_printf_float+0x32e>
 8006d56:	e67f      	b.n	8006a58 <_printf_float+0xbc>
 8006d58:	0022      	movs	r2, r4
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	0038      	movs	r0, r7
 8006d5e:	9908      	ldr	r1, [sp, #32]
 8006d60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d62:	321a      	adds	r2, #26
 8006d64:	47b0      	blx	r6
 8006d66:	3001      	adds	r0, #1
 8006d68:	d100      	bne.n	8006d6c <_printf_float+0x3d0>
 8006d6a:	e675      	b.n	8006a58 <_printf_float+0xbc>
 8006d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d6e:	3301      	adds	r3, #1
 8006d70:	930e      	str	r3, [sp, #56]	; 0x38
 8006d72:	e7b0      	b.n	8006cd6 <_printf_float+0x33a>
 8006d74:	0038      	movs	r0, r7
 8006d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d7a:	9908      	ldr	r1, [sp, #32]
 8006d7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d7e:	47b0      	blx	r6
 8006d80:	3001      	adds	r0, #1
 8006d82:	d1b9      	bne.n	8006cf8 <_printf_float+0x35c>
 8006d84:	e668      	b.n	8006a58 <_printf_float+0xbc>
 8006d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d88:	0038      	movs	r0, r7
 8006d8a:	18ea      	adds	r2, r5, r3
 8006d8c:	9908      	ldr	r1, [sp, #32]
 8006d8e:	0033      	movs	r3, r6
 8006d90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006d92:	47a8      	blx	r5
 8006d94:	3001      	adds	r0, #1
 8006d96:	d1b9      	bne.n	8006d0c <_printf_float+0x370>
 8006d98:	e65e      	b.n	8006a58 <_printf_float+0xbc>
 8006d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	dc02      	bgt.n	8006da6 <_printf_float+0x40a>
 8006da0:	2301      	movs	r3, #1
 8006da2:	421a      	tst	r2, r3
 8006da4:	d03a      	beq.n	8006e1c <_printf_float+0x480>
 8006da6:	2301      	movs	r3, #1
 8006da8:	002a      	movs	r2, r5
 8006daa:	0038      	movs	r0, r7
 8006dac:	9908      	ldr	r1, [sp, #32]
 8006dae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006db0:	47b0      	blx	r6
 8006db2:	3001      	adds	r0, #1
 8006db4:	d100      	bne.n	8006db8 <_printf_float+0x41c>
 8006db6:	e64f      	b.n	8006a58 <_printf_float+0xbc>
 8006db8:	0038      	movs	r0, r7
 8006dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dbe:	9908      	ldr	r1, [sp, #32]
 8006dc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006dc2:	47b0      	blx	r6
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d100      	bne.n	8006dca <_printf_float+0x42e>
 8006dc8:	e646      	b.n	8006a58 <_printf_float+0xbc>
 8006dca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006dcc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	001e      	movs	r6, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f7f9 fb39 	bl	800044c <__aeabi_dcmpeq>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d11c      	bne.n	8006e18 <_printf_float+0x47c>
 8006dde:	0033      	movs	r3, r6
 8006de0:	1c6a      	adds	r2, r5, #1
 8006de2:	3b01      	subs	r3, #1
 8006de4:	0038      	movs	r0, r7
 8006de6:	9908      	ldr	r1, [sp, #32]
 8006de8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006dea:	47a8      	blx	r5
 8006dec:	3001      	adds	r0, #1
 8006dee:	d10f      	bne.n	8006e10 <_printf_float+0x474>
 8006df0:	e632      	b.n	8006a58 <_printf_float+0xbc>
 8006df2:	0022      	movs	r2, r4
 8006df4:	2301      	movs	r3, #1
 8006df6:	0038      	movs	r0, r7
 8006df8:	9908      	ldr	r1, [sp, #32]
 8006dfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006dfc:	321a      	adds	r2, #26
 8006dfe:	47b0      	blx	r6
 8006e00:	3001      	adds	r0, #1
 8006e02:	d100      	bne.n	8006e06 <_printf_float+0x46a>
 8006e04:	e628      	b.n	8006a58 <_printf_float+0xbc>
 8006e06:	3501      	adds	r5, #1
 8006e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	42ab      	cmp	r3, r5
 8006e0e:	dcf0      	bgt.n	8006df2 <_printf_float+0x456>
 8006e10:	0022      	movs	r2, r4
 8006e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e14:	3250      	adds	r2, #80	; 0x50
 8006e16:	e6c8      	b.n	8006baa <_printf_float+0x20e>
 8006e18:	2500      	movs	r5, #0
 8006e1a:	e7f5      	b.n	8006e08 <_printf_float+0x46c>
 8006e1c:	002a      	movs	r2, r5
 8006e1e:	e7e1      	b.n	8006de4 <_printf_float+0x448>
 8006e20:	0022      	movs	r2, r4
 8006e22:	2301      	movs	r3, #1
 8006e24:	0038      	movs	r0, r7
 8006e26:	9908      	ldr	r1, [sp, #32]
 8006e28:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e2a:	3219      	adds	r2, #25
 8006e2c:	47b0      	blx	r6
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d100      	bne.n	8006e34 <_printf_float+0x498>
 8006e32:	e611      	b.n	8006a58 <_printf_float+0xbc>
 8006e34:	3501      	adds	r5, #1
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dcef      	bgt.n	8006e20 <_printf_float+0x484>
 8006e40:	e6e8      	b.n	8006c14 <_printf_float+0x278>
 8006e42:	2500      	movs	r5, #0
 8006e44:	e7f7      	b.n	8006e36 <_printf_float+0x49a>
 8006e46:	46c0      	nop			; (mov r8, r8)

08006e48 <_printf_common>:
 8006e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4a:	0016      	movs	r6, r2
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	688a      	ldr	r2, [r1, #8]
 8006e50:	690b      	ldr	r3, [r1, #16]
 8006e52:	000c      	movs	r4, r1
 8006e54:	9000      	str	r0, [sp, #0]
 8006e56:	4293      	cmp	r3, r2
 8006e58:	da00      	bge.n	8006e5c <_printf_common+0x14>
 8006e5a:	0013      	movs	r3, r2
 8006e5c:	0022      	movs	r2, r4
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	3243      	adds	r2, #67	; 0x43
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	d001      	beq.n	8006e6c <_printf_common+0x24>
 8006e68:	3301      	adds	r3, #1
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	069b      	lsls	r3, r3, #26
 8006e70:	d502      	bpl.n	8006e78 <_printf_common+0x30>
 8006e72:	6833      	ldr	r3, [r6, #0]
 8006e74:	3302      	adds	r3, #2
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	6822      	ldr	r2, [r4, #0]
 8006e7a:	2306      	movs	r3, #6
 8006e7c:	0015      	movs	r5, r2
 8006e7e:	401d      	ands	r5, r3
 8006e80:	421a      	tst	r2, r3
 8006e82:	d027      	beq.n	8006ed4 <_printf_common+0x8c>
 8006e84:	0023      	movs	r3, r4
 8006e86:	3343      	adds	r3, #67	; 0x43
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	1e5a      	subs	r2, r3, #1
 8006e8c:	4193      	sbcs	r3, r2
 8006e8e:	6822      	ldr	r2, [r4, #0]
 8006e90:	0692      	lsls	r2, r2, #26
 8006e92:	d430      	bmi.n	8006ef6 <_printf_common+0xae>
 8006e94:	0022      	movs	r2, r4
 8006e96:	9901      	ldr	r1, [sp, #4]
 8006e98:	9800      	ldr	r0, [sp, #0]
 8006e9a:	9d08      	ldr	r5, [sp, #32]
 8006e9c:	3243      	adds	r2, #67	; 0x43
 8006e9e:	47a8      	blx	r5
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d025      	beq.n	8006ef0 <_printf_common+0xa8>
 8006ea4:	2206      	movs	r2, #6
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d105      	bne.n	8006ebc <_printf_common+0x74>
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	68e5      	ldr	r5, [r4, #12]
 8006eb4:	1aed      	subs	r5, r5, r3
 8006eb6:	43eb      	mvns	r3, r5
 8006eb8:	17db      	asrs	r3, r3, #31
 8006eba:	401d      	ands	r5, r3
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	6922      	ldr	r2, [r4, #16]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	dd01      	ble.n	8006ec8 <_printf_common+0x80>
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	18ed      	adds	r5, r5, r3
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42b5      	cmp	r5, r6
 8006ecc:	d120      	bne.n	8006f10 <_printf_common+0xc8>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e010      	b.n	8006ef4 <_printf_common+0xac>
 8006ed2:	3501      	adds	r5, #1
 8006ed4:	68e3      	ldr	r3, [r4, #12]
 8006ed6:	6832      	ldr	r2, [r6, #0]
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	42ab      	cmp	r3, r5
 8006edc:	ddd2      	ble.n	8006e84 <_printf_common+0x3c>
 8006ede:	0022      	movs	r2, r4
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	9901      	ldr	r1, [sp, #4]
 8006ee4:	9800      	ldr	r0, [sp, #0]
 8006ee6:	9f08      	ldr	r7, [sp, #32]
 8006ee8:	3219      	adds	r2, #25
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	d1f0      	bne.n	8006ed2 <_printf_common+0x8a>
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	4240      	negs	r0, r0
 8006ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ef6:	2030      	movs	r0, #48	; 0x30
 8006ef8:	18e1      	adds	r1, r4, r3
 8006efa:	3143      	adds	r1, #67	; 0x43
 8006efc:	7008      	strb	r0, [r1, #0]
 8006efe:	0021      	movs	r1, r4
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	3145      	adds	r1, #69	; 0x45
 8006f04:	7809      	ldrb	r1, [r1, #0]
 8006f06:	18a2      	adds	r2, r4, r2
 8006f08:	3243      	adds	r2, #67	; 0x43
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	7011      	strb	r1, [r2, #0]
 8006f0e:	e7c1      	b.n	8006e94 <_printf_common+0x4c>
 8006f10:	0022      	movs	r2, r4
 8006f12:	2301      	movs	r3, #1
 8006f14:	9901      	ldr	r1, [sp, #4]
 8006f16:	9800      	ldr	r0, [sp, #0]
 8006f18:	9f08      	ldr	r7, [sp, #32]
 8006f1a:	321a      	adds	r2, #26
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d0e6      	beq.n	8006ef0 <_printf_common+0xa8>
 8006f22:	3601      	adds	r6, #1
 8006f24:	e7d1      	b.n	8006eca <_printf_common+0x82>
	...

08006f28 <_printf_i>:
 8006f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2a:	b08b      	sub	sp, #44	; 0x2c
 8006f2c:	9206      	str	r2, [sp, #24]
 8006f2e:	000a      	movs	r2, r1
 8006f30:	3243      	adds	r2, #67	; 0x43
 8006f32:	9307      	str	r3, [sp, #28]
 8006f34:	9005      	str	r0, [sp, #20]
 8006f36:	9204      	str	r2, [sp, #16]
 8006f38:	7e0a      	ldrb	r2, [r1, #24]
 8006f3a:	000c      	movs	r4, r1
 8006f3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f3e:	2a78      	cmp	r2, #120	; 0x78
 8006f40:	d809      	bhi.n	8006f56 <_printf_i+0x2e>
 8006f42:	2a62      	cmp	r2, #98	; 0x62
 8006f44:	d80b      	bhi.n	8006f5e <_printf_i+0x36>
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	d100      	bne.n	8006f4c <_printf_i+0x24>
 8006f4a:	e0be      	b.n	80070ca <_printf_i+0x1a2>
 8006f4c:	497c      	ldr	r1, [pc, #496]	; (8007140 <_printf_i+0x218>)
 8006f4e:	9103      	str	r1, [sp, #12]
 8006f50:	2a58      	cmp	r2, #88	; 0x58
 8006f52:	d100      	bne.n	8006f56 <_printf_i+0x2e>
 8006f54:	e093      	b.n	800707e <_printf_i+0x156>
 8006f56:	0026      	movs	r6, r4
 8006f58:	3642      	adds	r6, #66	; 0x42
 8006f5a:	7032      	strb	r2, [r6, #0]
 8006f5c:	e022      	b.n	8006fa4 <_printf_i+0x7c>
 8006f5e:	0010      	movs	r0, r2
 8006f60:	3863      	subs	r0, #99	; 0x63
 8006f62:	2815      	cmp	r0, #21
 8006f64:	d8f7      	bhi.n	8006f56 <_printf_i+0x2e>
 8006f66:	f7f9 f8e1 	bl	800012c <__gnu_thumb1_case_shi>
 8006f6a:	0016      	.short	0x0016
 8006f6c:	fff6001f 	.word	0xfff6001f
 8006f70:	fff6fff6 	.word	0xfff6fff6
 8006f74:	001ffff6 	.word	0x001ffff6
 8006f78:	fff6fff6 	.word	0xfff6fff6
 8006f7c:	fff6fff6 	.word	0xfff6fff6
 8006f80:	003600a3 	.word	0x003600a3
 8006f84:	fff60083 	.word	0xfff60083
 8006f88:	00b4fff6 	.word	0x00b4fff6
 8006f8c:	0036fff6 	.word	0x0036fff6
 8006f90:	fff6fff6 	.word	0xfff6fff6
 8006f94:	0087      	.short	0x0087
 8006f96:	0026      	movs	r6, r4
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	3642      	adds	r6, #66	; 0x42
 8006f9c:	1d11      	adds	r1, r2, #4
 8006f9e:	6019      	str	r1, [r3, #0]
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	7033      	strb	r3, [r6, #0]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0a2      	b.n	80070ee <_printf_i+0x1c6>
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	6809      	ldr	r1, [r1, #0]
 8006fac:	1d02      	adds	r2, r0, #4
 8006fae:	060d      	lsls	r5, r1, #24
 8006fb0:	d50b      	bpl.n	8006fca <_printf_i+0xa2>
 8006fb2:	6805      	ldr	r5, [r0, #0]
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	2d00      	cmp	r5, #0
 8006fb8:	da03      	bge.n	8006fc2 <_printf_i+0x9a>
 8006fba:	232d      	movs	r3, #45	; 0x2d
 8006fbc:	9a04      	ldr	r2, [sp, #16]
 8006fbe:	426d      	negs	r5, r5
 8006fc0:	7013      	strb	r3, [r2, #0]
 8006fc2:	4b5f      	ldr	r3, [pc, #380]	; (8007140 <_printf_i+0x218>)
 8006fc4:	270a      	movs	r7, #10
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	e01b      	b.n	8007002 <_printf_i+0xda>
 8006fca:	6805      	ldr	r5, [r0, #0]
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	0649      	lsls	r1, r1, #25
 8006fd0:	d5f1      	bpl.n	8006fb6 <_printf_i+0x8e>
 8006fd2:	b22d      	sxth	r5, r5
 8006fd4:	e7ef      	b.n	8006fb6 <_printf_i+0x8e>
 8006fd6:	680d      	ldr	r5, [r1, #0]
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	1d08      	adds	r0, r1, #4
 8006fdc:	6018      	str	r0, [r3, #0]
 8006fde:	062e      	lsls	r6, r5, #24
 8006fe0:	d501      	bpl.n	8006fe6 <_printf_i+0xbe>
 8006fe2:	680d      	ldr	r5, [r1, #0]
 8006fe4:	e003      	b.n	8006fee <_printf_i+0xc6>
 8006fe6:	066d      	lsls	r5, r5, #25
 8006fe8:	d5fb      	bpl.n	8006fe2 <_printf_i+0xba>
 8006fea:	680d      	ldr	r5, [r1, #0]
 8006fec:	b2ad      	uxth	r5, r5
 8006fee:	4b54      	ldr	r3, [pc, #336]	; (8007140 <_printf_i+0x218>)
 8006ff0:	2708      	movs	r7, #8
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	2a6f      	cmp	r2, #111	; 0x6f
 8006ff6:	d000      	beq.n	8006ffa <_printf_i+0xd2>
 8006ff8:	3702      	adds	r7, #2
 8006ffa:	0023      	movs	r3, r4
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	3343      	adds	r3, #67	; 0x43
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	db03      	blt.n	8007012 <_printf_i+0xea>
 800700a:	2104      	movs	r1, #4
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	438a      	bics	r2, r1
 8007010:	6022      	str	r2, [r4, #0]
 8007012:	2d00      	cmp	r5, #0
 8007014:	d102      	bne.n	800701c <_printf_i+0xf4>
 8007016:	9e04      	ldr	r6, [sp, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <_printf_i+0x10e>
 800701c:	9e04      	ldr	r6, [sp, #16]
 800701e:	0028      	movs	r0, r5
 8007020:	0039      	movs	r1, r7
 8007022:	f7f9 f913 	bl	800024c <__aeabi_uidivmod>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	3e01      	subs	r6, #1
 800702a:	5c5b      	ldrb	r3, [r3, r1]
 800702c:	7033      	strb	r3, [r6, #0]
 800702e:	002b      	movs	r3, r5
 8007030:	0005      	movs	r5, r0
 8007032:	429f      	cmp	r7, r3
 8007034:	d9f3      	bls.n	800701e <_printf_i+0xf6>
 8007036:	2f08      	cmp	r7, #8
 8007038:	d109      	bne.n	800704e <_printf_i+0x126>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	07db      	lsls	r3, r3, #31
 800703e:	d506      	bpl.n	800704e <_printf_i+0x126>
 8007040:	6862      	ldr	r2, [r4, #4]
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	429a      	cmp	r2, r3
 8007046:	dc02      	bgt.n	800704e <_printf_i+0x126>
 8007048:	2330      	movs	r3, #48	; 0x30
 800704a:	3e01      	subs	r6, #1
 800704c:	7033      	strb	r3, [r6, #0]
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	1b9b      	subs	r3, r3, r6
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	9b07      	ldr	r3, [sp, #28]
 8007056:	0021      	movs	r1, r4
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	9805      	ldr	r0, [sp, #20]
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	aa09      	add	r2, sp, #36	; 0x24
 8007060:	f7ff fef2 	bl	8006e48 <_printf_common>
 8007064:	3001      	adds	r0, #1
 8007066:	d147      	bne.n	80070f8 <_printf_i+0x1d0>
 8007068:	2001      	movs	r0, #1
 800706a:	4240      	negs	r0, r0
 800706c:	b00b      	add	sp, #44	; 0x2c
 800706e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007070:	2220      	movs	r2, #32
 8007072:	6809      	ldr	r1, [r1, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	6022      	str	r2, [r4, #0]
 8007078:	2278      	movs	r2, #120	; 0x78
 800707a:	4932      	ldr	r1, [pc, #200]	; (8007144 <_printf_i+0x21c>)
 800707c:	9103      	str	r1, [sp, #12]
 800707e:	0021      	movs	r1, r4
 8007080:	3145      	adds	r1, #69	; 0x45
 8007082:	700a      	strb	r2, [r1, #0]
 8007084:	6819      	ldr	r1, [r3, #0]
 8007086:	6822      	ldr	r2, [r4, #0]
 8007088:	c920      	ldmia	r1!, {r5}
 800708a:	0610      	lsls	r0, r2, #24
 800708c:	d402      	bmi.n	8007094 <_printf_i+0x16c>
 800708e:	0650      	lsls	r0, r2, #25
 8007090:	d500      	bpl.n	8007094 <_printf_i+0x16c>
 8007092:	b2ad      	uxth	r5, r5
 8007094:	6019      	str	r1, [r3, #0]
 8007096:	07d3      	lsls	r3, r2, #31
 8007098:	d502      	bpl.n	80070a0 <_printf_i+0x178>
 800709a:	2320      	movs	r3, #32
 800709c:	4313      	orrs	r3, r2
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	2710      	movs	r7, #16
 80070a2:	2d00      	cmp	r5, #0
 80070a4:	d1a9      	bne.n	8006ffa <_printf_i+0xd2>
 80070a6:	2220      	movs	r2, #32
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	4393      	bics	r3, r2
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	e7a4      	b.n	8006ffa <_printf_i+0xd2>
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	680d      	ldr	r5, [r1, #0]
 80070b4:	1d10      	adds	r0, r2, #4
 80070b6:	6949      	ldr	r1, [r1, #20]
 80070b8:	6018      	str	r0, [r3, #0]
 80070ba:	6813      	ldr	r3, [r2, #0]
 80070bc:	062e      	lsls	r6, r5, #24
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0x19c>
 80070c0:	6019      	str	r1, [r3, #0]
 80070c2:	e002      	b.n	80070ca <_printf_i+0x1a2>
 80070c4:	066d      	lsls	r5, r5, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0x198>
 80070c8:	8019      	strh	r1, [r3, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	9e04      	ldr	r6, [sp, #16]
 80070ce:	6123      	str	r3, [r4, #16]
 80070d0:	e7c0      	b.n	8007054 <_printf_i+0x12c>
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	1d11      	adds	r1, r2, #4
 80070d6:	6019      	str	r1, [r3, #0]
 80070d8:	6816      	ldr	r6, [r2, #0]
 80070da:	2100      	movs	r1, #0
 80070dc:	0030      	movs	r0, r6
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	f000 f9e9 	bl	80074b6 <memchr>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d001      	beq.n	80070ec <_printf_i+0x1c4>
 80070e8:	1b80      	subs	r0, r0, r6
 80070ea:	6060      	str	r0, [r4, #4]
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	2300      	movs	r3, #0
 80070f2:	9a04      	ldr	r2, [sp, #16]
 80070f4:	7013      	strb	r3, [r2, #0]
 80070f6:	e7ad      	b.n	8007054 <_printf_i+0x12c>
 80070f8:	0032      	movs	r2, r6
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	9906      	ldr	r1, [sp, #24]
 80070fe:	9805      	ldr	r0, [sp, #20]
 8007100:	9d07      	ldr	r5, [sp, #28]
 8007102:	47a8      	blx	r5
 8007104:	3001      	adds	r0, #1
 8007106:	d0af      	beq.n	8007068 <_printf_i+0x140>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	079b      	lsls	r3, r3, #30
 800710c:	d415      	bmi.n	800713a <_printf_i+0x212>
 800710e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007110:	68e0      	ldr	r0, [r4, #12]
 8007112:	4298      	cmp	r0, r3
 8007114:	daaa      	bge.n	800706c <_printf_i+0x144>
 8007116:	0018      	movs	r0, r3
 8007118:	e7a8      	b.n	800706c <_printf_i+0x144>
 800711a:	0022      	movs	r2, r4
 800711c:	2301      	movs	r3, #1
 800711e:	9906      	ldr	r1, [sp, #24]
 8007120:	9805      	ldr	r0, [sp, #20]
 8007122:	9e07      	ldr	r6, [sp, #28]
 8007124:	3219      	adds	r2, #25
 8007126:	47b0      	blx	r6
 8007128:	3001      	adds	r0, #1
 800712a:	d09d      	beq.n	8007068 <_printf_i+0x140>
 800712c:	3501      	adds	r5, #1
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	42ab      	cmp	r3, r5
 8007136:	dcf0      	bgt.n	800711a <_printf_i+0x1f2>
 8007138:	e7e9      	b.n	800710e <_printf_i+0x1e6>
 800713a:	2500      	movs	r5, #0
 800713c:	e7f7      	b.n	800712e <_printf_i+0x206>
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	0800b882 	.word	0x0800b882
 8007144:	0800b893 	.word	0x0800b893

08007148 <std>:
 8007148:	2300      	movs	r3, #0
 800714a:	b510      	push	{r4, lr}
 800714c:	0004      	movs	r4, r0
 800714e:	6003      	str	r3, [r0, #0]
 8007150:	6043      	str	r3, [r0, #4]
 8007152:	6083      	str	r3, [r0, #8]
 8007154:	8181      	strh	r1, [r0, #12]
 8007156:	6643      	str	r3, [r0, #100]	; 0x64
 8007158:	81c2      	strh	r2, [r0, #14]
 800715a:	6103      	str	r3, [r0, #16]
 800715c:	6143      	str	r3, [r0, #20]
 800715e:	6183      	str	r3, [r0, #24]
 8007160:	0019      	movs	r1, r3
 8007162:	2208      	movs	r2, #8
 8007164:	305c      	adds	r0, #92	; 0x5c
 8007166:	f000 f91f 	bl	80073a8 <memset>
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <std+0x50>)
 800716c:	6224      	str	r4, [r4, #32]
 800716e:	6263      	str	r3, [r4, #36]	; 0x24
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <std+0x54>)
 8007172:	62a3      	str	r3, [r4, #40]	; 0x28
 8007174:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <std+0x58>)
 8007176:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <std+0x5c>)
 800717a:	6323      	str	r3, [r4, #48]	; 0x30
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <std+0x60>)
 800717e:	429c      	cmp	r4, r3
 8007180:	d005      	beq.n	800718e <std+0x46>
 8007182:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <std+0x64>)
 8007184:	429c      	cmp	r4, r3
 8007186:	d002      	beq.n	800718e <std+0x46>
 8007188:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <std+0x68>)
 800718a:	429c      	cmp	r4, r3
 800718c:	d103      	bne.n	8007196 <std+0x4e>
 800718e:	0020      	movs	r0, r4
 8007190:	3058      	adds	r0, #88	; 0x58
 8007192:	f000 f98d 	bl	80074b0 <__retarget_lock_init_recursive>
 8007196:	bd10      	pop	{r4, pc}
 8007198:	08007311 	.word	0x08007311
 800719c:	08007339 	.word	0x08007339
 80071a0:	08007371 	.word	0x08007371
 80071a4:	0800739d 	.word	0x0800739d
 80071a8:	20000798 	.word	0x20000798
 80071ac:	20000800 	.word	0x20000800
 80071b0:	20000868 	.word	0x20000868

080071b4 <stdio_exit_handler>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <stdio_exit_handler+0x10>)
 80071b8:	4903      	ldr	r1, [pc, #12]	; (80071c8 <stdio_exit_handler+0x14>)
 80071ba:	4804      	ldr	r0, [pc, #16]	; (80071cc <stdio_exit_handler+0x18>)
 80071bc:	f000 f86c 	bl	8007298 <_fwalk_sglue>
 80071c0:	bd10      	pop	{r4, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	200000b4 	.word	0x200000b4
 80071c8:	08008f25 	.word	0x08008f25
 80071cc:	200000c0 	.word	0x200000c0

080071d0 <cleanup_stdio>:
 80071d0:	6841      	ldr	r1, [r0, #4]
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <cleanup_stdio+0x30>)
 80071d4:	b510      	push	{r4, lr}
 80071d6:	0004      	movs	r4, r0
 80071d8:	4299      	cmp	r1, r3
 80071da:	d001      	beq.n	80071e0 <cleanup_stdio+0x10>
 80071dc:	f001 fea2 	bl	8008f24 <_fflush_r>
 80071e0:	68a1      	ldr	r1, [r4, #8]
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <cleanup_stdio+0x34>)
 80071e4:	4299      	cmp	r1, r3
 80071e6:	d002      	beq.n	80071ee <cleanup_stdio+0x1e>
 80071e8:	0020      	movs	r0, r4
 80071ea:	f001 fe9b 	bl	8008f24 <_fflush_r>
 80071ee:	68e1      	ldr	r1, [r4, #12]
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <cleanup_stdio+0x38>)
 80071f2:	4299      	cmp	r1, r3
 80071f4:	d002      	beq.n	80071fc <cleanup_stdio+0x2c>
 80071f6:	0020      	movs	r0, r4
 80071f8:	f001 fe94 	bl	8008f24 <_fflush_r>
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	20000798 	.word	0x20000798
 8007204:	20000800 	.word	0x20000800
 8007208:	20000868 	.word	0x20000868

0800720c <global_stdio_init.part.0>:
 800720c:	b510      	push	{r4, lr}
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <global_stdio_init.part.0+0x28>)
 8007210:	4a09      	ldr	r2, [pc, #36]	; (8007238 <global_stdio_init.part.0+0x2c>)
 8007212:	2104      	movs	r1, #4
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	4809      	ldr	r0, [pc, #36]	; (800723c <global_stdio_init.part.0+0x30>)
 8007218:	2200      	movs	r2, #0
 800721a:	f7ff ff95 	bl	8007148 <std>
 800721e:	2201      	movs	r2, #1
 8007220:	2109      	movs	r1, #9
 8007222:	4807      	ldr	r0, [pc, #28]	; (8007240 <global_stdio_init.part.0+0x34>)
 8007224:	f7ff ff90 	bl	8007148 <std>
 8007228:	2202      	movs	r2, #2
 800722a:	2112      	movs	r1, #18
 800722c:	4805      	ldr	r0, [pc, #20]	; (8007244 <global_stdio_init.part.0+0x38>)
 800722e:	f7ff ff8b 	bl	8007148 <std>
 8007232:	bd10      	pop	{r4, pc}
 8007234:	200008d0 	.word	0x200008d0
 8007238:	080071b5 	.word	0x080071b5
 800723c:	20000798 	.word	0x20000798
 8007240:	20000800 	.word	0x20000800
 8007244:	20000868 	.word	0x20000868

08007248 <__sfp_lock_acquire>:
 8007248:	b510      	push	{r4, lr}
 800724a:	4802      	ldr	r0, [pc, #8]	; (8007254 <__sfp_lock_acquire+0xc>)
 800724c:	f000 f931 	bl	80074b2 <__retarget_lock_acquire_recursive>
 8007250:	bd10      	pop	{r4, pc}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	200008d9 	.word	0x200008d9

08007258 <__sfp_lock_release>:
 8007258:	b510      	push	{r4, lr}
 800725a:	4802      	ldr	r0, [pc, #8]	; (8007264 <__sfp_lock_release+0xc>)
 800725c:	f000 f92a 	bl	80074b4 <__retarget_lock_release_recursive>
 8007260:	bd10      	pop	{r4, pc}
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	200008d9 	.word	0x200008d9

08007268 <__sinit>:
 8007268:	b510      	push	{r4, lr}
 800726a:	0004      	movs	r4, r0
 800726c:	f7ff ffec 	bl	8007248 <__sfp_lock_acquire>
 8007270:	6a23      	ldr	r3, [r4, #32]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <__sinit+0x14>
 8007276:	f7ff ffef 	bl	8007258 <__sfp_lock_release>
 800727a:	bd10      	pop	{r4, pc}
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <__sinit+0x28>)
 800727e:	6223      	str	r3, [r4, #32]
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <__sinit+0x2c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f6      	bne.n	8007276 <__sinit+0xe>
 8007288:	f7ff ffc0 	bl	800720c <global_stdio_init.part.0>
 800728c:	e7f3      	b.n	8007276 <__sinit+0xe>
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	080071d1 	.word	0x080071d1
 8007294:	200008d0 	.word	0x200008d0

08007298 <_fwalk_sglue>:
 8007298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729a:	0014      	movs	r4, r2
 800729c:	2600      	movs	r6, #0
 800729e:	9000      	str	r0, [sp, #0]
 80072a0:	9101      	str	r1, [sp, #4]
 80072a2:	68a5      	ldr	r5, [r4, #8]
 80072a4:	6867      	ldr	r7, [r4, #4]
 80072a6:	3f01      	subs	r7, #1
 80072a8:	d504      	bpl.n	80072b4 <_fwalk_sglue+0x1c>
 80072aa:	6824      	ldr	r4, [r4, #0]
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	d1f8      	bne.n	80072a2 <_fwalk_sglue+0xa>
 80072b0:	0030      	movs	r0, r6
 80072b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072b4:	89ab      	ldrh	r3, [r5, #12]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d908      	bls.n	80072cc <_fwalk_sglue+0x34>
 80072ba:	220e      	movs	r2, #14
 80072bc:	5eab      	ldrsh	r3, [r5, r2]
 80072be:	3301      	adds	r3, #1
 80072c0:	d004      	beq.n	80072cc <_fwalk_sglue+0x34>
 80072c2:	0029      	movs	r1, r5
 80072c4:	9800      	ldr	r0, [sp, #0]
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	4798      	blx	r3
 80072ca:	4306      	orrs	r6, r0
 80072cc:	3568      	adds	r5, #104	; 0x68
 80072ce:	e7ea      	b.n	80072a6 <_fwalk_sglue+0xe>

080072d0 <siprintf>:
 80072d0:	b40e      	push	{r1, r2, r3}
 80072d2:	b500      	push	{lr}
 80072d4:	490b      	ldr	r1, [pc, #44]	; (8007304 <siprintf+0x34>)
 80072d6:	b09c      	sub	sp, #112	; 0x70
 80072d8:	ab1d      	add	r3, sp, #116	; 0x74
 80072da:	9002      	str	r0, [sp, #8]
 80072dc:	9006      	str	r0, [sp, #24]
 80072de:	9107      	str	r1, [sp, #28]
 80072e0:	9104      	str	r1, [sp, #16]
 80072e2:	4809      	ldr	r0, [pc, #36]	; (8007308 <siprintf+0x38>)
 80072e4:	4909      	ldr	r1, [pc, #36]	; (800730c <siprintf+0x3c>)
 80072e6:	cb04      	ldmia	r3!, {r2}
 80072e8:	9105      	str	r1, [sp, #20]
 80072ea:	6800      	ldr	r0, [r0, #0]
 80072ec:	a902      	add	r1, sp, #8
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	f001 fc8e 	bl	8008c10 <_svfiprintf_r>
 80072f4:	2200      	movs	r2, #0
 80072f6:	9b02      	ldr	r3, [sp, #8]
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	b01c      	add	sp, #112	; 0x70
 80072fc:	bc08      	pop	{r3}
 80072fe:	b003      	add	sp, #12
 8007300:	4718      	bx	r3
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	7fffffff 	.word	0x7fffffff
 8007308:	2000010c 	.word	0x2000010c
 800730c:	ffff0208 	.word	0xffff0208

08007310 <__sread>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	000c      	movs	r4, r1
 8007314:	250e      	movs	r5, #14
 8007316:	5f49      	ldrsh	r1, [r1, r5]
 8007318:	f000 f878 	bl	800740c <_read_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	db03      	blt.n	8007328 <__sread+0x18>
 8007320:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007322:	181b      	adds	r3, r3, r0
 8007324:	6563      	str	r3, [r4, #84]	; 0x54
 8007326:	bd70      	pop	{r4, r5, r6, pc}
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	4a02      	ldr	r2, [pc, #8]	; (8007334 <__sread+0x24>)
 800732c:	4013      	ands	r3, r2
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	e7f9      	b.n	8007326 <__sread+0x16>
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	ffffefff 	.word	0xffffefff

08007338 <__swrite>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	001f      	movs	r7, r3
 800733c:	898b      	ldrh	r3, [r1, #12]
 800733e:	0005      	movs	r5, r0
 8007340:	000c      	movs	r4, r1
 8007342:	0016      	movs	r6, r2
 8007344:	05db      	lsls	r3, r3, #23
 8007346:	d505      	bpl.n	8007354 <__swrite+0x1c>
 8007348:	230e      	movs	r3, #14
 800734a:	5ec9      	ldrsh	r1, [r1, r3]
 800734c:	2200      	movs	r2, #0
 800734e:	2302      	movs	r3, #2
 8007350:	f000 f848 	bl	80073e4 <_lseek_r>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	4a05      	ldr	r2, [pc, #20]	; (800736c <__swrite+0x34>)
 8007358:	0028      	movs	r0, r5
 800735a:	4013      	ands	r3, r2
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	0032      	movs	r2, r6
 8007360:	230e      	movs	r3, #14
 8007362:	5ee1      	ldrsh	r1, [r4, r3]
 8007364:	003b      	movs	r3, r7
 8007366:	f000 f865 	bl	8007434 <_write_r>
 800736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800736c:	ffffefff 	.word	0xffffefff

08007370 <__sseek>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	000c      	movs	r4, r1
 8007374:	250e      	movs	r5, #14
 8007376:	5f49      	ldrsh	r1, [r1, r5]
 8007378:	f000 f834 	bl	80073e4 <_lseek_r>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	1c42      	adds	r2, r0, #1
 8007380:	d103      	bne.n	800738a <__sseek+0x1a>
 8007382:	4a05      	ldr	r2, [pc, #20]	; (8007398 <__sseek+0x28>)
 8007384:	4013      	ands	r3, r2
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	bd70      	pop	{r4, r5, r6, pc}
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	0152      	lsls	r2, r2, #5
 800738e:	4313      	orrs	r3, r2
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	6560      	str	r0, [r4, #84]	; 0x54
 8007394:	e7f8      	b.n	8007388 <__sseek+0x18>
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	ffffefff 	.word	0xffffefff

0800739c <__sclose>:
 800739c:	b510      	push	{r4, lr}
 800739e:	230e      	movs	r3, #14
 80073a0:	5ec9      	ldrsh	r1, [r1, r3]
 80073a2:	f000 f80d 	bl	80073c0 <_close_r>
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <memset>:
 80073a8:	0003      	movs	r3, r0
 80073aa:	1882      	adds	r2, r0, r2
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d100      	bne.n	80073b2 <memset+0xa>
 80073b0:	4770      	bx	lr
 80073b2:	7019      	strb	r1, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	e7f9      	b.n	80073ac <memset+0x4>

080073b8 <_localeconv_r>:
 80073b8:	4800      	ldr	r0, [pc, #0]	; (80073bc <_localeconv_r+0x4>)
 80073ba:	4770      	bx	lr
 80073bc:	20000200 	.word	0x20000200

080073c0 <_close_r>:
 80073c0:	2300      	movs	r3, #0
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	4d06      	ldr	r5, [pc, #24]	; (80073e0 <_close_r+0x20>)
 80073c6:	0004      	movs	r4, r0
 80073c8:	0008      	movs	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7fd fe40 	bl	8005050 <_close>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d103      	bne.n	80073dc <_close_r+0x1c>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d000      	beq.n	80073dc <_close_r+0x1c>
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	200008d4 	.word	0x200008d4

080073e4 <_lseek_r>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	0004      	movs	r4, r0
 80073e8:	0008      	movs	r0, r1
 80073ea:	0011      	movs	r1, r2
 80073ec:	001a      	movs	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	4d05      	ldr	r5, [pc, #20]	; (8007408 <_lseek_r+0x24>)
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	f7fd fe4d 	bl	8005092 <_lseek>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d103      	bne.n	8007404 <_lseek_r+0x20>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d000      	beq.n	8007404 <_lseek_r+0x20>
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	bd70      	pop	{r4, r5, r6, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	200008d4 	.word	0x200008d4

0800740c <_read_r>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	0004      	movs	r4, r0
 8007410:	0008      	movs	r0, r1
 8007412:	0011      	movs	r1, r2
 8007414:	001a      	movs	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	4d05      	ldr	r5, [pc, #20]	; (8007430 <_read_r+0x24>)
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fd fddf 	bl	8004fde <_read>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d103      	bne.n	800742c <_read_r+0x20>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d000      	beq.n	800742c <_read_r+0x20>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	200008d4 	.word	0x200008d4

08007434 <_write_r>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	0004      	movs	r4, r0
 8007438:	0008      	movs	r0, r1
 800743a:	0011      	movs	r1, r2
 800743c:	001a      	movs	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	4d05      	ldr	r5, [pc, #20]	; (8007458 <_write_r+0x24>)
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fd fde8 	bl	8005018 <_write>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d103      	bne.n	8007454 <_write_r+0x20>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d000      	beq.n	8007454 <_write_r+0x20>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd70      	pop	{r4, r5, r6, pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	200008d4 	.word	0x200008d4

0800745c <__errno>:
 800745c:	4b01      	ldr	r3, [pc, #4]	; (8007464 <__errno+0x8>)
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	4770      	bx	lr
 8007462:	46c0      	nop			; (mov r8, r8)
 8007464:	2000010c 	.word	0x2000010c

08007468 <__libc_init_array>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	2600      	movs	r6, #0
 800746c:	4c0c      	ldr	r4, [pc, #48]	; (80074a0 <__libc_init_array+0x38>)
 800746e:	4d0d      	ldr	r5, [pc, #52]	; (80074a4 <__libc_init_array+0x3c>)
 8007470:	1b64      	subs	r4, r4, r5
 8007472:	10a4      	asrs	r4, r4, #2
 8007474:	42a6      	cmp	r6, r4
 8007476:	d109      	bne.n	800748c <__libc_init_array+0x24>
 8007478:	2600      	movs	r6, #0
 800747a:	f002 fcfb 	bl	8009e74 <_init>
 800747e:	4c0a      	ldr	r4, [pc, #40]	; (80074a8 <__libc_init_array+0x40>)
 8007480:	4d0a      	ldr	r5, [pc, #40]	; (80074ac <__libc_init_array+0x44>)
 8007482:	1b64      	subs	r4, r4, r5
 8007484:	10a4      	asrs	r4, r4, #2
 8007486:	42a6      	cmp	r6, r4
 8007488:	d105      	bne.n	8007496 <__libc_init_array+0x2e>
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	00b3      	lsls	r3, r6, #2
 800748e:	58eb      	ldr	r3, [r5, r3]
 8007490:	4798      	blx	r3
 8007492:	3601      	adds	r6, #1
 8007494:	e7ee      	b.n	8007474 <__libc_init_array+0xc>
 8007496:	00b3      	lsls	r3, r6, #2
 8007498:	58eb      	ldr	r3, [r5, r3]
 800749a:	4798      	blx	r3
 800749c:	3601      	adds	r6, #1
 800749e:	e7f2      	b.n	8007486 <__libc_init_array+0x1e>
 80074a0:	0800bc58 	.word	0x0800bc58
 80074a4:	0800bc58 	.word	0x0800bc58
 80074a8:	0800bc5c 	.word	0x0800bc5c
 80074ac:	0800bc58 	.word	0x0800bc58

080074b0 <__retarget_lock_init_recursive>:
 80074b0:	4770      	bx	lr

080074b2 <__retarget_lock_acquire_recursive>:
 80074b2:	4770      	bx	lr

080074b4 <__retarget_lock_release_recursive>:
 80074b4:	4770      	bx	lr

080074b6 <memchr>:
 80074b6:	b2c9      	uxtb	r1, r1
 80074b8:	1882      	adds	r2, r0, r2
 80074ba:	4290      	cmp	r0, r2
 80074bc:	d101      	bne.n	80074c2 <memchr+0xc>
 80074be:	2000      	movs	r0, #0
 80074c0:	4770      	bx	lr
 80074c2:	7803      	ldrb	r3, [r0, #0]
 80074c4:	428b      	cmp	r3, r1
 80074c6:	d0fb      	beq.n	80074c0 <memchr+0xa>
 80074c8:	3001      	adds	r0, #1
 80074ca:	e7f6      	b.n	80074ba <memchr+0x4>

080074cc <quorem>:
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	6902      	ldr	r2, [r0, #16]
 80074d0:	690b      	ldr	r3, [r1, #16]
 80074d2:	b089      	sub	sp, #36	; 0x24
 80074d4:	0007      	movs	r7, r0
 80074d6:	9104      	str	r1, [sp, #16]
 80074d8:	2000      	movs	r0, #0
 80074da:	429a      	cmp	r2, r3
 80074dc:	db69      	blt.n	80075b2 <quorem+0xe6>
 80074de:	3b01      	subs	r3, #1
 80074e0:	009c      	lsls	r4, r3, #2
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	000b      	movs	r3, r1
 80074e6:	3314      	adds	r3, #20
 80074e8:	9306      	str	r3, [sp, #24]
 80074ea:	191b      	adds	r3, r3, r4
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	003b      	movs	r3, r7
 80074f0:	3314      	adds	r3, #20
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	191c      	adds	r4, r3, r4
 80074f6:	9b05      	ldr	r3, [sp, #20]
 80074f8:	6826      	ldr	r6, [r4, #0]
 80074fa:	681d      	ldr	r5, [r3, #0]
 80074fc:	0030      	movs	r0, r6
 80074fe:	3501      	adds	r5, #1
 8007500:	0029      	movs	r1, r5
 8007502:	f7f8 fe1d 	bl	8000140 <__udivsi3>
 8007506:	9002      	str	r0, [sp, #8]
 8007508:	42ae      	cmp	r6, r5
 800750a:	d329      	bcc.n	8007560 <quorem+0x94>
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	2600      	movs	r6, #0
 8007510:	469c      	mov	ip, r3
 8007512:	9d03      	ldr	r5, [sp, #12]
 8007514:	9606      	str	r6, [sp, #24]
 8007516:	4662      	mov	r2, ip
 8007518:	ca08      	ldmia	r2!, {r3}
 800751a:	6828      	ldr	r0, [r5, #0]
 800751c:	4694      	mov	ip, r2
 800751e:	9a02      	ldr	r2, [sp, #8]
 8007520:	b299      	uxth	r1, r3
 8007522:	4351      	muls	r1, r2
 8007524:	0c1b      	lsrs	r3, r3, #16
 8007526:	4353      	muls	r3, r2
 8007528:	1989      	adds	r1, r1, r6
 800752a:	0c0a      	lsrs	r2, r1, #16
 800752c:	189b      	adds	r3, r3, r2
 800752e:	9307      	str	r3, [sp, #28]
 8007530:	0c1e      	lsrs	r6, r3, #16
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	b282      	uxth	r2, r0
 8007536:	18d2      	adds	r2, r2, r3
 8007538:	466b      	mov	r3, sp
 800753a:	b289      	uxth	r1, r1
 800753c:	8b9b      	ldrh	r3, [r3, #28]
 800753e:	1a52      	subs	r2, r2, r1
 8007540:	0c01      	lsrs	r1, r0, #16
 8007542:	1ac9      	subs	r1, r1, r3
 8007544:	1413      	asrs	r3, r2, #16
 8007546:	18cb      	adds	r3, r1, r3
 8007548:	1419      	asrs	r1, r3, #16
 800754a:	b292      	uxth	r2, r2
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	4313      	orrs	r3, r2
 8007550:	c508      	stmia	r5!, {r3}
 8007552:	9b05      	ldr	r3, [sp, #20]
 8007554:	9106      	str	r1, [sp, #24]
 8007556:	4563      	cmp	r3, ip
 8007558:	d2dd      	bcs.n	8007516 <quorem+0x4a>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d030      	beq.n	80075c2 <quorem+0xf6>
 8007560:	0038      	movs	r0, r7
 8007562:	9904      	ldr	r1, [sp, #16]
 8007564:	f001 f9de 	bl	8008924 <__mcmp>
 8007568:	2800      	cmp	r0, #0
 800756a:	db21      	blt.n	80075b0 <quorem+0xe4>
 800756c:	0038      	movs	r0, r7
 800756e:	2600      	movs	r6, #0
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	9c04      	ldr	r4, [sp, #16]
 8007574:	3301      	adds	r3, #1
 8007576:	9302      	str	r3, [sp, #8]
 8007578:	3014      	adds	r0, #20
 800757a:	3414      	adds	r4, #20
 800757c:	6803      	ldr	r3, [r0, #0]
 800757e:	cc02      	ldmia	r4!, {r1}
 8007580:	b29d      	uxth	r5, r3
 8007582:	19ad      	adds	r5, r5, r6
 8007584:	b28a      	uxth	r2, r1
 8007586:	1aaa      	subs	r2, r5, r2
 8007588:	0c09      	lsrs	r1, r1, #16
 800758a:	0c1b      	lsrs	r3, r3, #16
 800758c:	1a5b      	subs	r3, r3, r1
 800758e:	1411      	asrs	r1, r2, #16
 8007590:	185b      	adds	r3, r3, r1
 8007592:	141e      	asrs	r6, r3, #16
 8007594:	b292      	uxth	r2, r2
 8007596:	041b      	lsls	r3, r3, #16
 8007598:	4313      	orrs	r3, r2
 800759a:	c008      	stmia	r0!, {r3}
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	42a3      	cmp	r3, r4
 80075a0:	d2ec      	bcs.n	800757c <quorem+0xb0>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	9a03      	ldr	r2, [sp, #12]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	18d3      	adds	r3, r2, r3
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	2a00      	cmp	r2, #0
 80075ae:	d015      	beq.n	80075dc <quorem+0x110>
 80075b0:	9802      	ldr	r0, [sp, #8]
 80075b2:	b009      	add	sp, #36	; 0x24
 80075b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <quorem+0xfe>
 80075bc:	9b01      	ldr	r3, [sp, #4]
 80075be:	3b01      	subs	r3, #1
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	3c04      	subs	r4, #4
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	d3f5      	bcc.n	80075b6 <quorem+0xea>
 80075ca:	9b01      	ldr	r3, [sp, #4]
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	e7c7      	b.n	8007560 <quorem+0x94>
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	d106      	bne.n	80075e4 <quorem+0x118>
 80075d6:	9a01      	ldr	r2, [sp, #4]
 80075d8:	3a01      	subs	r2, #1
 80075da:	9201      	str	r2, [sp, #4]
 80075dc:	9a03      	ldr	r2, [sp, #12]
 80075de:	3b04      	subs	r3, #4
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3f5      	bcc.n	80075d0 <quorem+0x104>
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	613b      	str	r3, [r7, #16]
 80075e8:	e7e2      	b.n	80075b0 <quorem+0xe4>
	...

080075ec <_dtoa_r>:
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	0014      	movs	r4, r2
 80075f0:	001d      	movs	r5, r3
 80075f2:	69c6      	ldr	r6, [r0, #28]
 80075f4:	b09d      	sub	sp, #116	; 0x74
 80075f6:	9408      	str	r4, [sp, #32]
 80075f8:	9509      	str	r5, [sp, #36]	; 0x24
 80075fa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80075fc:	9004      	str	r0, [sp, #16]
 80075fe:	2e00      	cmp	r6, #0
 8007600:	d10f      	bne.n	8007622 <_dtoa_r+0x36>
 8007602:	2010      	movs	r0, #16
 8007604:	f000 fe4a 	bl	800829c <malloc>
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	1e02      	subs	r2, r0, #0
 800760c:	61d8      	str	r0, [r3, #28]
 800760e:	d104      	bne.n	800761a <_dtoa_r+0x2e>
 8007610:	21ef      	movs	r1, #239	; 0xef
 8007612:	4bc6      	ldr	r3, [pc, #792]	; (800792c <_dtoa_r+0x340>)
 8007614:	48c6      	ldr	r0, [pc, #792]	; (8007930 <_dtoa_r+0x344>)
 8007616:	f001 fcdf 	bl	8008fd8 <__assert_func>
 800761a:	6046      	str	r6, [r0, #4]
 800761c:	6086      	str	r6, [r0, #8]
 800761e:	6006      	str	r6, [r0, #0]
 8007620:	60c6      	str	r6, [r0, #12]
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	6819      	ldr	r1, [r3, #0]
 8007628:	2900      	cmp	r1, #0
 800762a:	d00b      	beq.n	8007644 <_dtoa_r+0x58>
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	2301      	movs	r3, #1
 8007630:	4093      	lsls	r3, r2
 8007632:	604a      	str	r2, [r1, #4]
 8007634:	608b      	str	r3, [r1, #8]
 8007636:	9804      	ldr	r0, [sp, #16]
 8007638:	f000 ff32 	bl	80084a0 <_Bfree>
 800763c:	2200      	movs	r2, #0
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2d00      	cmp	r5, #0
 8007646:	da1e      	bge.n	8007686 <_dtoa_r+0x9a>
 8007648:	2301      	movs	r3, #1
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	006b      	lsls	r3, r5, #1
 800764e:	085b      	lsrs	r3, r3, #1
 8007650:	9309      	str	r3, [sp, #36]	; 0x24
 8007652:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007654:	4bb7      	ldr	r3, [pc, #732]	; (8007934 <_dtoa_r+0x348>)
 8007656:	4ab7      	ldr	r2, [pc, #732]	; (8007934 <_dtoa_r+0x348>)
 8007658:	403b      	ands	r3, r7
 800765a:	4293      	cmp	r3, r2
 800765c:	d116      	bne.n	800768c <_dtoa_r+0xa0>
 800765e:	4bb6      	ldr	r3, [pc, #728]	; (8007938 <_dtoa_r+0x34c>)
 8007660:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	033b      	lsls	r3, r7, #12
 8007666:	0b1b      	lsrs	r3, r3, #12
 8007668:	4323      	orrs	r3, r4
 800766a:	d101      	bne.n	8007670 <_dtoa_r+0x84>
 800766c:	f000 fdb5 	bl	80081da <_dtoa_r+0xbee>
 8007670:	4bb2      	ldr	r3, [pc, #712]	; (800793c <_dtoa_r+0x350>)
 8007672:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007674:	9306      	str	r3, [sp, #24]
 8007676:	2a00      	cmp	r2, #0
 8007678:	d002      	beq.n	8007680 <_dtoa_r+0x94>
 800767a:	4bb1      	ldr	r3, [pc, #708]	; (8007940 <_dtoa_r+0x354>)
 800767c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	9806      	ldr	r0, [sp, #24]
 8007682:	b01d      	add	sp, #116	; 0x74
 8007684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007686:	2300      	movs	r3, #0
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	e7e2      	b.n	8007652 <_dtoa_r+0x66>
 800768c:	9a08      	ldr	r2, [sp, #32]
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	9210      	str	r2, [sp, #64]	; 0x40
 8007692:	9311      	str	r3, [sp, #68]	; 0x44
 8007694:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007696:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	f7f8 fed6 	bl	800044c <__aeabi_dcmpeq>
 80076a0:	1e06      	subs	r6, r0, #0
 80076a2:	d009      	beq.n	80076b8 <_dtoa_r+0xcc>
 80076a4:	2301      	movs	r3, #1
 80076a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	4ba6      	ldr	r3, [pc, #664]	; (8007944 <_dtoa_r+0x358>)
 80076ac:	9306      	str	r3, [sp, #24]
 80076ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0e5      	beq.n	8007680 <_dtoa_r+0x94>
 80076b4:	4ba4      	ldr	r3, [pc, #656]	; (8007948 <_dtoa_r+0x35c>)
 80076b6:	e7e1      	b.n	800767c <_dtoa_r+0x90>
 80076b8:	ab1a      	add	r3, sp, #104	; 0x68
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	9804      	ldr	r0, [sp, #16]
 80076c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076c6:	f001 f9e1 	bl	8008a8c <__d2b>
 80076ca:	007a      	lsls	r2, r7, #1
 80076cc:	9005      	str	r0, [sp, #20]
 80076ce:	0d52      	lsrs	r2, r2, #21
 80076d0:	d100      	bne.n	80076d4 <_dtoa_r+0xe8>
 80076d2:	e07b      	b.n	80077cc <_dtoa_r+0x1e0>
 80076d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076d6:	9617      	str	r6, [sp, #92]	; 0x5c
 80076d8:	0319      	lsls	r1, r3, #12
 80076da:	4b9c      	ldr	r3, [pc, #624]	; (800794c <_dtoa_r+0x360>)
 80076dc:	0b09      	lsrs	r1, r1, #12
 80076de:	430b      	orrs	r3, r1
 80076e0:	499b      	ldr	r1, [pc, #620]	; (8007950 <_dtoa_r+0x364>)
 80076e2:	1857      	adds	r7, r2, r1
 80076e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80076e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076e8:	0019      	movs	r1, r3
 80076ea:	2200      	movs	r2, #0
 80076ec:	4b99      	ldr	r3, [pc, #612]	; (8007954 <_dtoa_r+0x368>)
 80076ee:	f7fb f859 	bl	80027a4 <__aeabi_dsub>
 80076f2:	4a99      	ldr	r2, [pc, #612]	; (8007958 <_dtoa_r+0x36c>)
 80076f4:	4b99      	ldr	r3, [pc, #612]	; (800795c <_dtoa_r+0x370>)
 80076f6:	f7fa fd93 	bl	8002220 <__aeabi_dmul>
 80076fa:	4a99      	ldr	r2, [pc, #612]	; (8007960 <_dtoa_r+0x374>)
 80076fc:	4b99      	ldr	r3, [pc, #612]	; (8007964 <_dtoa_r+0x378>)
 80076fe:	f7f9 fe35 	bl	800136c <__aeabi_dadd>
 8007702:	0004      	movs	r4, r0
 8007704:	0038      	movs	r0, r7
 8007706:	000d      	movs	r5, r1
 8007708:	f7fb fc22 	bl	8002f50 <__aeabi_i2d>
 800770c:	4a96      	ldr	r2, [pc, #600]	; (8007968 <_dtoa_r+0x37c>)
 800770e:	4b97      	ldr	r3, [pc, #604]	; (800796c <_dtoa_r+0x380>)
 8007710:	f7fa fd86 	bl	8002220 <__aeabi_dmul>
 8007714:	0002      	movs	r2, r0
 8007716:	000b      	movs	r3, r1
 8007718:	0020      	movs	r0, r4
 800771a:	0029      	movs	r1, r5
 800771c:	f7f9 fe26 	bl	800136c <__aeabi_dadd>
 8007720:	0004      	movs	r4, r0
 8007722:	000d      	movs	r5, r1
 8007724:	f7fb fbde 	bl	8002ee4 <__aeabi_d2iz>
 8007728:	2200      	movs	r2, #0
 800772a:	9003      	str	r0, [sp, #12]
 800772c:	2300      	movs	r3, #0
 800772e:	0020      	movs	r0, r4
 8007730:	0029      	movs	r1, r5
 8007732:	f7f8 fe91 	bl	8000458 <__aeabi_dcmplt>
 8007736:	2800      	cmp	r0, #0
 8007738:	d00b      	beq.n	8007752 <_dtoa_r+0x166>
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	f7fb fc08 	bl	8002f50 <__aeabi_i2d>
 8007740:	002b      	movs	r3, r5
 8007742:	0022      	movs	r2, r4
 8007744:	f7f8 fe82 	bl	800044c <__aeabi_dcmpeq>
 8007748:	4243      	negs	r3, r0
 800774a:	4158      	adcs	r0, r3
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	1a1b      	subs	r3, r3, r0
 8007750:	9303      	str	r3, [sp, #12]
 8007752:	2301      	movs	r3, #1
 8007754:	9316      	str	r3, [sp, #88]	; 0x58
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	2b16      	cmp	r3, #22
 800775a:	d810      	bhi.n	800777e <_dtoa_r+0x192>
 800775c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800775e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007760:	9a03      	ldr	r2, [sp, #12]
 8007762:	4b83      	ldr	r3, [pc, #524]	; (8007970 <_dtoa_r+0x384>)
 8007764:	00d2      	lsls	r2, r2, #3
 8007766:	189b      	adds	r3, r3, r2
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f7f8 fe74 	bl	8000458 <__aeabi_dcmplt>
 8007770:	2800      	cmp	r0, #0
 8007772:	d047      	beq.n	8007804 <_dtoa_r+0x218>
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	3b01      	subs	r3, #1
 8007778:	9303      	str	r3, [sp, #12]
 800777a:	2300      	movs	r3, #0
 800777c:	9316      	str	r3, [sp, #88]	; 0x58
 800777e:	2200      	movs	r2, #0
 8007780:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007782:	920a      	str	r2, [sp, #40]	; 0x28
 8007784:	1bdb      	subs	r3, r3, r7
 8007786:	1e5a      	subs	r2, r3, #1
 8007788:	d53e      	bpl.n	8007808 <_dtoa_r+0x21c>
 800778a:	2201      	movs	r2, #1
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	930a      	str	r3, [sp, #40]	; 0x28
 8007790:	2300      	movs	r3, #0
 8007792:	930c      	str	r3, [sp, #48]	; 0x30
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	db38      	blt.n	800780c <_dtoa_r+0x220>
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800779e:	4694      	mov	ip, r2
 80077a0:	4463      	add	r3, ip
 80077a2:	930c      	str	r3, [sp, #48]	; 0x30
 80077a4:	2300      	movs	r3, #0
 80077a6:	9213      	str	r2, [sp, #76]	; 0x4c
 80077a8:	930d      	str	r3, [sp, #52]	; 0x34
 80077aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077ac:	2401      	movs	r4, #1
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	d867      	bhi.n	8007882 <_dtoa_r+0x296>
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	dd02      	ble.n	80077bc <_dtoa_r+0x1d0>
 80077b6:	2400      	movs	r4, #0
 80077b8:	3b04      	subs	r3, #4
 80077ba:	9322      	str	r3, [sp, #136]	; 0x88
 80077bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077be:	1e98      	subs	r0, r3, #2
 80077c0:	2803      	cmp	r0, #3
 80077c2:	d867      	bhi.n	8007894 <_dtoa_r+0x2a8>
 80077c4:	f7f8 fca8 	bl	8000118 <__gnu_thumb1_case_uqi>
 80077c8:	5b383a2b 	.word	0x5b383a2b
 80077cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077ce:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80077d0:	18f6      	adds	r6, r6, r3
 80077d2:	4b68      	ldr	r3, [pc, #416]	; (8007974 <_dtoa_r+0x388>)
 80077d4:	18f2      	adds	r2, r6, r3
 80077d6:	2a20      	cmp	r2, #32
 80077d8:	dd0f      	ble.n	80077fa <_dtoa_r+0x20e>
 80077da:	2340      	movs	r3, #64	; 0x40
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	409f      	lsls	r7, r3
 80077e0:	4b65      	ldr	r3, [pc, #404]	; (8007978 <_dtoa_r+0x38c>)
 80077e2:	0038      	movs	r0, r7
 80077e4:	18f3      	adds	r3, r6, r3
 80077e6:	40dc      	lsrs	r4, r3
 80077e8:	4320      	orrs	r0, r4
 80077ea:	f7fb fbe1 	bl	8002fb0 <__aeabi_ui2d>
 80077ee:	2201      	movs	r2, #1
 80077f0:	4b62      	ldr	r3, [pc, #392]	; (800797c <_dtoa_r+0x390>)
 80077f2:	1e77      	subs	r7, r6, #1
 80077f4:	18cb      	adds	r3, r1, r3
 80077f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80077f8:	e776      	b.n	80076e8 <_dtoa_r+0xfc>
 80077fa:	2320      	movs	r3, #32
 80077fc:	0020      	movs	r0, r4
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	4098      	lsls	r0, r3
 8007802:	e7f2      	b.n	80077ea <_dtoa_r+0x1fe>
 8007804:	9016      	str	r0, [sp, #88]	; 0x58
 8007806:	e7ba      	b.n	800777e <_dtoa_r+0x192>
 8007808:	920c      	str	r2, [sp, #48]	; 0x30
 800780a:	e7c3      	b.n	8007794 <_dtoa_r+0x1a8>
 800780c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800780e:	9a03      	ldr	r2, [sp, #12]
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	930a      	str	r3, [sp, #40]	; 0x28
 8007814:	4253      	negs	r3, r2
 8007816:	930d      	str	r3, [sp, #52]	; 0x34
 8007818:	2300      	movs	r3, #0
 800781a:	9313      	str	r3, [sp, #76]	; 0x4c
 800781c:	e7c5      	b.n	80077aa <_dtoa_r+0x1be>
 800781e:	2300      	movs	r3, #0
 8007820:	930f      	str	r3, [sp, #60]	; 0x3c
 8007822:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007824:	930b      	str	r3, [sp, #44]	; 0x2c
 8007826:	9307      	str	r3, [sp, #28]
 8007828:	2b00      	cmp	r3, #0
 800782a:	dc13      	bgt.n	8007854 <_dtoa_r+0x268>
 800782c:	2301      	movs	r3, #1
 800782e:	001a      	movs	r2, r3
 8007830:	930b      	str	r3, [sp, #44]	; 0x2c
 8007832:	9307      	str	r3, [sp, #28]
 8007834:	9223      	str	r2, [sp, #140]	; 0x8c
 8007836:	e00d      	b.n	8007854 <_dtoa_r+0x268>
 8007838:	2301      	movs	r3, #1
 800783a:	e7f1      	b.n	8007820 <_dtoa_r+0x234>
 800783c:	2300      	movs	r3, #0
 800783e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007840:	930f      	str	r3, [sp, #60]	; 0x3c
 8007842:	4694      	mov	ip, r2
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	4463      	add	r3, ip
 8007848:	930b      	str	r3, [sp, #44]	; 0x2c
 800784a:	3301      	adds	r3, #1
 800784c:	9307      	str	r3, [sp, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	dc00      	bgt.n	8007854 <_dtoa_r+0x268>
 8007852:	2301      	movs	r3, #1
 8007854:	9a04      	ldr	r2, [sp, #16]
 8007856:	2100      	movs	r1, #0
 8007858:	69d0      	ldr	r0, [r2, #28]
 800785a:	2204      	movs	r2, #4
 800785c:	0015      	movs	r5, r2
 800785e:	3514      	adds	r5, #20
 8007860:	429d      	cmp	r5, r3
 8007862:	d91b      	bls.n	800789c <_dtoa_r+0x2b0>
 8007864:	6041      	str	r1, [r0, #4]
 8007866:	9804      	ldr	r0, [sp, #16]
 8007868:	f000 fdd6 	bl	8008418 <_Balloc>
 800786c:	9006      	str	r0, [sp, #24]
 800786e:	2800      	cmp	r0, #0
 8007870:	d117      	bne.n	80078a2 <_dtoa_r+0x2b6>
 8007872:	21b0      	movs	r1, #176	; 0xb0
 8007874:	4b42      	ldr	r3, [pc, #264]	; (8007980 <_dtoa_r+0x394>)
 8007876:	482e      	ldr	r0, [pc, #184]	; (8007930 <_dtoa_r+0x344>)
 8007878:	9a06      	ldr	r2, [sp, #24]
 800787a:	31ff      	adds	r1, #255	; 0xff
 800787c:	e6cb      	b.n	8007616 <_dtoa_r+0x2a>
 800787e:	2301      	movs	r3, #1
 8007880:	e7dd      	b.n	800783e <_dtoa_r+0x252>
 8007882:	2300      	movs	r3, #0
 8007884:	940f      	str	r4, [sp, #60]	; 0x3c
 8007886:	9322      	str	r3, [sp, #136]	; 0x88
 8007888:	3b01      	subs	r3, #1
 800788a:	930b      	str	r3, [sp, #44]	; 0x2c
 800788c:	9307      	str	r3, [sp, #28]
 800788e:	2200      	movs	r2, #0
 8007890:	3313      	adds	r3, #19
 8007892:	e7cf      	b.n	8007834 <_dtoa_r+0x248>
 8007894:	2301      	movs	r3, #1
 8007896:	930f      	str	r3, [sp, #60]	; 0x3c
 8007898:	3b02      	subs	r3, #2
 800789a:	e7f6      	b.n	800788a <_dtoa_r+0x29e>
 800789c:	3101      	adds	r1, #1
 800789e:	0052      	lsls	r2, r2, #1
 80078a0:	e7dc      	b.n	800785c <_dtoa_r+0x270>
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	9a06      	ldr	r2, [sp, #24]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	9b07      	ldr	r3, [sp, #28]
 80078ac:	2b0e      	cmp	r3, #14
 80078ae:	d900      	bls.n	80078b2 <_dtoa_r+0x2c6>
 80078b0:	e0e5      	b.n	8007a7e <_dtoa_r+0x492>
 80078b2:	2c00      	cmp	r4, #0
 80078b4:	d100      	bne.n	80078b8 <_dtoa_r+0x2cc>
 80078b6:	e0e2      	b.n	8007a7e <_dtoa_r+0x492>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dd64      	ble.n	8007988 <_dtoa_r+0x39c>
 80078be:	210f      	movs	r1, #15
 80078c0:	9a03      	ldr	r2, [sp, #12]
 80078c2:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <_dtoa_r+0x384>)
 80078c4:	400a      	ands	r2, r1
 80078c6:	00d2      	lsls	r2, r2, #3
 80078c8:	189b      	adds	r3, r3, r2
 80078ca:	681e      	ldr	r6, [r3, #0]
 80078cc:	685f      	ldr	r7, [r3, #4]
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	2402      	movs	r4, #2
 80078d2:	111d      	asrs	r5, r3, #4
 80078d4:	05db      	lsls	r3, r3, #23
 80078d6:	d50a      	bpl.n	80078ee <_dtoa_r+0x302>
 80078d8:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <_dtoa_r+0x398>)
 80078da:	400d      	ands	r5, r1
 80078dc:	6a1a      	ldr	r2, [r3, #32]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078e4:	f7fa f8a2 	bl	8001a2c <__aeabi_ddiv>
 80078e8:	9008      	str	r0, [sp, #32]
 80078ea:	9109      	str	r1, [sp, #36]	; 0x24
 80078ec:	3401      	adds	r4, #1
 80078ee:	4b25      	ldr	r3, [pc, #148]	; (8007984 <_dtoa_r+0x398>)
 80078f0:	930e      	str	r3, [sp, #56]	; 0x38
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	d108      	bne.n	8007908 <_dtoa_r+0x31c>
 80078f6:	9808      	ldr	r0, [sp, #32]
 80078f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078fa:	0032      	movs	r2, r6
 80078fc:	003b      	movs	r3, r7
 80078fe:	f7fa f895 	bl	8001a2c <__aeabi_ddiv>
 8007902:	9008      	str	r0, [sp, #32]
 8007904:	9109      	str	r1, [sp, #36]	; 0x24
 8007906:	e05a      	b.n	80079be <_dtoa_r+0x3d2>
 8007908:	2301      	movs	r3, #1
 800790a:	421d      	tst	r5, r3
 800790c:	d009      	beq.n	8007922 <_dtoa_r+0x336>
 800790e:	18e4      	adds	r4, r4, r3
 8007910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007912:	0030      	movs	r0, r6
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	0039      	movs	r1, r7
 800791a:	f7fa fc81 	bl	8002220 <__aeabi_dmul>
 800791e:	0006      	movs	r6, r0
 8007920:	000f      	movs	r7, r1
 8007922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007924:	106d      	asrs	r5, r5, #1
 8007926:	3308      	adds	r3, #8
 8007928:	e7e2      	b.n	80078f0 <_dtoa_r+0x304>
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	0800b8b1 	.word	0x0800b8b1
 8007930:	0800b8c8 	.word	0x0800b8c8
 8007934:	7ff00000 	.word	0x7ff00000
 8007938:	0000270f 	.word	0x0000270f
 800793c:	0800b8ad 	.word	0x0800b8ad
 8007940:	0800b8b0 	.word	0x0800b8b0
 8007944:	0800b880 	.word	0x0800b880
 8007948:	0800b881 	.word	0x0800b881
 800794c:	3ff00000 	.word	0x3ff00000
 8007950:	fffffc01 	.word	0xfffffc01
 8007954:	3ff80000 	.word	0x3ff80000
 8007958:	636f4361 	.word	0x636f4361
 800795c:	3fd287a7 	.word	0x3fd287a7
 8007960:	8b60c8b3 	.word	0x8b60c8b3
 8007964:	3fc68a28 	.word	0x3fc68a28
 8007968:	509f79fb 	.word	0x509f79fb
 800796c:	3fd34413 	.word	0x3fd34413
 8007970:	0800b9b8 	.word	0x0800b9b8
 8007974:	00000432 	.word	0x00000432
 8007978:	00000412 	.word	0x00000412
 800797c:	fe100000 	.word	0xfe100000
 8007980:	0800b920 	.word	0x0800b920
 8007984:	0800b990 	.word	0x0800b990
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	2402      	movs	r4, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d016      	beq.n	80079be <_dtoa_r+0x3d2>
 8007990:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007992:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007994:	220f      	movs	r2, #15
 8007996:	425d      	negs	r5, r3
 8007998:	402a      	ands	r2, r5
 800799a:	4bdd      	ldr	r3, [pc, #884]	; (8007d10 <_dtoa_r+0x724>)
 800799c:	00d2      	lsls	r2, r2, #3
 800799e:	189b      	adds	r3, r3, r2
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f7fa fc3c 	bl	8002220 <__aeabi_dmul>
 80079a8:	2701      	movs	r7, #1
 80079aa:	2300      	movs	r3, #0
 80079ac:	9008      	str	r0, [sp, #32]
 80079ae:	9109      	str	r1, [sp, #36]	; 0x24
 80079b0:	4ed8      	ldr	r6, [pc, #864]	; (8007d14 <_dtoa_r+0x728>)
 80079b2:	112d      	asrs	r5, r5, #4
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	d000      	beq.n	80079ba <_dtoa_r+0x3ce>
 80079b8:	e091      	b.n	8007ade <_dtoa_r+0x4f2>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1a1      	bne.n	8007902 <_dtoa_r+0x316>
 80079be:	9e08      	ldr	r6, [sp, #32]
 80079c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d100      	bne.n	80079ca <_dtoa_r+0x3de>
 80079c8:	e094      	b.n	8007af4 <_dtoa_r+0x508>
 80079ca:	2200      	movs	r2, #0
 80079cc:	0030      	movs	r0, r6
 80079ce:	0039      	movs	r1, r7
 80079d0:	4bd1      	ldr	r3, [pc, #836]	; (8007d18 <_dtoa_r+0x72c>)
 80079d2:	f7f8 fd41 	bl	8000458 <__aeabi_dcmplt>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d100      	bne.n	80079dc <_dtoa_r+0x3f0>
 80079da:	e08b      	b.n	8007af4 <_dtoa_r+0x508>
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d100      	bne.n	80079e4 <_dtoa_r+0x3f8>
 80079e2:	e087      	b.n	8007af4 <_dtoa_r+0x508>
 80079e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dd45      	ble.n	8007a76 <_dtoa_r+0x48a>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	3b01      	subs	r3, #1
 80079f0:	930e      	str	r3, [sp, #56]	; 0x38
 80079f2:	0030      	movs	r0, r6
 80079f4:	4bc9      	ldr	r3, [pc, #804]	; (8007d1c <_dtoa_r+0x730>)
 80079f6:	0039      	movs	r1, r7
 80079f8:	f7fa fc12 	bl	8002220 <__aeabi_dmul>
 80079fc:	9008      	str	r0, [sp, #32]
 80079fe:	9109      	str	r1, [sp, #36]	; 0x24
 8007a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a02:	3401      	adds	r4, #1
 8007a04:	0020      	movs	r0, r4
 8007a06:	9e08      	ldr	r6, [sp, #32]
 8007a08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a0a:	9312      	str	r3, [sp, #72]	; 0x48
 8007a0c:	f7fb faa0 	bl	8002f50 <__aeabi_i2d>
 8007a10:	0032      	movs	r2, r6
 8007a12:	003b      	movs	r3, r7
 8007a14:	f7fa fc04 	bl	8002220 <__aeabi_dmul>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4bc1      	ldr	r3, [pc, #772]	; (8007d20 <_dtoa_r+0x734>)
 8007a1c:	f7f9 fca6 	bl	800136c <__aeabi_dadd>
 8007a20:	4ac0      	ldr	r2, [pc, #768]	; (8007d24 <_dtoa_r+0x738>)
 8007a22:	9014      	str	r0, [sp, #80]	; 0x50
 8007a24:	9115      	str	r1, [sp, #84]	; 0x54
 8007a26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007a2a:	4694      	mov	ip, r2
 8007a2c:	9308      	str	r3, [sp, #32]
 8007a2e:	9409      	str	r4, [sp, #36]	; 0x24
 8007a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a32:	4463      	add	r3, ip
 8007a34:	9318      	str	r3, [sp, #96]	; 0x60
 8007a36:	9309      	str	r3, [sp, #36]	; 0x24
 8007a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d15e      	bne.n	8007afc <_dtoa_r+0x510>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4bb9      	ldr	r3, [pc, #740]	; (8007d28 <_dtoa_r+0x73c>)
 8007a42:	0030      	movs	r0, r6
 8007a44:	0039      	movs	r1, r7
 8007a46:	f7fa fead 	bl	80027a4 <__aeabi_dsub>
 8007a4a:	9a08      	ldr	r2, [sp, #32]
 8007a4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007a4e:	0004      	movs	r4, r0
 8007a50:	000d      	movs	r5, r1
 8007a52:	f7f8 fd15 	bl	8000480 <__aeabi_dcmpgt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d000      	beq.n	8007a5c <_dtoa_r+0x470>
 8007a5a:	e2b3      	b.n	8007fc4 <_dtoa_r+0x9d8>
 8007a5c:	48b3      	ldr	r0, [pc, #716]	; (8007d2c <_dtoa_r+0x740>)
 8007a5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a60:	4684      	mov	ip, r0
 8007a62:	4461      	add	r1, ip
 8007a64:	000b      	movs	r3, r1
 8007a66:	0020      	movs	r0, r4
 8007a68:	0029      	movs	r1, r5
 8007a6a:	9a08      	ldr	r2, [sp, #32]
 8007a6c:	f7f8 fcf4 	bl	8000458 <__aeabi_dcmplt>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d000      	beq.n	8007a76 <_dtoa_r+0x48a>
 8007a74:	e2a3      	b.n	8007fbe <_dtoa_r+0x9d2>
 8007a76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a78:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	9409      	str	r4, [sp, #36]	; 0x24
 8007a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	da00      	bge.n	8007a86 <_dtoa_r+0x49a>
 8007a84:	e179      	b.n	8007d7a <_dtoa_r+0x78e>
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	2a0e      	cmp	r2, #14
 8007a8a:	dd00      	ble.n	8007a8e <_dtoa_r+0x4a2>
 8007a8c:	e175      	b.n	8007d7a <_dtoa_r+0x78e>
 8007a8e:	4ba0      	ldr	r3, [pc, #640]	; (8007d10 <_dtoa_r+0x724>)
 8007a90:	00d2      	lsls	r2, r2, #3
 8007a92:	189b      	adds	r3, r3, r2
 8007a94:	681e      	ldr	r6, [r3, #0]
 8007a96:	685f      	ldr	r7, [r3, #4]
 8007a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	db00      	blt.n	8007aa0 <_dtoa_r+0x4b4>
 8007a9e:	e0e5      	b.n	8007c6c <_dtoa_r+0x680>
 8007aa0:	9b07      	ldr	r3, [sp, #28]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dd00      	ble.n	8007aa8 <_dtoa_r+0x4bc>
 8007aa6:	e0e1      	b.n	8007c6c <_dtoa_r+0x680>
 8007aa8:	d000      	beq.n	8007aac <_dtoa_r+0x4c0>
 8007aaa:	e288      	b.n	8007fbe <_dtoa_r+0x9d2>
 8007aac:	2200      	movs	r2, #0
 8007aae:	0030      	movs	r0, r6
 8007ab0:	0039      	movs	r1, r7
 8007ab2:	4b9d      	ldr	r3, [pc, #628]	; (8007d28 <_dtoa_r+0x73c>)
 8007ab4:	f7fa fbb4 	bl	8002220 <__aeabi_dmul>
 8007ab8:	9a08      	ldr	r2, [sp, #32]
 8007aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abc:	f7f8 fcea 	bl	8000494 <__aeabi_dcmpge>
 8007ac0:	9e07      	ldr	r6, [sp, #28]
 8007ac2:	0037      	movs	r7, r6
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d000      	beq.n	8007aca <_dtoa_r+0x4de>
 8007ac8:	e25f      	b.n	8007f8a <_dtoa_r+0x99e>
 8007aca:	9b06      	ldr	r3, [sp, #24]
 8007acc:	9a06      	ldr	r2, [sp, #24]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	9308      	str	r3, [sp, #32]
 8007ad2:	2331      	movs	r3, #49	; 0x31
 8007ad4:	7013      	strb	r3, [r2, #0]
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	9303      	str	r3, [sp, #12]
 8007adc:	e25a      	b.n	8007f94 <_dtoa_r+0x9a8>
 8007ade:	423d      	tst	r5, r7
 8007ae0:	d005      	beq.n	8007aee <_dtoa_r+0x502>
 8007ae2:	6832      	ldr	r2, [r6, #0]
 8007ae4:	6873      	ldr	r3, [r6, #4]
 8007ae6:	f7fa fb9b 	bl	8002220 <__aeabi_dmul>
 8007aea:	003b      	movs	r3, r7
 8007aec:	3401      	adds	r4, #1
 8007aee:	106d      	asrs	r5, r5, #1
 8007af0:	3608      	adds	r6, #8
 8007af2:	e75f      	b.n	80079b4 <_dtoa_r+0x3c8>
 8007af4:	9b03      	ldr	r3, [sp, #12]
 8007af6:	930e      	str	r3, [sp, #56]	; 0x38
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	e783      	b.n	8007a04 <_dtoa_r+0x418>
 8007afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007afe:	4b84      	ldr	r3, [pc, #528]	; (8007d10 <_dtoa_r+0x724>)
 8007b00:	3a01      	subs	r2, #1
 8007b02:	00d2      	lsls	r2, r2, #3
 8007b04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	9c08      	ldr	r4, [sp, #32]
 8007b0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2900      	cmp	r1, #0
 8007b12:	d051      	beq.n	8007bb8 <_dtoa_r+0x5cc>
 8007b14:	2000      	movs	r0, #0
 8007b16:	4986      	ldr	r1, [pc, #536]	; (8007d30 <_dtoa_r+0x744>)
 8007b18:	f7f9 ff88 	bl	8001a2c <__aeabi_ddiv>
 8007b1c:	0022      	movs	r2, r4
 8007b1e:	002b      	movs	r3, r5
 8007b20:	f7fa fe40 	bl	80027a4 <__aeabi_dsub>
 8007b24:	9a06      	ldr	r2, [sp, #24]
 8007b26:	0004      	movs	r4, r0
 8007b28:	4694      	mov	ip, r2
 8007b2a:	000d      	movs	r5, r1
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	9314      	str	r3, [sp, #80]	; 0x50
 8007b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b32:	4463      	add	r3, ip
 8007b34:	9318      	str	r3, [sp, #96]	; 0x60
 8007b36:	0039      	movs	r1, r7
 8007b38:	0030      	movs	r0, r6
 8007b3a:	f7fb f9d3 	bl	8002ee4 <__aeabi_d2iz>
 8007b3e:	9012      	str	r0, [sp, #72]	; 0x48
 8007b40:	f7fb fa06 	bl	8002f50 <__aeabi_i2d>
 8007b44:	0002      	movs	r2, r0
 8007b46:	000b      	movs	r3, r1
 8007b48:	0030      	movs	r0, r6
 8007b4a:	0039      	movs	r1, r7
 8007b4c:	f7fa fe2a 	bl	80027a4 <__aeabi_dsub>
 8007b50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b54:	3301      	adds	r3, #1
 8007b56:	9308      	str	r3, [sp, #32]
 8007b58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b5a:	0006      	movs	r6, r0
 8007b5c:	3330      	adds	r3, #48	; 0x30
 8007b5e:	7013      	strb	r3, [r2, #0]
 8007b60:	0022      	movs	r2, r4
 8007b62:	002b      	movs	r3, r5
 8007b64:	000f      	movs	r7, r1
 8007b66:	f7f8 fc77 	bl	8000458 <__aeabi_dcmplt>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d174      	bne.n	8007c58 <_dtoa_r+0x66c>
 8007b6e:	0032      	movs	r2, r6
 8007b70:	003b      	movs	r3, r7
 8007b72:	2000      	movs	r0, #0
 8007b74:	4968      	ldr	r1, [pc, #416]	; (8007d18 <_dtoa_r+0x72c>)
 8007b76:	f7fa fe15 	bl	80027a4 <__aeabi_dsub>
 8007b7a:	0022      	movs	r2, r4
 8007b7c:	002b      	movs	r3, r5
 8007b7e:	f7f8 fc6b 	bl	8000458 <__aeabi_dcmplt>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d000      	beq.n	8007b88 <_dtoa_r+0x59c>
 8007b86:	e0d7      	b.n	8007d38 <_dtoa_r+0x74c>
 8007b88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007b8a:	9a08      	ldr	r2, [sp, #32]
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <_dtoa_r+0x5a6>
 8007b90:	e771      	b.n	8007a76 <_dtoa_r+0x48a>
 8007b92:	2200      	movs	r2, #0
 8007b94:	0020      	movs	r0, r4
 8007b96:	0029      	movs	r1, r5
 8007b98:	4b60      	ldr	r3, [pc, #384]	; (8007d1c <_dtoa_r+0x730>)
 8007b9a:	f7fa fb41 	bl	8002220 <__aeabi_dmul>
 8007b9e:	4b5f      	ldr	r3, [pc, #380]	; (8007d1c <_dtoa_r+0x730>)
 8007ba0:	0004      	movs	r4, r0
 8007ba2:	000d      	movs	r5, r1
 8007ba4:	0030      	movs	r0, r6
 8007ba6:	0039      	movs	r1, r7
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f7fa fb39 	bl	8002220 <__aeabi_dmul>
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	0006      	movs	r6, r0
 8007bb2:	000f      	movs	r7, r1
 8007bb4:	9314      	str	r3, [sp, #80]	; 0x50
 8007bb6:	e7be      	b.n	8007b36 <_dtoa_r+0x54a>
 8007bb8:	0020      	movs	r0, r4
 8007bba:	0029      	movs	r1, r5
 8007bbc:	f7fa fb30 	bl	8002220 <__aeabi_dmul>
 8007bc0:	9a06      	ldr	r2, [sp, #24]
 8007bc2:	9b06      	ldr	r3, [sp, #24]
 8007bc4:	4694      	mov	ip, r2
 8007bc6:	9308      	str	r3, [sp, #32]
 8007bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bca:	9014      	str	r0, [sp, #80]	; 0x50
 8007bcc:	9115      	str	r1, [sp, #84]	; 0x54
 8007bce:	4463      	add	r3, ip
 8007bd0:	9319      	str	r3, [sp, #100]	; 0x64
 8007bd2:	0030      	movs	r0, r6
 8007bd4:	0039      	movs	r1, r7
 8007bd6:	f7fb f985 	bl	8002ee4 <__aeabi_d2iz>
 8007bda:	9018      	str	r0, [sp, #96]	; 0x60
 8007bdc:	f7fb f9b8 	bl	8002f50 <__aeabi_i2d>
 8007be0:	0002      	movs	r2, r0
 8007be2:	000b      	movs	r3, r1
 8007be4:	0030      	movs	r0, r6
 8007be6:	0039      	movs	r1, r7
 8007be8:	f7fa fddc 	bl	80027a4 <__aeabi_dsub>
 8007bec:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007bee:	9b08      	ldr	r3, [sp, #32]
 8007bf0:	3630      	adds	r6, #48	; 0x30
 8007bf2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bf4:	701e      	strb	r6, [r3, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	0004      	movs	r4, r0
 8007bfa:	000d      	movs	r5, r1
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d12d      	bne.n	8007c5e <_dtoa_r+0x672>
 8007c02:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007c04:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007c06:	9a06      	ldr	r2, [sp, #24]
 8007c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c0a:	4694      	mov	ip, r2
 8007c0c:	4463      	add	r3, ip
 8007c0e:	2200      	movs	r2, #0
 8007c10:	9308      	str	r3, [sp, #32]
 8007c12:	4b47      	ldr	r3, [pc, #284]	; (8007d30 <_dtoa_r+0x744>)
 8007c14:	f7f9 fbaa 	bl	800136c <__aeabi_dadd>
 8007c18:	0002      	movs	r2, r0
 8007c1a:	000b      	movs	r3, r1
 8007c1c:	0020      	movs	r0, r4
 8007c1e:	0029      	movs	r1, r5
 8007c20:	f7f8 fc2e 	bl	8000480 <__aeabi_dcmpgt>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d000      	beq.n	8007c2a <_dtoa_r+0x63e>
 8007c28:	e086      	b.n	8007d38 <_dtoa_r+0x74c>
 8007c2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c2e:	2000      	movs	r0, #0
 8007c30:	493f      	ldr	r1, [pc, #252]	; (8007d30 <_dtoa_r+0x744>)
 8007c32:	f7fa fdb7 	bl	80027a4 <__aeabi_dsub>
 8007c36:	0002      	movs	r2, r0
 8007c38:	000b      	movs	r3, r1
 8007c3a:	0020      	movs	r0, r4
 8007c3c:	0029      	movs	r1, r5
 8007c3e:	f7f8 fc0b 	bl	8000458 <__aeabi_dcmplt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d100      	bne.n	8007c48 <_dtoa_r+0x65c>
 8007c46:	e716      	b.n	8007a76 <_dtoa_r+0x48a>
 8007c48:	9b08      	ldr	r3, [sp, #32]
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	9208      	str	r2, [sp, #32]
 8007c50:	7812      	ldrb	r2, [r2, #0]
 8007c52:	2a30      	cmp	r2, #48	; 0x30
 8007c54:	d0f8      	beq.n	8007c48 <_dtoa_r+0x65c>
 8007c56:	9308      	str	r3, [sp, #32]
 8007c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c5a:	9303      	str	r3, [sp, #12]
 8007c5c:	e046      	b.n	8007cec <_dtoa_r+0x700>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <_dtoa_r+0x730>)
 8007c62:	f7fa fadd 	bl	8002220 <__aeabi_dmul>
 8007c66:	0006      	movs	r6, r0
 8007c68:	000f      	movs	r7, r1
 8007c6a:	e7b2      	b.n	8007bd2 <_dtoa_r+0x5e6>
 8007c6c:	9b06      	ldr	r3, [sp, #24]
 8007c6e:	9a06      	ldr	r2, [sp, #24]
 8007c70:	930a      	str	r3, [sp, #40]	; 0x28
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	9c08      	ldr	r4, [sp, #32]
 8007c76:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	189b      	adds	r3, r3, r2
 8007c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c7e:	0032      	movs	r2, r6
 8007c80:	003b      	movs	r3, r7
 8007c82:	0020      	movs	r0, r4
 8007c84:	0029      	movs	r1, r5
 8007c86:	f7f9 fed1 	bl	8001a2c <__aeabi_ddiv>
 8007c8a:	f7fb f92b 	bl	8002ee4 <__aeabi_d2iz>
 8007c8e:	9007      	str	r0, [sp, #28]
 8007c90:	f7fb f95e 	bl	8002f50 <__aeabi_i2d>
 8007c94:	0032      	movs	r2, r6
 8007c96:	003b      	movs	r3, r7
 8007c98:	f7fa fac2 	bl	8002220 <__aeabi_dmul>
 8007c9c:	0002      	movs	r2, r0
 8007c9e:	000b      	movs	r3, r1
 8007ca0:	0020      	movs	r0, r4
 8007ca2:	0029      	movs	r1, r5
 8007ca4:	f7fa fd7e 	bl	80027a4 <__aeabi_dsub>
 8007ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007caa:	001a      	movs	r2, r3
 8007cac:	3201      	adds	r2, #1
 8007cae:	920a      	str	r2, [sp, #40]	; 0x28
 8007cb0:	9208      	str	r2, [sp, #32]
 8007cb2:	9a07      	ldr	r2, [sp, #28]
 8007cb4:	3230      	adds	r2, #48	; 0x30
 8007cb6:	701a      	strb	r2, [r3, #0]
 8007cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d14f      	bne.n	8007d5e <_dtoa_r+0x772>
 8007cbe:	0002      	movs	r2, r0
 8007cc0:	000b      	movs	r3, r1
 8007cc2:	f7f9 fb53 	bl	800136c <__aeabi_dadd>
 8007cc6:	0032      	movs	r2, r6
 8007cc8:	003b      	movs	r3, r7
 8007cca:	0004      	movs	r4, r0
 8007ccc:	000d      	movs	r5, r1
 8007cce:	f7f8 fbd7 	bl	8000480 <__aeabi_dcmpgt>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d12e      	bne.n	8007d34 <_dtoa_r+0x748>
 8007cd6:	0032      	movs	r2, r6
 8007cd8:	003b      	movs	r3, r7
 8007cda:	0020      	movs	r0, r4
 8007cdc:	0029      	movs	r1, r5
 8007cde:	f7f8 fbb5 	bl	800044c <__aeabi_dcmpeq>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d002      	beq.n	8007cec <_dtoa_r+0x700>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	07de      	lsls	r6, r3, #31
 8007cea:	d423      	bmi.n	8007d34 <_dtoa_r+0x748>
 8007cec:	9905      	ldr	r1, [sp, #20]
 8007cee:	9804      	ldr	r0, [sp, #16]
 8007cf0:	f000 fbd6 	bl	80084a0 <_Bfree>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9a08      	ldr	r2, [sp, #32]
 8007cf8:	7013      	strb	r3, [r2, #0]
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cfe:	3301      	adds	r3, #1
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d100      	bne.n	8007d0a <_dtoa_r+0x71e>
 8007d08:	e4ba      	b.n	8007680 <_dtoa_r+0x94>
 8007d0a:	9a08      	ldr	r2, [sp, #32]
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e4b7      	b.n	8007680 <_dtoa_r+0x94>
 8007d10:	0800b9b8 	.word	0x0800b9b8
 8007d14:	0800b990 	.word	0x0800b990
 8007d18:	3ff00000 	.word	0x3ff00000
 8007d1c:	40240000 	.word	0x40240000
 8007d20:	401c0000 	.word	0x401c0000
 8007d24:	fcc00000 	.word	0xfcc00000
 8007d28:	40140000 	.word	0x40140000
 8007d2c:	7cc00000 	.word	0x7cc00000
 8007d30:	3fe00000 	.word	0x3fe00000
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	930e      	str	r3, [sp, #56]	; 0x38
 8007d38:	9b08      	ldr	r3, [sp, #32]
 8007d3a:	9308      	str	r3, [sp, #32]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	781a      	ldrb	r2, [r3, #0]
 8007d40:	2a39      	cmp	r2, #57	; 0x39
 8007d42:	d108      	bne.n	8007d56 <_dtoa_r+0x76a>
 8007d44:	9a06      	ldr	r2, [sp, #24]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d1f7      	bne.n	8007d3a <_dtoa_r+0x74e>
 8007d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d4c:	9906      	ldr	r1, [sp, #24]
 8007d4e:	3201      	adds	r2, #1
 8007d50:	920e      	str	r2, [sp, #56]	; 0x38
 8007d52:	2230      	movs	r2, #48	; 0x30
 8007d54:	700a      	strb	r2, [r1, #0]
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	3201      	adds	r2, #1
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	e77c      	b.n	8007c58 <_dtoa_r+0x66c>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4ba9      	ldr	r3, [pc, #676]	; (8008008 <_dtoa_r+0xa1c>)
 8007d62:	f7fa fa5d 	bl	8002220 <__aeabi_dmul>
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	0004      	movs	r4, r0
 8007d6c:	000d      	movs	r5, r1
 8007d6e:	f7f8 fb6d 	bl	800044c <__aeabi_dcmpeq>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d100      	bne.n	8007d78 <_dtoa_r+0x78c>
 8007d76:	e782      	b.n	8007c7e <_dtoa_r+0x692>
 8007d78:	e7b8      	b.n	8007cec <_dtoa_r+0x700>
 8007d7a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007d7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007d7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	d012      	beq.n	8007daa <_dtoa_r+0x7be>
 8007d84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d86:	2a01      	cmp	r2, #1
 8007d88:	dc6e      	bgt.n	8007e68 <_dtoa_r+0x87c>
 8007d8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	d065      	beq.n	8007e5c <_dtoa_r+0x870>
 8007d90:	4a9e      	ldr	r2, [pc, #632]	; (800800c <_dtoa_r+0xa20>)
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d96:	2101      	movs	r1, #1
 8007d98:	18d2      	adds	r2, r2, r3
 8007d9a:	920a      	str	r2, [sp, #40]	; 0x28
 8007d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d9e:	9804      	ldr	r0, [sp, #16]
 8007da0:	18d3      	adds	r3, r2, r3
 8007da2:	930c      	str	r3, [sp, #48]	; 0x30
 8007da4:	f000 fc2c 	bl	8008600 <__i2b>
 8007da8:	0007      	movs	r7, r0
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	d00e      	beq.n	8007dcc <_dtoa_r+0x7e0>
 8007dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dd0b      	ble.n	8007dcc <_dtoa_r+0x7e0>
 8007db4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007db6:	0023      	movs	r3, r4
 8007db8:	4294      	cmp	r4, r2
 8007dba:	dd00      	ble.n	8007dbe <_dtoa_r+0x7d2>
 8007dbc:	0013      	movs	r3, r2
 8007dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc0:	1ae4      	subs	r4, r4, r3
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	930c      	str	r3, [sp, #48]	; 0x30
 8007dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d01e      	beq.n	8007e10 <_dtoa_r+0x824>
 8007dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d05c      	beq.n	8007e92 <_dtoa_r+0x8a6>
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	dd10      	ble.n	8007dfe <_dtoa_r+0x812>
 8007ddc:	0039      	movs	r1, r7
 8007dde:	002a      	movs	r2, r5
 8007de0:	9804      	ldr	r0, [sp, #16]
 8007de2:	f000 fcd5 	bl	8008790 <__pow5mult>
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	0001      	movs	r1, r0
 8007dea:	0007      	movs	r7, r0
 8007dec:	9804      	ldr	r0, [sp, #16]
 8007dee:	f000 fc1f 	bl	8008630 <__multiply>
 8007df2:	0006      	movs	r6, r0
 8007df4:	9905      	ldr	r1, [sp, #20]
 8007df6:	9804      	ldr	r0, [sp, #16]
 8007df8:	f000 fb52 	bl	80084a0 <_Bfree>
 8007dfc:	9605      	str	r6, [sp, #20]
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e00:	1b5a      	subs	r2, r3, r5
 8007e02:	42ab      	cmp	r3, r5
 8007e04:	d004      	beq.n	8007e10 <_dtoa_r+0x824>
 8007e06:	9905      	ldr	r1, [sp, #20]
 8007e08:	9804      	ldr	r0, [sp, #16]
 8007e0a:	f000 fcc1 	bl	8008790 <__pow5mult>
 8007e0e:	9005      	str	r0, [sp, #20]
 8007e10:	2101      	movs	r1, #1
 8007e12:	9804      	ldr	r0, [sp, #16]
 8007e14:	f000 fbf4 	bl	8008600 <__i2b>
 8007e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e1a:	0006      	movs	r6, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dd3a      	ble.n	8007e96 <_dtoa_r+0x8aa>
 8007e20:	001a      	movs	r2, r3
 8007e22:	0001      	movs	r1, r0
 8007e24:	9804      	ldr	r0, [sp, #16]
 8007e26:	f000 fcb3 	bl	8008790 <__pow5mult>
 8007e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e2c:	0006      	movs	r6, r0
 8007e2e:	2500      	movs	r5, #0
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	dc38      	bgt.n	8007ea6 <_dtoa_r+0x8ba>
 8007e34:	2500      	movs	r5, #0
 8007e36:	9b08      	ldr	r3, [sp, #32]
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	d130      	bne.n	8007e9e <_dtoa_r+0x8b2>
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	031b      	lsls	r3, r3, #12
 8007e40:	42ab      	cmp	r3, r5
 8007e42:	d12c      	bne.n	8007e9e <_dtoa_r+0x8b2>
 8007e44:	4b72      	ldr	r3, [pc, #456]	; (8008010 <_dtoa_r+0xa24>)
 8007e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e48:	4213      	tst	r3, r2
 8007e4a:	d028      	beq.n	8007e9e <_dtoa_r+0x8b2>
 8007e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4e:	3501      	adds	r5, #1
 8007e50:	3301      	adds	r3, #1
 8007e52:	930a      	str	r3, [sp, #40]	; 0x28
 8007e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e56:	3301      	adds	r3, #1
 8007e58:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5a:	e020      	b.n	8007e9e <_dtoa_r+0x8b2>
 8007e5c:	2336      	movs	r3, #54	; 0x36
 8007e5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	e795      	b.n	8007d94 <_dtoa_r+0x7a8>
 8007e68:	9b07      	ldr	r3, [sp, #28]
 8007e6a:	1e5d      	subs	r5, r3, #1
 8007e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	db07      	blt.n	8007e82 <_dtoa_r+0x896>
 8007e72:	1b5d      	subs	r5, r3, r5
 8007e74:	9b07      	ldr	r3, [sp, #28]
 8007e76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da8b      	bge.n	8007d94 <_dtoa_r+0x7a8>
 8007e7c:	1ae4      	subs	r4, r4, r3
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e788      	b.n	8007d94 <_dtoa_r+0x7a8>
 8007e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e86:	1aeb      	subs	r3, r5, r3
 8007e88:	18d3      	adds	r3, r2, r3
 8007e8a:	950d      	str	r5, [sp, #52]	; 0x34
 8007e8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e8e:	2500      	movs	r5, #0
 8007e90:	e7f0      	b.n	8007e74 <_dtoa_r+0x888>
 8007e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e94:	e7b7      	b.n	8007e06 <_dtoa_r+0x81a>
 8007e96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e98:	2500      	movs	r5, #0
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	ddca      	ble.n	8007e34 <_dtoa_r+0x848>
 8007e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d008      	beq.n	8007eb8 <_dtoa_r+0x8cc>
 8007ea6:	6933      	ldr	r3, [r6, #16]
 8007ea8:	3303      	adds	r3, #3
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	18f3      	adds	r3, r6, r3
 8007eae:	6858      	ldr	r0, [r3, #4]
 8007eb0:	f000 fb5e 	bl	8008570 <__hi0bits>
 8007eb4:	2320      	movs	r3, #32
 8007eb6:	1a18      	subs	r0, r3, r0
 8007eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eba:	1818      	adds	r0, r3, r0
 8007ebc:	0002      	movs	r2, r0
 8007ebe:	231f      	movs	r3, #31
 8007ec0:	401a      	ands	r2, r3
 8007ec2:	4218      	tst	r0, r3
 8007ec4:	d047      	beq.n	8007f56 <_dtoa_r+0x96a>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	1a9b      	subs	r3, r3, r2
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	dd3f      	ble.n	8007f4e <_dtoa_r+0x962>
 8007ece:	231c      	movs	r3, #28
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed4:	18e4      	adds	r4, r4, r3
 8007ed6:	18d2      	adds	r2, r2, r3
 8007ed8:	920a      	str	r2, [sp, #40]	; 0x28
 8007eda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007edc:	18d3      	adds	r3, r2, r3
 8007ede:	930c      	str	r3, [sp, #48]	; 0x30
 8007ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd05      	ble.n	8007ef2 <_dtoa_r+0x906>
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	9905      	ldr	r1, [sp, #20]
 8007eea:	9804      	ldr	r0, [sp, #16]
 8007eec:	f000 fcac 	bl	8008848 <__lshift>
 8007ef0:	9005      	str	r0, [sp, #20]
 8007ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd05      	ble.n	8007f04 <_dtoa_r+0x918>
 8007ef8:	0031      	movs	r1, r6
 8007efa:	001a      	movs	r2, r3
 8007efc:	9804      	ldr	r0, [sp, #16]
 8007efe:	f000 fca3 	bl	8008848 <__lshift>
 8007f02:	0006      	movs	r6, r0
 8007f04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d027      	beq.n	8007f5a <_dtoa_r+0x96e>
 8007f0a:	0031      	movs	r1, r6
 8007f0c:	9805      	ldr	r0, [sp, #20]
 8007f0e:	f000 fd09 	bl	8008924 <__mcmp>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	da21      	bge.n	8007f5a <_dtoa_r+0x96e>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	220a      	movs	r2, #10
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	9303      	str	r3, [sp, #12]
 8007f1e:	9905      	ldr	r1, [sp, #20]
 8007f20:	2300      	movs	r3, #0
 8007f22:	9804      	ldr	r0, [sp, #16]
 8007f24:	f000 fae0 	bl	80084e8 <__multadd>
 8007f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f2a:	9005      	str	r0, [sp, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d100      	bne.n	8007f32 <_dtoa_r+0x946>
 8007f30:	e15d      	b.n	80081ee <_dtoa_r+0xc02>
 8007f32:	2300      	movs	r3, #0
 8007f34:	0039      	movs	r1, r7
 8007f36:	220a      	movs	r2, #10
 8007f38:	9804      	ldr	r0, [sp, #16]
 8007f3a:	f000 fad5 	bl	80084e8 <__multadd>
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	0007      	movs	r7, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dc49      	bgt.n	8007fda <_dtoa_r+0x9ee>
 8007f46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	dc0e      	bgt.n	8007f6a <_dtoa_r+0x97e>
 8007f4c:	e045      	b.n	8007fda <_dtoa_r+0x9ee>
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d0c6      	beq.n	8007ee0 <_dtoa_r+0x8f4>
 8007f52:	331c      	adds	r3, #28
 8007f54:	e7bd      	b.n	8007ed2 <_dtoa_r+0x8e6>
 8007f56:	0013      	movs	r3, r2
 8007f58:	e7fb      	b.n	8007f52 <_dtoa_r+0x966>
 8007f5a:	9b07      	ldr	r3, [sp, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc36      	bgt.n	8007fce <_dtoa_r+0x9e2>
 8007f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	dd33      	ble.n	8007fce <_dtoa_r+0x9e2>
 8007f66:	9b07      	ldr	r3, [sp, #28]
 8007f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10c      	bne.n	8007f8a <_dtoa_r+0x99e>
 8007f70:	0031      	movs	r1, r6
 8007f72:	2205      	movs	r2, #5
 8007f74:	9804      	ldr	r0, [sp, #16]
 8007f76:	f000 fab7 	bl	80084e8 <__multadd>
 8007f7a:	0006      	movs	r6, r0
 8007f7c:	0001      	movs	r1, r0
 8007f7e:	9805      	ldr	r0, [sp, #20]
 8007f80:	f000 fcd0 	bl	8008924 <__mcmp>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	dd00      	ble.n	8007f8a <_dtoa_r+0x99e>
 8007f88:	e59f      	b.n	8007aca <_dtoa_r+0x4de>
 8007f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	9b06      	ldr	r3, [sp, #24]
 8007f92:	9308      	str	r3, [sp, #32]
 8007f94:	2500      	movs	r5, #0
 8007f96:	0031      	movs	r1, r6
 8007f98:	9804      	ldr	r0, [sp, #16]
 8007f9a:	f000 fa81 	bl	80084a0 <_Bfree>
 8007f9e:	2f00      	cmp	r7, #0
 8007fa0:	d100      	bne.n	8007fa4 <_dtoa_r+0x9b8>
 8007fa2:	e6a3      	b.n	8007cec <_dtoa_r+0x700>
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	d005      	beq.n	8007fb4 <_dtoa_r+0x9c8>
 8007fa8:	42bd      	cmp	r5, r7
 8007faa:	d003      	beq.n	8007fb4 <_dtoa_r+0x9c8>
 8007fac:	0029      	movs	r1, r5
 8007fae:	9804      	ldr	r0, [sp, #16]
 8007fb0:	f000 fa76 	bl	80084a0 <_Bfree>
 8007fb4:	0039      	movs	r1, r7
 8007fb6:	9804      	ldr	r0, [sp, #16]
 8007fb8:	f000 fa72 	bl	80084a0 <_Bfree>
 8007fbc:	e696      	b.n	8007cec <_dtoa_r+0x700>
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	0037      	movs	r7, r6
 8007fc2:	e7e2      	b.n	8007f8a <_dtoa_r+0x99e>
 8007fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	0037      	movs	r7, r6
 8007fcc:	e57d      	b.n	8007aca <_dtoa_r+0x4de>
 8007fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d100      	bne.n	8007fd6 <_dtoa_r+0x9ea>
 8007fd4:	e0c3      	b.n	800815e <_dtoa_r+0xb72>
 8007fd6:	9b07      	ldr	r3, [sp, #28]
 8007fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fda:	2c00      	cmp	r4, #0
 8007fdc:	dd05      	ble.n	8007fea <_dtoa_r+0x9fe>
 8007fde:	0039      	movs	r1, r7
 8007fe0:	0022      	movs	r2, r4
 8007fe2:	9804      	ldr	r0, [sp, #16]
 8007fe4:	f000 fc30 	bl	8008848 <__lshift>
 8007fe8:	0007      	movs	r7, r0
 8007fea:	0038      	movs	r0, r7
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	d024      	beq.n	800803a <_dtoa_r+0xa4e>
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	9804      	ldr	r0, [sp, #16]
 8007ff4:	f000 fa10 	bl	8008418 <_Balloc>
 8007ff8:	1e04      	subs	r4, r0, #0
 8007ffa:	d111      	bne.n	8008020 <_dtoa_r+0xa34>
 8007ffc:	0022      	movs	r2, r4
 8007ffe:	4b05      	ldr	r3, [pc, #20]	; (8008014 <_dtoa_r+0xa28>)
 8008000:	4805      	ldr	r0, [pc, #20]	; (8008018 <_dtoa_r+0xa2c>)
 8008002:	4906      	ldr	r1, [pc, #24]	; (800801c <_dtoa_r+0xa30>)
 8008004:	f7ff fb07 	bl	8007616 <_dtoa_r+0x2a>
 8008008:	40240000 	.word	0x40240000
 800800c:	00000433 	.word	0x00000433
 8008010:	7ff00000 	.word	0x7ff00000
 8008014:	0800b920 	.word	0x0800b920
 8008018:	0800b8c8 	.word	0x0800b8c8
 800801c:	000002ef 	.word	0x000002ef
 8008020:	0039      	movs	r1, r7
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	310c      	adds	r1, #12
 8008026:	3202      	adds	r2, #2
 8008028:	0092      	lsls	r2, r2, #2
 800802a:	300c      	adds	r0, #12
 800802c:	f000 ffca 	bl	8008fc4 <memcpy>
 8008030:	2201      	movs	r2, #1
 8008032:	0021      	movs	r1, r4
 8008034:	9804      	ldr	r0, [sp, #16]
 8008036:	f000 fc07 	bl	8008848 <__lshift>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800803e:	9307      	str	r3, [sp, #28]
 8008040:	3b01      	subs	r3, #1
 8008042:	189b      	adds	r3, r3, r2
 8008044:	2201      	movs	r2, #1
 8008046:	003d      	movs	r5, r7
 8008048:	0007      	movs	r7, r0
 800804a:	930e      	str	r3, [sp, #56]	; 0x38
 800804c:	9b08      	ldr	r3, [sp, #32]
 800804e:	4013      	ands	r3, r2
 8008050:	930d      	str	r3, [sp, #52]	; 0x34
 8008052:	0031      	movs	r1, r6
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	f7ff fa39 	bl	80074cc <quorem>
 800805a:	0029      	movs	r1, r5
 800805c:	0004      	movs	r4, r0
 800805e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	f000 fc5f 	bl	8008924 <__mcmp>
 8008066:	003a      	movs	r2, r7
 8008068:	900c      	str	r0, [sp, #48]	; 0x30
 800806a:	0031      	movs	r1, r6
 800806c:	9804      	ldr	r0, [sp, #16]
 800806e:	f000 fc75 	bl	800895c <__mdiff>
 8008072:	2201      	movs	r2, #1
 8008074:	68c3      	ldr	r3, [r0, #12]
 8008076:	3430      	adds	r4, #48	; 0x30
 8008078:	9008      	str	r0, [sp, #32]
 800807a:	920a      	str	r2, [sp, #40]	; 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <_dtoa_r+0xa9e>
 8008080:	0001      	movs	r1, r0
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	f000 fc4e 	bl	8008924 <__mcmp>
 8008088:	900a      	str	r0, [sp, #40]	; 0x28
 800808a:	9908      	ldr	r1, [sp, #32]
 800808c:	9804      	ldr	r0, [sp, #16]
 800808e:	f000 fa07 	bl	80084a0 <_Bfree>
 8008092:	9b07      	ldr	r3, [sp, #28]
 8008094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008096:	3301      	adds	r3, #1
 8008098:	9308      	str	r3, [sp, #32]
 800809a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800809c:	4313      	orrs	r3, r2
 800809e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080a0:	4313      	orrs	r3, r2
 80080a2:	d109      	bne.n	80080b8 <_dtoa_r+0xacc>
 80080a4:	2c39      	cmp	r4, #57	; 0x39
 80080a6:	d022      	beq.n	80080ee <_dtoa_r+0xb02>
 80080a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd01      	ble.n	80080b2 <_dtoa_r+0xac6>
 80080ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80080b0:	3431      	adds	r4, #49	; 0x31
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	701c      	strb	r4, [r3, #0]
 80080b6:	e76e      	b.n	8007f96 <_dtoa_r+0x9aa>
 80080b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	db04      	blt.n	80080c8 <_dtoa_r+0xadc>
 80080be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80080c0:	4313      	orrs	r3, r2
 80080c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080c4:	4313      	orrs	r3, r2
 80080c6:	d11e      	bne.n	8008106 <_dtoa_r+0xb1a>
 80080c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	ddf1      	ble.n	80080b2 <_dtoa_r+0xac6>
 80080ce:	9905      	ldr	r1, [sp, #20]
 80080d0:	2201      	movs	r2, #1
 80080d2:	9804      	ldr	r0, [sp, #16]
 80080d4:	f000 fbb8 	bl	8008848 <__lshift>
 80080d8:	0031      	movs	r1, r6
 80080da:	9005      	str	r0, [sp, #20]
 80080dc:	f000 fc22 	bl	8008924 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dc02      	bgt.n	80080ea <_dtoa_r+0xafe>
 80080e4:	d1e5      	bne.n	80080b2 <_dtoa_r+0xac6>
 80080e6:	07e3      	lsls	r3, r4, #31
 80080e8:	d5e3      	bpl.n	80080b2 <_dtoa_r+0xac6>
 80080ea:	2c39      	cmp	r4, #57	; 0x39
 80080ec:	d1df      	bne.n	80080ae <_dtoa_r+0xac2>
 80080ee:	2339      	movs	r3, #57	; 0x39
 80080f0:	9a07      	ldr	r2, [sp, #28]
 80080f2:	7013      	strb	r3, [r2, #0]
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	9308      	str	r3, [sp, #32]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	2a39      	cmp	r2, #57	; 0x39
 80080fe:	d063      	beq.n	80081c8 <_dtoa_r+0xbdc>
 8008100:	3201      	adds	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e747      	b.n	8007f96 <_dtoa_r+0x9aa>
 8008106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008108:	2b00      	cmp	r3, #0
 800810a:	dd03      	ble.n	8008114 <_dtoa_r+0xb28>
 800810c:	2c39      	cmp	r4, #57	; 0x39
 800810e:	d0ee      	beq.n	80080ee <_dtoa_r+0xb02>
 8008110:	3401      	adds	r4, #1
 8008112:	e7ce      	b.n	80080b2 <_dtoa_r+0xac6>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	9a07      	ldr	r2, [sp, #28]
 8008118:	701c      	strb	r4, [r3, #0]
 800811a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800811c:	4293      	cmp	r3, r2
 800811e:	d03e      	beq.n	800819e <_dtoa_r+0xbb2>
 8008120:	2300      	movs	r3, #0
 8008122:	220a      	movs	r2, #10
 8008124:	9905      	ldr	r1, [sp, #20]
 8008126:	9804      	ldr	r0, [sp, #16]
 8008128:	f000 f9de 	bl	80084e8 <__multadd>
 800812c:	2300      	movs	r3, #0
 800812e:	9005      	str	r0, [sp, #20]
 8008130:	220a      	movs	r2, #10
 8008132:	0029      	movs	r1, r5
 8008134:	9804      	ldr	r0, [sp, #16]
 8008136:	42bd      	cmp	r5, r7
 8008138:	d106      	bne.n	8008148 <_dtoa_r+0xb5c>
 800813a:	f000 f9d5 	bl	80084e8 <__multadd>
 800813e:	0005      	movs	r5, r0
 8008140:	0007      	movs	r7, r0
 8008142:	9b08      	ldr	r3, [sp, #32]
 8008144:	9307      	str	r3, [sp, #28]
 8008146:	e784      	b.n	8008052 <_dtoa_r+0xa66>
 8008148:	f000 f9ce 	bl	80084e8 <__multadd>
 800814c:	0039      	movs	r1, r7
 800814e:	0005      	movs	r5, r0
 8008150:	2300      	movs	r3, #0
 8008152:	220a      	movs	r2, #10
 8008154:	9804      	ldr	r0, [sp, #16]
 8008156:	f000 f9c7 	bl	80084e8 <__multadd>
 800815a:	0007      	movs	r7, r0
 800815c:	e7f1      	b.n	8008142 <_dtoa_r+0xb56>
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	930b      	str	r3, [sp, #44]	; 0x2c
 8008162:	2500      	movs	r5, #0
 8008164:	0031      	movs	r1, r6
 8008166:	9805      	ldr	r0, [sp, #20]
 8008168:	f7ff f9b0 	bl	80074cc <quorem>
 800816c:	9b06      	ldr	r3, [sp, #24]
 800816e:	3030      	adds	r0, #48	; 0x30
 8008170:	5558      	strb	r0, [r3, r5]
 8008172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008174:	3501      	adds	r5, #1
 8008176:	0004      	movs	r4, r0
 8008178:	42ab      	cmp	r3, r5
 800817a:	dd07      	ble.n	800818c <_dtoa_r+0xba0>
 800817c:	2300      	movs	r3, #0
 800817e:	220a      	movs	r2, #10
 8008180:	9905      	ldr	r1, [sp, #20]
 8008182:	9804      	ldr	r0, [sp, #16]
 8008184:	f000 f9b0 	bl	80084e8 <__multadd>
 8008188:	9005      	str	r0, [sp, #20]
 800818a:	e7eb      	b.n	8008164 <_dtoa_r+0xb78>
 800818c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800818e:	2301      	movs	r3, #1
 8008190:	2a00      	cmp	r2, #0
 8008192:	dd00      	ble.n	8008196 <_dtoa_r+0xbaa>
 8008194:	0013      	movs	r3, r2
 8008196:	2500      	movs	r5, #0
 8008198:	9a06      	ldr	r2, [sp, #24]
 800819a:	18d3      	adds	r3, r2, r3
 800819c:	9308      	str	r3, [sp, #32]
 800819e:	9905      	ldr	r1, [sp, #20]
 80081a0:	2201      	movs	r2, #1
 80081a2:	9804      	ldr	r0, [sp, #16]
 80081a4:	f000 fb50 	bl	8008848 <__lshift>
 80081a8:	0031      	movs	r1, r6
 80081aa:	9005      	str	r0, [sp, #20]
 80081ac:	f000 fbba 	bl	8008924 <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dc9f      	bgt.n	80080f4 <_dtoa_r+0xb08>
 80081b4:	d101      	bne.n	80081ba <_dtoa_r+0xbce>
 80081b6:	07e4      	lsls	r4, r4, #31
 80081b8:	d49c      	bmi.n	80080f4 <_dtoa_r+0xb08>
 80081ba:	9b08      	ldr	r3, [sp, #32]
 80081bc:	9308      	str	r3, [sp, #32]
 80081be:	3b01      	subs	r3, #1
 80081c0:	781a      	ldrb	r2, [r3, #0]
 80081c2:	2a30      	cmp	r2, #48	; 0x30
 80081c4:	d0fa      	beq.n	80081bc <_dtoa_r+0xbd0>
 80081c6:	e6e6      	b.n	8007f96 <_dtoa_r+0x9aa>
 80081c8:	9a06      	ldr	r2, [sp, #24]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d193      	bne.n	80080f6 <_dtoa_r+0xb0a>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	9303      	str	r3, [sp, #12]
 80081d4:	2331      	movs	r3, #49	; 0x31
 80081d6:	7013      	strb	r3, [r2, #0]
 80081d8:	e6dd      	b.n	8007f96 <_dtoa_r+0x9aa>
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <_dtoa_r+0xc14>)
 80081dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081de:	9306      	str	r3, [sp, #24]
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <_dtoa_r+0xc18>)
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d001      	beq.n	80081ea <_dtoa_r+0xbfe>
 80081e6:	f7ff fa49 	bl	800767c <_dtoa_r+0x90>
 80081ea:	f7ff fa49 	bl	8007680 <_dtoa_r+0x94>
 80081ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	dcb6      	bgt.n	8008162 <_dtoa_r+0xb76>
 80081f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	dd00      	ble.n	80081fc <_dtoa_r+0xc10>
 80081fa:	e6b6      	b.n	8007f6a <_dtoa_r+0x97e>
 80081fc:	e7b1      	b.n	8008162 <_dtoa_r+0xb76>
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	0800b8a4 	.word	0x0800b8a4
 8008204:	0800b8ac 	.word	0x0800b8ac

08008208 <_free_r>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	0005      	movs	r5, r0
 800820c:	2900      	cmp	r1, #0
 800820e:	d010      	beq.n	8008232 <_free_r+0x2a>
 8008210:	1f0c      	subs	r4, r1, #4
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	da00      	bge.n	800821a <_free_r+0x12>
 8008218:	18e4      	adds	r4, r4, r3
 800821a:	0028      	movs	r0, r5
 800821c:	f000 f8ec 	bl	80083f8 <__malloc_lock>
 8008220:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <_free_r+0x90>)
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <_free_r+0x2c>
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	6014      	str	r4, [r2, #0]
 800822c:	0028      	movs	r0, r5
 800822e:	f000 f8eb 	bl	8008408 <__malloc_unlock>
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	42a3      	cmp	r3, r4
 8008236:	d908      	bls.n	800824a <_free_r+0x42>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	d1f3      	bne.n	8008228 <_free_r+0x20>
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	1809      	adds	r1, r1, r0
 8008246:	6021      	str	r1, [r4, #0]
 8008248:	e7ee      	b.n	8008228 <_free_r+0x20>
 800824a:	001a      	movs	r2, r3
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <_free_r+0x4e>
 8008252:	42a3      	cmp	r3, r4
 8008254:	d9f9      	bls.n	800824a <_free_r+0x42>
 8008256:	6811      	ldr	r1, [r2, #0]
 8008258:	1850      	adds	r0, r2, r1
 800825a:	42a0      	cmp	r0, r4
 800825c:	d10b      	bne.n	8008276 <_free_r+0x6e>
 800825e:	6820      	ldr	r0, [r4, #0]
 8008260:	1809      	adds	r1, r1, r0
 8008262:	1850      	adds	r0, r2, r1
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	4283      	cmp	r3, r0
 8008268:	d1e0      	bne.n	800822c <_free_r+0x24>
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	1841      	adds	r1, r0, r1
 8008270:	6011      	str	r1, [r2, #0]
 8008272:	6053      	str	r3, [r2, #4]
 8008274:	e7da      	b.n	800822c <_free_r+0x24>
 8008276:	42a0      	cmp	r0, r4
 8008278:	d902      	bls.n	8008280 <_free_r+0x78>
 800827a:	230c      	movs	r3, #12
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	e7d5      	b.n	800822c <_free_r+0x24>
 8008280:	6820      	ldr	r0, [r4, #0]
 8008282:	1821      	adds	r1, r4, r0
 8008284:	428b      	cmp	r3, r1
 8008286:	d103      	bne.n	8008290 <_free_r+0x88>
 8008288:	6819      	ldr	r1, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	1809      	adds	r1, r1, r0
 800828e:	6021      	str	r1, [r4, #0]
 8008290:	6063      	str	r3, [r4, #4]
 8008292:	6054      	str	r4, [r2, #4]
 8008294:	e7ca      	b.n	800822c <_free_r+0x24>
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	200008dc 	.word	0x200008dc

0800829c <malloc>:
 800829c:	b510      	push	{r4, lr}
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <malloc+0x10>)
 80082a0:	0001      	movs	r1, r0
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	f000 f826 	bl	80082f4 <_malloc_r>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	2000010c 	.word	0x2000010c

080082b0 <sbrk_aligned>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	4e0f      	ldr	r6, [pc, #60]	; (80082f0 <sbrk_aligned+0x40>)
 80082b4:	000d      	movs	r5, r1
 80082b6:	6831      	ldr	r1, [r6, #0]
 80082b8:	0004      	movs	r4, r0
 80082ba:	2900      	cmp	r1, #0
 80082bc:	d102      	bne.n	80082c4 <sbrk_aligned+0x14>
 80082be:	f000 fe6f 	bl	8008fa0 <_sbrk_r>
 80082c2:	6030      	str	r0, [r6, #0]
 80082c4:	0029      	movs	r1, r5
 80082c6:	0020      	movs	r0, r4
 80082c8:	f000 fe6a 	bl	8008fa0 <_sbrk_r>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d00a      	beq.n	80082e6 <sbrk_aligned+0x36>
 80082d0:	2303      	movs	r3, #3
 80082d2:	1cc5      	adds	r5, r0, #3
 80082d4:	439d      	bics	r5, r3
 80082d6:	42a8      	cmp	r0, r5
 80082d8:	d007      	beq.n	80082ea <sbrk_aligned+0x3a>
 80082da:	1a29      	subs	r1, r5, r0
 80082dc:	0020      	movs	r0, r4
 80082de:	f000 fe5f 	bl	8008fa0 <_sbrk_r>
 80082e2:	3001      	adds	r0, #1
 80082e4:	d101      	bne.n	80082ea <sbrk_aligned+0x3a>
 80082e6:	2501      	movs	r5, #1
 80082e8:	426d      	negs	r5, r5
 80082ea:	0028      	movs	r0, r5
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	200008e0 	.word	0x200008e0

080082f4 <_malloc_r>:
 80082f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f6:	2203      	movs	r2, #3
 80082f8:	1ccb      	adds	r3, r1, #3
 80082fa:	4393      	bics	r3, r2
 80082fc:	3308      	adds	r3, #8
 80082fe:	0006      	movs	r6, r0
 8008300:	001f      	movs	r7, r3
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d238      	bcs.n	8008378 <_malloc_r+0x84>
 8008306:	270c      	movs	r7, #12
 8008308:	42b9      	cmp	r1, r7
 800830a:	d837      	bhi.n	800837c <_malloc_r+0x88>
 800830c:	0030      	movs	r0, r6
 800830e:	f000 f873 	bl	80083f8 <__malloc_lock>
 8008312:	4b38      	ldr	r3, [pc, #224]	; (80083f4 <_malloc_r+0x100>)
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	001c      	movs	r4, r3
 800831a:	2c00      	cmp	r4, #0
 800831c:	d133      	bne.n	8008386 <_malloc_r+0x92>
 800831e:	0039      	movs	r1, r7
 8008320:	0030      	movs	r0, r6
 8008322:	f7ff ffc5 	bl	80082b0 <sbrk_aligned>
 8008326:	0004      	movs	r4, r0
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d15e      	bne.n	80083ea <_malloc_r+0xf6>
 800832c:	9b00      	ldr	r3, [sp, #0]
 800832e:	681c      	ldr	r4, [r3, #0]
 8008330:	0025      	movs	r5, r4
 8008332:	2d00      	cmp	r5, #0
 8008334:	d14e      	bne.n	80083d4 <_malloc_r+0xe0>
 8008336:	2c00      	cmp	r4, #0
 8008338:	d051      	beq.n	80083de <_malloc_r+0xea>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	0029      	movs	r1, r5
 800833e:	18e3      	adds	r3, r4, r3
 8008340:	0030      	movs	r0, r6
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	f000 fe2c 	bl	8008fa0 <_sbrk_r>
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	4283      	cmp	r3, r0
 800834c:	d147      	bne.n	80083de <_malloc_r+0xea>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	0030      	movs	r0, r6
 8008352:	1aff      	subs	r7, r7, r3
 8008354:	0039      	movs	r1, r7
 8008356:	f7ff ffab 	bl	80082b0 <sbrk_aligned>
 800835a:	3001      	adds	r0, #1
 800835c:	d03f      	beq.n	80083de <_malloc_r+0xea>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	19db      	adds	r3, r3, r7
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	9b00      	ldr	r3, [sp, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d040      	beq.n	80083ee <_malloc_r+0xfa>
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	42a2      	cmp	r2, r4
 8008370:	d133      	bne.n	80083da <_malloc_r+0xe6>
 8008372:	2200      	movs	r2, #0
 8008374:	605a      	str	r2, [r3, #4]
 8008376:	e014      	b.n	80083a2 <_malloc_r+0xae>
 8008378:	2b00      	cmp	r3, #0
 800837a:	dac5      	bge.n	8008308 <_malloc_r+0x14>
 800837c:	230c      	movs	r3, #12
 800837e:	2500      	movs	r5, #0
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	0028      	movs	r0, r5
 8008384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008386:	6821      	ldr	r1, [r4, #0]
 8008388:	1bc9      	subs	r1, r1, r7
 800838a:	d420      	bmi.n	80083ce <_malloc_r+0xda>
 800838c:	290b      	cmp	r1, #11
 800838e:	d918      	bls.n	80083c2 <_malloc_r+0xce>
 8008390:	19e2      	adds	r2, r4, r7
 8008392:	6027      	str	r7, [r4, #0]
 8008394:	42a3      	cmp	r3, r4
 8008396:	d112      	bne.n	80083be <_malloc_r+0xca>
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	6011      	str	r1, [r2, #0]
 80083a0:	6053      	str	r3, [r2, #4]
 80083a2:	0030      	movs	r0, r6
 80083a4:	0025      	movs	r5, r4
 80083a6:	f000 f82f 	bl	8008408 <__malloc_unlock>
 80083aa:	2207      	movs	r2, #7
 80083ac:	350b      	adds	r5, #11
 80083ae:	1d23      	adds	r3, r4, #4
 80083b0:	4395      	bics	r5, r2
 80083b2:	1aea      	subs	r2, r5, r3
 80083b4:	429d      	cmp	r5, r3
 80083b6:	d0e4      	beq.n	8008382 <_malloc_r+0x8e>
 80083b8:	1b5b      	subs	r3, r3, r5
 80083ba:	50a3      	str	r3, [r4, r2]
 80083bc:	e7e1      	b.n	8008382 <_malloc_r+0x8e>
 80083be:	605a      	str	r2, [r3, #4]
 80083c0:	e7ec      	b.n	800839c <_malloc_r+0xa8>
 80083c2:	6862      	ldr	r2, [r4, #4]
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d1d5      	bne.n	8008374 <_malloc_r+0x80>
 80083c8:	9b00      	ldr	r3, [sp, #0]
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	e7e9      	b.n	80083a2 <_malloc_r+0xae>
 80083ce:	0023      	movs	r3, r4
 80083d0:	6864      	ldr	r4, [r4, #4]
 80083d2:	e7a2      	b.n	800831a <_malloc_r+0x26>
 80083d4:	002c      	movs	r4, r5
 80083d6:	686d      	ldr	r5, [r5, #4]
 80083d8:	e7ab      	b.n	8008332 <_malloc_r+0x3e>
 80083da:	0013      	movs	r3, r2
 80083dc:	e7c4      	b.n	8008368 <_malloc_r+0x74>
 80083de:	230c      	movs	r3, #12
 80083e0:	0030      	movs	r0, r6
 80083e2:	6033      	str	r3, [r6, #0]
 80083e4:	f000 f810 	bl	8008408 <__malloc_unlock>
 80083e8:	e7cb      	b.n	8008382 <_malloc_r+0x8e>
 80083ea:	6027      	str	r7, [r4, #0]
 80083ec:	e7d9      	b.n	80083a2 <_malloc_r+0xae>
 80083ee:	605b      	str	r3, [r3, #4]
 80083f0:	deff      	udf	#255	; 0xff
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	200008dc 	.word	0x200008dc

080083f8 <__malloc_lock>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	4802      	ldr	r0, [pc, #8]	; (8008404 <__malloc_lock+0xc>)
 80083fc:	f7ff f859 	bl	80074b2 <__retarget_lock_acquire_recursive>
 8008400:	bd10      	pop	{r4, pc}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	200008d8 	.word	0x200008d8

08008408 <__malloc_unlock>:
 8008408:	b510      	push	{r4, lr}
 800840a:	4802      	ldr	r0, [pc, #8]	; (8008414 <__malloc_unlock+0xc>)
 800840c:	f7ff f852 	bl	80074b4 <__retarget_lock_release_recursive>
 8008410:	bd10      	pop	{r4, pc}
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	200008d8 	.word	0x200008d8

08008418 <_Balloc>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	69c5      	ldr	r5, [r0, #28]
 800841c:	0006      	movs	r6, r0
 800841e:	000c      	movs	r4, r1
 8008420:	2d00      	cmp	r5, #0
 8008422:	d10e      	bne.n	8008442 <_Balloc+0x2a>
 8008424:	2010      	movs	r0, #16
 8008426:	f7ff ff39 	bl	800829c <malloc>
 800842a:	1e02      	subs	r2, r0, #0
 800842c:	61f0      	str	r0, [r6, #28]
 800842e:	d104      	bne.n	800843a <_Balloc+0x22>
 8008430:	216b      	movs	r1, #107	; 0x6b
 8008432:	4b19      	ldr	r3, [pc, #100]	; (8008498 <_Balloc+0x80>)
 8008434:	4819      	ldr	r0, [pc, #100]	; (800849c <_Balloc+0x84>)
 8008436:	f000 fdcf 	bl	8008fd8 <__assert_func>
 800843a:	6045      	str	r5, [r0, #4]
 800843c:	6085      	str	r5, [r0, #8]
 800843e:	6005      	str	r5, [r0, #0]
 8008440:	60c5      	str	r5, [r0, #12]
 8008442:	69f5      	ldr	r5, [r6, #28]
 8008444:	68eb      	ldr	r3, [r5, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d013      	beq.n	8008472 <_Balloc+0x5a>
 800844a:	69f3      	ldr	r3, [r6, #28]
 800844c:	00a2      	lsls	r2, r4, #2
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	189b      	adds	r3, r3, r2
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	2800      	cmp	r0, #0
 8008456:	d118      	bne.n	800848a <_Balloc+0x72>
 8008458:	2101      	movs	r1, #1
 800845a:	000d      	movs	r5, r1
 800845c:	40a5      	lsls	r5, r4
 800845e:	1d6a      	adds	r2, r5, #5
 8008460:	0030      	movs	r0, r6
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	f000 fdd6 	bl	8009014 <_calloc_r>
 8008468:	2800      	cmp	r0, #0
 800846a:	d00c      	beq.n	8008486 <_Balloc+0x6e>
 800846c:	6044      	str	r4, [r0, #4]
 800846e:	6085      	str	r5, [r0, #8]
 8008470:	e00d      	b.n	800848e <_Balloc+0x76>
 8008472:	2221      	movs	r2, #33	; 0x21
 8008474:	2104      	movs	r1, #4
 8008476:	0030      	movs	r0, r6
 8008478:	f000 fdcc 	bl	8009014 <_calloc_r>
 800847c:	69f3      	ldr	r3, [r6, #28]
 800847e:	60e8      	str	r0, [r5, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e1      	bne.n	800844a <_Balloc+0x32>
 8008486:	2000      	movs	r0, #0
 8008488:	bd70      	pop	{r4, r5, r6, pc}
 800848a:	6802      	ldr	r2, [r0, #0]
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	6103      	str	r3, [r0, #16]
 8008492:	60c3      	str	r3, [r0, #12]
 8008494:	e7f8      	b.n	8008488 <_Balloc+0x70>
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	0800b8b1 	.word	0x0800b8b1
 800849c:	0800b931 	.word	0x0800b931

080084a0 <_Bfree>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	69c6      	ldr	r6, [r0, #28]
 80084a4:	0005      	movs	r5, r0
 80084a6:	000c      	movs	r4, r1
 80084a8:	2e00      	cmp	r6, #0
 80084aa:	d10e      	bne.n	80084ca <_Bfree+0x2a>
 80084ac:	2010      	movs	r0, #16
 80084ae:	f7ff fef5 	bl	800829c <malloc>
 80084b2:	1e02      	subs	r2, r0, #0
 80084b4:	61e8      	str	r0, [r5, #28]
 80084b6:	d104      	bne.n	80084c2 <_Bfree+0x22>
 80084b8:	218f      	movs	r1, #143	; 0x8f
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <_Bfree+0x40>)
 80084bc:	4809      	ldr	r0, [pc, #36]	; (80084e4 <_Bfree+0x44>)
 80084be:	f000 fd8b 	bl	8008fd8 <__assert_func>
 80084c2:	6046      	str	r6, [r0, #4]
 80084c4:	6086      	str	r6, [r0, #8]
 80084c6:	6006      	str	r6, [r0, #0]
 80084c8:	60c6      	str	r6, [r0, #12]
 80084ca:	2c00      	cmp	r4, #0
 80084cc:	d007      	beq.n	80084de <_Bfree+0x3e>
 80084ce:	69eb      	ldr	r3, [r5, #28]
 80084d0:	6862      	ldr	r2, [r4, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	0092      	lsls	r2, r2, #2
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	6022      	str	r2, [r4, #0]
 80084dc:	601c      	str	r4, [r3, #0]
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	0800b8b1 	.word	0x0800b8b1
 80084e4:	0800b931 	.word	0x0800b931

080084e8 <__multadd>:
 80084e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084ea:	000e      	movs	r6, r1
 80084ec:	9001      	str	r0, [sp, #4]
 80084ee:	000c      	movs	r4, r1
 80084f0:	001d      	movs	r5, r3
 80084f2:	2000      	movs	r0, #0
 80084f4:	690f      	ldr	r7, [r1, #16]
 80084f6:	3614      	adds	r6, #20
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	3001      	adds	r0, #1
 80084fc:	b299      	uxth	r1, r3
 80084fe:	4351      	muls	r1, r2
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	4353      	muls	r3, r2
 8008504:	1949      	adds	r1, r1, r5
 8008506:	0c0d      	lsrs	r5, r1, #16
 8008508:	195b      	adds	r3, r3, r5
 800850a:	0c1d      	lsrs	r5, r3, #16
 800850c:	b289      	uxth	r1, r1
 800850e:	041b      	lsls	r3, r3, #16
 8008510:	185b      	adds	r3, r3, r1
 8008512:	c608      	stmia	r6!, {r3}
 8008514:	4287      	cmp	r7, r0
 8008516:	dcef      	bgt.n	80084f8 <__multadd+0x10>
 8008518:	2d00      	cmp	r5, #0
 800851a:	d022      	beq.n	8008562 <__multadd+0x7a>
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	42bb      	cmp	r3, r7
 8008520:	dc19      	bgt.n	8008556 <__multadd+0x6e>
 8008522:	6861      	ldr	r1, [r4, #4]
 8008524:	9801      	ldr	r0, [sp, #4]
 8008526:	3101      	adds	r1, #1
 8008528:	f7ff ff76 	bl	8008418 <_Balloc>
 800852c:	1e06      	subs	r6, r0, #0
 800852e:	d105      	bne.n	800853c <__multadd+0x54>
 8008530:	0032      	movs	r2, r6
 8008532:	21ba      	movs	r1, #186	; 0xba
 8008534:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <__multadd+0x80>)
 8008536:	480d      	ldr	r0, [pc, #52]	; (800856c <__multadd+0x84>)
 8008538:	f000 fd4e 	bl	8008fd8 <__assert_func>
 800853c:	0021      	movs	r1, r4
 800853e:	6922      	ldr	r2, [r4, #16]
 8008540:	310c      	adds	r1, #12
 8008542:	3202      	adds	r2, #2
 8008544:	0092      	lsls	r2, r2, #2
 8008546:	300c      	adds	r0, #12
 8008548:	f000 fd3c 	bl	8008fc4 <memcpy>
 800854c:	0021      	movs	r1, r4
 800854e:	9801      	ldr	r0, [sp, #4]
 8008550:	f7ff ffa6 	bl	80084a0 <_Bfree>
 8008554:	0034      	movs	r4, r6
 8008556:	1d3b      	adds	r3, r7, #4
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	18e3      	adds	r3, r4, r3
 800855c:	605d      	str	r5, [r3, #4]
 800855e:	1c7b      	adds	r3, r7, #1
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	0020      	movs	r0, r4
 8008564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	0800b920 	.word	0x0800b920
 800856c:	0800b931 	.word	0x0800b931

08008570 <__hi0bits>:
 8008570:	0003      	movs	r3, r0
 8008572:	0c02      	lsrs	r2, r0, #16
 8008574:	2000      	movs	r0, #0
 8008576:	4282      	cmp	r2, r0
 8008578:	d101      	bne.n	800857e <__hi0bits+0xe>
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	3010      	adds	r0, #16
 800857e:	0e1a      	lsrs	r2, r3, #24
 8008580:	d101      	bne.n	8008586 <__hi0bits+0x16>
 8008582:	3008      	adds	r0, #8
 8008584:	021b      	lsls	r3, r3, #8
 8008586:	0f1a      	lsrs	r2, r3, #28
 8008588:	d101      	bne.n	800858e <__hi0bits+0x1e>
 800858a:	3004      	adds	r0, #4
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	0f9a      	lsrs	r2, r3, #30
 8008590:	d101      	bne.n	8008596 <__hi0bits+0x26>
 8008592:	3002      	adds	r0, #2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	db03      	blt.n	80085a2 <__hi0bits+0x32>
 800859a:	3001      	adds	r0, #1
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	d400      	bmi.n	80085a2 <__hi0bits+0x32>
 80085a0:	2020      	movs	r0, #32
 80085a2:	4770      	bx	lr

080085a4 <__lo0bits>:
 80085a4:	6803      	ldr	r3, [r0, #0]
 80085a6:	0001      	movs	r1, r0
 80085a8:	2207      	movs	r2, #7
 80085aa:	0018      	movs	r0, r3
 80085ac:	4010      	ands	r0, r2
 80085ae:	4213      	tst	r3, r2
 80085b0:	d00d      	beq.n	80085ce <__lo0bits+0x2a>
 80085b2:	3a06      	subs	r2, #6
 80085b4:	2000      	movs	r0, #0
 80085b6:	4213      	tst	r3, r2
 80085b8:	d105      	bne.n	80085c6 <__lo0bits+0x22>
 80085ba:	3002      	adds	r0, #2
 80085bc:	4203      	tst	r3, r0
 80085be:	d003      	beq.n	80085c8 <__lo0bits+0x24>
 80085c0:	40d3      	lsrs	r3, r2
 80085c2:	0010      	movs	r0, r2
 80085c4:	600b      	str	r3, [r1, #0]
 80085c6:	4770      	bx	lr
 80085c8:	089b      	lsrs	r3, r3, #2
 80085ca:	600b      	str	r3, [r1, #0]
 80085cc:	e7fb      	b.n	80085c6 <__lo0bits+0x22>
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	2a00      	cmp	r2, #0
 80085d2:	d101      	bne.n	80085d8 <__lo0bits+0x34>
 80085d4:	2010      	movs	r0, #16
 80085d6:	0c1b      	lsrs	r3, r3, #16
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	2a00      	cmp	r2, #0
 80085dc:	d101      	bne.n	80085e2 <__lo0bits+0x3e>
 80085de:	3008      	adds	r0, #8
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	071a      	lsls	r2, r3, #28
 80085e4:	d101      	bne.n	80085ea <__lo0bits+0x46>
 80085e6:	3004      	adds	r0, #4
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	079a      	lsls	r2, r3, #30
 80085ec:	d101      	bne.n	80085f2 <__lo0bits+0x4e>
 80085ee:	3002      	adds	r0, #2
 80085f0:	089b      	lsrs	r3, r3, #2
 80085f2:	07da      	lsls	r2, r3, #31
 80085f4:	d4e9      	bmi.n	80085ca <__lo0bits+0x26>
 80085f6:	3001      	adds	r0, #1
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	d1e6      	bne.n	80085ca <__lo0bits+0x26>
 80085fc:	2020      	movs	r0, #32
 80085fe:	e7e2      	b.n	80085c6 <__lo0bits+0x22>

08008600 <__i2b>:
 8008600:	b510      	push	{r4, lr}
 8008602:	000c      	movs	r4, r1
 8008604:	2101      	movs	r1, #1
 8008606:	f7ff ff07 	bl	8008418 <_Balloc>
 800860a:	2800      	cmp	r0, #0
 800860c:	d107      	bne.n	800861e <__i2b+0x1e>
 800860e:	2146      	movs	r1, #70	; 0x46
 8008610:	4c05      	ldr	r4, [pc, #20]	; (8008628 <__i2b+0x28>)
 8008612:	0002      	movs	r2, r0
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <__i2b+0x2c>)
 8008616:	0020      	movs	r0, r4
 8008618:	31ff      	adds	r1, #255	; 0xff
 800861a:	f000 fcdd 	bl	8008fd8 <__assert_func>
 800861e:	2301      	movs	r3, #1
 8008620:	6144      	str	r4, [r0, #20]
 8008622:	6103      	str	r3, [r0, #16]
 8008624:	bd10      	pop	{r4, pc}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	0800b931 	.word	0x0800b931
 800862c:	0800b920 	.word	0x0800b920

08008630 <__multiply>:
 8008630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008632:	0015      	movs	r5, r2
 8008634:	690a      	ldr	r2, [r1, #16]
 8008636:	692b      	ldr	r3, [r5, #16]
 8008638:	000c      	movs	r4, r1
 800863a:	b08b      	sub	sp, #44	; 0x2c
 800863c:	429a      	cmp	r2, r3
 800863e:	da01      	bge.n	8008644 <__multiply+0x14>
 8008640:	002c      	movs	r4, r5
 8008642:	000d      	movs	r5, r1
 8008644:	6927      	ldr	r7, [r4, #16]
 8008646:	692e      	ldr	r6, [r5, #16]
 8008648:	6861      	ldr	r1, [r4, #4]
 800864a:	19bb      	adds	r3, r7, r6
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	68a3      	ldr	r3, [r4, #8]
 8008650:	19ba      	adds	r2, r7, r6
 8008652:	4293      	cmp	r3, r2
 8008654:	da00      	bge.n	8008658 <__multiply+0x28>
 8008656:	3101      	adds	r1, #1
 8008658:	f7ff fede 	bl	8008418 <_Balloc>
 800865c:	9002      	str	r0, [sp, #8]
 800865e:	2800      	cmp	r0, #0
 8008660:	d106      	bne.n	8008670 <__multiply+0x40>
 8008662:	21b1      	movs	r1, #177	; 0xb1
 8008664:	4b48      	ldr	r3, [pc, #288]	; (8008788 <__multiply+0x158>)
 8008666:	4849      	ldr	r0, [pc, #292]	; (800878c <__multiply+0x15c>)
 8008668:	9a02      	ldr	r2, [sp, #8]
 800866a:	0049      	lsls	r1, r1, #1
 800866c:	f000 fcb4 	bl	8008fd8 <__assert_func>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	3314      	adds	r3, #20
 8008676:	469c      	mov	ip, r3
 8008678:	19bb      	adds	r3, r7, r6
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4463      	add	r3, ip
 800867e:	9304      	str	r3, [sp, #16]
 8008680:	4663      	mov	r3, ip
 8008682:	9904      	ldr	r1, [sp, #16]
 8008684:	428b      	cmp	r3, r1
 8008686:	d32a      	bcc.n	80086de <__multiply+0xae>
 8008688:	0023      	movs	r3, r4
 800868a:	00bf      	lsls	r7, r7, #2
 800868c:	3314      	adds	r3, #20
 800868e:	3514      	adds	r5, #20
 8008690:	9308      	str	r3, [sp, #32]
 8008692:	00b6      	lsls	r6, r6, #2
 8008694:	19db      	adds	r3, r3, r7
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	19ab      	adds	r3, r5, r6
 800869a:	9309      	str	r3, [sp, #36]	; 0x24
 800869c:	2304      	movs	r3, #4
 800869e:	9306      	str	r3, [sp, #24]
 80086a0:	0023      	movs	r3, r4
 80086a2:	9a05      	ldr	r2, [sp, #20]
 80086a4:	3315      	adds	r3, #21
 80086a6:	9501      	str	r5, [sp, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d305      	bcc.n	80086b8 <__multiply+0x88>
 80086ac:	1b13      	subs	r3, r2, r4
 80086ae:	3b15      	subs	r3, #21
 80086b0:	089b      	lsrs	r3, r3, #2
 80086b2:	3301      	adds	r3, #1
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	9306      	str	r3, [sp, #24]
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086bc:	4293      	cmp	r3, r2
 80086be:	d310      	bcc.n	80086e2 <__multiply+0xb2>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd05      	ble.n	80086d2 <__multiply+0xa2>
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d056      	beq.n	8008780 <__multiply+0x150>
 80086d2:	9b02      	ldr	r3, [sp, #8]
 80086d4:	9a03      	ldr	r2, [sp, #12]
 80086d6:	0018      	movs	r0, r3
 80086d8:	611a      	str	r2, [r3, #16]
 80086da:	b00b      	add	sp, #44	; 0x2c
 80086dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086de:	c304      	stmia	r3!, {r2}
 80086e0:	e7cf      	b.n	8008682 <__multiply+0x52>
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	b280      	uxth	r0, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d01e      	beq.n	800872a <__multiply+0xfa>
 80086ec:	4667      	mov	r7, ip
 80086ee:	2500      	movs	r5, #0
 80086f0:	9e08      	ldr	r6, [sp, #32]
 80086f2:	ce02      	ldmia	r6!, {r1}
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	9307      	str	r3, [sp, #28]
 80086f8:	b28b      	uxth	r3, r1
 80086fa:	4343      	muls	r3, r0
 80086fc:	001a      	movs	r2, r3
 80086fe:	466b      	mov	r3, sp
 8008700:	8b9b      	ldrh	r3, [r3, #28]
 8008702:	18d3      	adds	r3, r2, r3
 8008704:	195b      	adds	r3, r3, r5
 8008706:	0c0d      	lsrs	r5, r1, #16
 8008708:	4345      	muls	r5, r0
 800870a:	9a07      	ldr	r2, [sp, #28]
 800870c:	0c11      	lsrs	r1, r2, #16
 800870e:	1869      	adds	r1, r5, r1
 8008710:	0c1a      	lsrs	r2, r3, #16
 8008712:	188a      	adds	r2, r1, r2
 8008714:	b29b      	uxth	r3, r3
 8008716:	0c15      	lsrs	r5, r2, #16
 8008718:	0412      	lsls	r2, r2, #16
 800871a:	431a      	orrs	r2, r3
 800871c:	9b05      	ldr	r3, [sp, #20]
 800871e:	c704      	stmia	r7!, {r2}
 8008720:	42b3      	cmp	r3, r6
 8008722:	d8e6      	bhi.n	80086f2 <__multiply+0xc2>
 8008724:	4663      	mov	r3, ip
 8008726:	9a06      	ldr	r2, [sp, #24]
 8008728:	509d      	str	r5, [r3, r2]
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	0c00      	lsrs	r0, r0, #16
 8008730:	d020      	beq.n	8008774 <__multiply+0x144>
 8008732:	4663      	mov	r3, ip
 8008734:	0025      	movs	r5, r4
 8008736:	4661      	mov	r1, ip
 8008738:	2700      	movs	r7, #0
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3514      	adds	r5, #20
 800873e:	682a      	ldr	r2, [r5, #0]
 8008740:	680e      	ldr	r6, [r1, #0]
 8008742:	b292      	uxth	r2, r2
 8008744:	4342      	muls	r2, r0
 8008746:	0c36      	lsrs	r6, r6, #16
 8008748:	1992      	adds	r2, r2, r6
 800874a:	19d2      	adds	r2, r2, r7
 800874c:	0416      	lsls	r6, r2, #16
 800874e:	b29b      	uxth	r3, r3
 8008750:	431e      	orrs	r6, r3
 8008752:	600e      	str	r6, [r1, #0]
 8008754:	cd40      	ldmia	r5!, {r6}
 8008756:	684b      	ldr	r3, [r1, #4]
 8008758:	0c36      	lsrs	r6, r6, #16
 800875a:	4346      	muls	r6, r0
 800875c:	b29b      	uxth	r3, r3
 800875e:	0c12      	lsrs	r2, r2, #16
 8008760:	18f3      	adds	r3, r6, r3
 8008762:	189b      	adds	r3, r3, r2
 8008764:	9a05      	ldr	r2, [sp, #20]
 8008766:	0c1f      	lsrs	r7, r3, #16
 8008768:	3104      	adds	r1, #4
 800876a:	42aa      	cmp	r2, r5
 800876c:	d8e7      	bhi.n	800873e <__multiply+0x10e>
 800876e:	4662      	mov	r2, ip
 8008770:	9906      	ldr	r1, [sp, #24]
 8008772:	5053      	str	r3, [r2, r1]
 8008774:	9b01      	ldr	r3, [sp, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	2304      	movs	r3, #4
 800877c:	449c      	add	ip, r3
 800877e:	e79b      	b.n	80086b8 <__multiply+0x88>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	3b01      	subs	r3, #1
 8008784:	9303      	str	r3, [sp, #12]
 8008786:	e79b      	b.n	80086c0 <__multiply+0x90>
 8008788:	0800b920 	.word	0x0800b920
 800878c:	0800b931 	.word	0x0800b931

08008790 <__pow5mult>:
 8008790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008792:	2303      	movs	r3, #3
 8008794:	0015      	movs	r5, r2
 8008796:	0007      	movs	r7, r0
 8008798:	000e      	movs	r6, r1
 800879a:	401a      	ands	r2, r3
 800879c:	421d      	tst	r5, r3
 800879e:	d008      	beq.n	80087b2 <__pow5mult+0x22>
 80087a0:	4925      	ldr	r1, [pc, #148]	; (8008838 <__pow5mult+0xa8>)
 80087a2:	3a01      	subs	r2, #1
 80087a4:	0092      	lsls	r2, r2, #2
 80087a6:	5852      	ldr	r2, [r2, r1]
 80087a8:	2300      	movs	r3, #0
 80087aa:	0031      	movs	r1, r6
 80087ac:	f7ff fe9c 	bl	80084e8 <__multadd>
 80087b0:	0006      	movs	r6, r0
 80087b2:	10ad      	asrs	r5, r5, #2
 80087b4:	d03d      	beq.n	8008832 <__pow5mult+0xa2>
 80087b6:	69fc      	ldr	r4, [r7, #28]
 80087b8:	2c00      	cmp	r4, #0
 80087ba:	d10f      	bne.n	80087dc <__pow5mult+0x4c>
 80087bc:	2010      	movs	r0, #16
 80087be:	f7ff fd6d 	bl	800829c <malloc>
 80087c2:	1e02      	subs	r2, r0, #0
 80087c4:	61f8      	str	r0, [r7, #28]
 80087c6:	d105      	bne.n	80087d4 <__pow5mult+0x44>
 80087c8:	21b4      	movs	r1, #180	; 0xb4
 80087ca:	4b1c      	ldr	r3, [pc, #112]	; (800883c <__pow5mult+0xac>)
 80087cc:	481c      	ldr	r0, [pc, #112]	; (8008840 <__pow5mult+0xb0>)
 80087ce:	31ff      	adds	r1, #255	; 0xff
 80087d0:	f000 fc02 	bl	8008fd8 <__assert_func>
 80087d4:	6044      	str	r4, [r0, #4]
 80087d6:	6084      	str	r4, [r0, #8]
 80087d8:	6004      	str	r4, [r0, #0]
 80087da:	60c4      	str	r4, [r0, #12]
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	689c      	ldr	r4, [r3, #8]
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	d108      	bne.n	80087f8 <__pow5mult+0x68>
 80087e6:	0038      	movs	r0, r7
 80087e8:	4916      	ldr	r1, [pc, #88]	; (8008844 <__pow5mult+0xb4>)
 80087ea:	f7ff ff09 	bl	8008600 <__i2b>
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	0004      	movs	r4, r0
 80087f2:	6098      	str	r0, [r3, #8]
 80087f4:	2300      	movs	r3, #0
 80087f6:	6003      	str	r3, [r0, #0]
 80087f8:	2301      	movs	r3, #1
 80087fa:	421d      	tst	r5, r3
 80087fc:	d00a      	beq.n	8008814 <__pow5mult+0x84>
 80087fe:	0031      	movs	r1, r6
 8008800:	0022      	movs	r2, r4
 8008802:	0038      	movs	r0, r7
 8008804:	f7ff ff14 	bl	8008630 <__multiply>
 8008808:	0031      	movs	r1, r6
 800880a:	9001      	str	r0, [sp, #4]
 800880c:	0038      	movs	r0, r7
 800880e:	f7ff fe47 	bl	80084a0 <_Bfree>
 8008812:	9e01      	ldr	r6, [sp, #4]
 8008814:	106d      	asrs	r5, r5, #1
 8008816:	d00c      	beq.n	8008832 <__pow5mult+0xa2>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	2800      	cmp	r0, #0
 800881c:	d107      	bne.n	800882e <__pow5mult+0x9e>
 800881e:	0022      	movs	r2, r4
 8008820:	0021      	movs	r1, r4
 8008822:	0038      	movs	r0, r7
 8008824:	f7ff ff04 	bl	8008630 <__multiply>
 8008828:	2300      	movs	r3, #0
 800882a:	6020      	str	r0, [r4, #0]
 800882c:	6003      	str	r3, [r0, #0]
 800882e:	0004      	movs	r4, r0
 8008830:	e7e2      	b.n	80087f8 <__pow5mult+0x68>
 8008832:	0030      	movs	r0, r6
 8008834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	0800ba80 	.word	0x0800ba80
 800883c:	0800b8b1 	.word	0x0800b8b1
 8008840:	0800b931 	.word	0x0800b931
 8008844:	00000271 	.word	0x00000271

08008848 <__lshift>:
 8008848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800884a:	000c      	movs	r4, r1
 800884c:	0017      	movs	r7, r2
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	1155      	asrs	r5, r2, #5
 8008852:	b087      	sub	sp, #28
 8008854:	18eb      	adds	r3, r5, r3
 8008856:	9302      	str	r3, [sp, #8]
 8008858:	3301      	adds	r3, #1
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	6849      	ldr	r1, [r1, #4]
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	9004      	str	r0, [sp, #16]
 8008862:	9a01      	ldr	r2, [sp, #4]
 8008864:	4293      	cmp	r3, r2
 8008866:	db10      	blt.n	800888a <__lshift+0x42>
 8008868:	9804      	ldr	r0, [sp, #16]
 800886a:	f7ff fdd5 	bl	8008418 <_Balloc>
 800886e:	2300      	movs	r3, #0
 8008870:	0002      	movs	r2, r0
 8008872:	0006      	movs	r6, r0
 8008874:	0019      	movs	r1, r3
 8008876:	3214      	adds	r2, #20
 8008878:	4298      	cmp	r0, r3
 800887a:	d10c      	bne.n	8008896 <__lshift+0x4e>
 800887c:	31df      	adds	r1, #223	; 0xdf
 800887e:	0032      	movs	r2, r6
 8008880:	4b26      	ldr	r3, [pc, #152]	; (800891c <__lshift+0xd4>)
 8008882:	4827      	ldr	r0, [pc, #156]	; (8008920 <__lshift+0xd8>)
 8008884:	31ff      	adds	r1, #255	; 0xff
 8008886:	f000 fba7 	bl	8008fd8 <__assert_func>
 800888a:	3101      	adds	r1, #1
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	e7e8      	b.n	8008862 <__lshift+0x1a>
 8008890:	0098      	lsls	r0, r3, #2
 8008892:	5011      	str	r1, [r2, r0]
 8008894:	3301      	adds	r3, #1
 8008896:	42ab      	cmp	r3, r5
 8008898:	dbfa      	blt.n	8008890 <__lshift+0x48>
 800889a:	43eb      	mvns	r3, r5
 800889c:	17db      	asrs	r3, r3, #31
 800889e:	401d      	ands	r5, r3
 80088a0:	211f      	movs	r1, #31
 80088a2:	0023      	movs	r3, r4
 80088a4:	0038      	movs	r0, r7
 80088a6:	00ad      	lsls	r5, r5, #2
 80088a8:	1955      	adds	r5, r2, r5
 80088aa:	6922      	ldr	r2, [r4, #16]
 80088ac:	3314      	adds	r3, #20
 80088ae:	0092      	lsls	r2, r2, #2
 80088b0:	4008      	ands	r0, r1
 80088b2:	4684      	mov	ip, r0
 80088b4:	189a      	adds	r2, r3, r2
 80088b6:	420f      	tst	r7, r1
 80088b8:	d02a      	beq.n	8008910 <__lshift+0xc8>
 80088ba:	3101      	adds	r1, #1
 80088bc:	1a09      	subs	r1, r1, r0
 80088be:	9105      	str	r1, [sp, #20]
 80088c0:	2100      	movs	r1, #0
 80088c2:	9503      	str	r5, [sp, #12]
 80088c4:	4667      	mov	r7, ip
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	40b8      	lsls	r0, r7
 80088ca:	4308      	orrs	r0, r1
 80088cc:	9903      	ldr	r1, [sp, #12]
 80088ce:	c101      	stmia	r1!, {r0}
 80088d0:	9103      	str	r1, [sp, #12]
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	cb02      	ldmia	r3!, {r1}
 80088d6:	40c1      	lsrs	r1, r0
 80088d8:	429a      	cmp	r2, r3
 80088da:	d8f3      	bhi.n	80088c4 <__lshift+0x7c>
 80088dc:	0020      	movs	r0, r4
 80088de:	3015      	adds	r0, #21
 80088e0:	2304      	movs	r3, #4
 80088e2:	4282      	cmp	r2, r0
 80088e4:	d304      	bcc.n	80088f0 <__lshift+0xa8>
 80088e6:	1b13      	subs	r3, r2, r4
 80088e8:	3b15      	subs	r3, #21
 80088ea:	089b      	lsrs	r3, r3, #2
 80088ec:	3301      	adds	r3, #1
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	50e9      	str	r1, [r5, r3]
 80088f2:	2900      	cmp	r1, #0
 80088f4:	d002      	beq.n	80088fc <__lshift+0xb4>
 80088f6:	9b02      	ldr	r3, [sp, #8]
 80088f8:	3302      	adds	r3, #2
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	9804      	ldr	r0, [sp, #16]
 8008900:	3b01      	subs	r3, #1
 8008902:	0021      	movs	r1, r4
 8008904:	6133      	str	r3, [r6, #16]
 8008906:	f7ff fdcb 	bl	80084a0 <_Bfree>
 800890a:	0030      	movs	r0, r6
 800890c:	b007      	add	sp, #28
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008910:	cb02      	ldmia	r3!, {r1}
 8008912:	c502      	stmia	r5!, {r1}
 8008914:	429a      	cmp	r2, r3
 8008916:	d8fb      	bhi.n	8008910 <__lshift+0xc8>
 8008918:	e7f0      	b.n	80088fc <__lshift+0xb4>
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	0800b920 	.word	0x0800b920
 8008920:	0800b931 	.word	0x0800b931

08008924 <__mcmp>:
 8008924:	b530      	push	{r4, r5, lr}
 8008926:	690b      	ldr	r3, [r1, #16]
 8008928:	6904      	ldr	r4, [r0, #16]
 800892a:	0002      	movs	r2, r0
 800892c:	1ae0      	subs	r0, r4, r3
 800892e:	429c      	cmp	r4, r3
 8008930:	d10e      	bne.n	8008950 <__mcmp+0x2c>
 8008932:	3214      	adds	r2, #20
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	3114      	adds	r1, #20
 8008938:	0014      	movs	r4, r2
 800893a:	18c9      	adds	r1, r1, r3
 800893c:	18d2      	adds	r2, r2, r3
 800893e:	3a04      	subs	r2, #4
 8008940:	3904      	subs	r1, #4
 8008942:	6815      	ldr	r5, [r2, #0]
 8008944:	680b      	ldr	r3, [r1, #0]
 8008946:	429d      	cmp	r5, r3
 8008948:	d003      	beq.n	8008952 <__mcmp+0x2e>
 800894a:	2001      	movs	r0, #1
 800894c:	429d      	cmp	r5, r3
 800894e:	d303      	bcc.n	8008958 <__mcmp+0x34>
 8008950:	bd30      	pop	{r4, r5, pc}
 8008952:	4294      	cmp	r4, r2
 8008954:	d3f3      	bcc.n	800893e <__mcmp+0x1a>
 8008956:	e7fb      	b.n	8008950 <__mcmp+0x2c>
 8008958:	4240      	negs	r0, r0
 800895a:	e7f9      	b.n	8008950 <__mcmp+0x2c>

0800895c <__mdiff>:
 800895c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895e:	000e      	movs	r6, r1
 8008960:	0007      	movs	r7, r0
 8008962:	0011      	movs	r1, r2
 8008964:	0030      	movs	r0, r6
 8008966:	b087      	sub	sp, #28
 8008968:	0014      	movs	r4, r2
 800896a:	f7ff ffdb 	bl	8008924 <__mcmp>
 800896e:	1e05      	subs	r5, r0, #0
 8008970:	d110      	bne.n	8008994 <__mdiff+0x38>
 8008972:	0001      	movs	r1, r0
 8008974:	0038      	movs	r0, r7
 8008976:	f7ff fd4f 	bl	8008418 <_Balloc>
 800897a:	1e02      	subs	r2, r0, #0
 800897c:	d104      	bne.n	8008988 <__mdiff+0x2c>
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <__mdiff+0x120>)
 8008980:	483f      	ldr	r0, [pc, #252]	; (8008a80 <__mdiff+0x124>)
 8008982:	4940      	ldr	r1, [pc, #256]	; (8008a84 <__mdiff+0x128>)
 8008984:	f000 fb28 	bl	8008fd8 <__assert_func>
 8008988:	2301      	movs	r3, #1
 800898a:	6145      	str	r5, [r0, #20]
 800898c:	6103      	str	r3, [r0, #16]
 800898e:	0010      	movs	r0, r2
 8008990:	b007      	add	sp, #28
 8008992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008994:	2301      	movs	r3, #1
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	2800      	cmp	r0, #0
 800899a:	db04      	blt.n	80089a6 <__mdiff+0x4a>
 800899c:	0023      	movs	r3, r4
 800899e:	0034      	movs	r4, r6
 80089a0:	001e      	movs	r6, r3
 80089a2:	2300      	movs	r3, #0
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	0038      	movs	r0, r7
 80089a8:	6861      	ldr	r1, [r4, #4]
 80089aa:	f7ff fd35 	bl	8008418 <_Balloc>
 80089ae:	1e02      	subs	r2, r0, #0
 80089b0:	d103      	bne.n	80089ba <__mdiff+0x5e>
 80089b2:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <__mdiff+0x120>)
 80089b4:	4832      	ldr	r0, [pc, #200]	; (8008a80 <__mdiff+0x124>)
 80089b6:	4934      	ldr	r1, [pc, #208]	; (8008a88 <__mdiff+0x12c>)
 80089b8:	e7e4      	b.n	8008984 <__mdiff+0x28>
 80089ba:	9b01      	ldr	r3, [sp, #4]
 80089bc:	2700      	movs	r7, #0
 80089be:	60c3      	str	r3, [r0, #12]
 80089c0:	6920      	ldr	r0, [r4, #16]
 80089c2:	3414      	adds	r4, #20
 80089c4:	0083      	lsls	r3, r0, #2
 80089c6:	18e3      	adds	r3, r4, r3
 80089c8:	0021      	movs	r1, r4
 80089ca:	9401      	str	r4, [sp, #4]
 80089cc:	0034      	movs	r4, r6
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	6933      	ldr	r3, [r6, #16]
 80089d2:	3414      	adds	r4, #20
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	18e3      	adds	r3, r4, r3
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	0013      	movs	r3, r2
 80089dc:	3314      	adds	r3, #20
 80089de:	469c      	mov	ip, r3
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	9104      	str	r1, [sp, #16]
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	cc02      	ldmia	r4!, {r1}
 80089e8:	cb20      	ldmia	r3!, {r5}
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	b2ab      	uxth	r3, r5
 80089ee:	19df      	adds	r7, r3, r7
 80089f0:	b28b      	uxth	r3, r1
 80089f2:	1afb      	subs	r3, r7, r3
 80089f4:	0c09      	lsrs	r1, r1, #16
 80089f6:	0c2d      	lsrs	r5, r5, #16
 80089f8:	1a6d      	subs	r5, r5, r1
 80089fa:	1419      	asrs	r1, r3, #16
 80089fc:	1869      	adds	r1, r5, r1
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	140f      	asrs	r7, r1, #16
 8008a02:	0409      	lsls	r1, r1, #16
 8008a04:	4319      	orrs	r1, r3
 8008a06:	4663      	mov	r3, ip
 8008a08:	c302      	stmia	r3!, {r1}
 8008a0a:	469c      	mov	ip, r3
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	d8e8      	bhi.n	80089e4 <__mdiff+0x88>
 8008a12:	0031      	movs	r1, r6
 8008a14:	9c03      	ldr	r4, [sp, #12]
 8008a16:	3115      	adds	r1, #21
 8008a18:	2304      	movs	r3, #4
 8008a1a:	428c      	cmp	r4, r1
 8008a1c:	d304      	bcc.n	8008a28 <__mdiff+0xcc>
 8008a1e:	1ba3      	subs	r3, r4, r6
 8008a20:	3b15      	subs	r3, #21
 8008a22:	089b      	lsrs	r3, r3, #2
 8008a24:	3301      	adds	r3, #1
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	9901      	ldr	r1, [sp, #4]
 8008a2a:	18cd      	adds	r5, r1, r3
 8008a2c:	9905      	ldr	r1, [sp, #20]
 8008a2e:	002e      	movs	r6, r5
 8008a30:	18cb      	adds	r3, r1, r3
 8008a32:	469c      	mov	ip, r3
 8008a34:	9902      	ldr	r1, [sp, #8]
 8008a36:	428e      	cmp	r6, r1
 8008a38:	d310      	bcc.n	8008a5c <__mdiff+0x100>
 8008a3a:	9e02      	ldr	r6, [sp, #8]
 8008a3c:	1ee9      	subs	r1, r5, #3
 8008a3e:	2400      	movs	r4, #0
 8008a40:	428e      	cmp	r6, r1
 8008a42:	d304      	bcc.n	8008a4e <__mdiff+0xf2>
 8008a44:	0031      	movs	r1, r6
 8008a46:	3103      	adds	r1, #3
 8008a48:	1b49      	subs	r1, r1, r5
 8008a4a:	0889      	lsrs	r1, r1, #2
 8008a4c:	008c      	lsls	r4, r1, #2
 8008a4e:	191b      	adds	r3, r3, r4
 8008a50:	3b04      	subs	r3, #4
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d00f      	beq.n	8008a78 <__mdiff+0x11c>
 8008a58:	6110      	str	r0, [r2, #16]
 8008a5a:	e798      	b.n	800898e <__mdiff+0x32>
 8008a5c:	ce02      	ldmia	r6!, {r1}
 8008a5e:	b28c      	uxth	r4, r1
 8008a60:	19e4      	adds	r4, r4, r7
 8008a62:	0c0f      	lsrs	r7, r1, #16
 8008a64:	1421      	asrs	r1, r4, #16
 8008a66:	1879      	adds	r1, r7, r1
 8008a68:	b2a4      	uxth	r4, r4
 8008a6a:	140f      	asrs	r7, r1, #16
 8008a6c:	0409      	lsls	r1, r1, #16
 8008a6e:	4321      	orrs	r1, r4
 8008a70:	4664      	mov	r4, ip
 8008a72:	c402      	stmia	r4!, {r1}
 8008a74:	46a4      	mov	ip, r4
 8008a76:	e7dd      	b.n	8008a34 <__mdiff+0xd8>
 8008a78:	3801      	subs	r0, #1
 8008a7a:	e7e9      	b.n	8008a50 <__mdiff+0xf4>
 8008a7c:	0800b920 	.word	0x0800b920
 8008a80:	0800b931 	.word	0x0800b931
 8008a84:	00000237 	.word	0x00000237
 8008a88:	00000245 	.word	0x00000245

08008a8c <__d2b>:
 8008a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a8e:	2101      	movs	r1, #1
 8008a90:	0014      	movs	r4, r2
 8008a92:	001d      	movs	r5, r3
 8008a94:	9f08      	ldr	r7, [sp, #32]
 8008a96:	f7ff fcbf 	bl	8008418 <_Balloc>
 8008a9a:	1e06      	subs	r6, r0, #0
 8008a9c:	d105      	bne.n	8008aaa <__d2b+0x1e>
 8008a9e:	0032      	movs	r2, r6
 8008aa0:	4b24      	ldr	r3, [pc, #144]	; (8008b34 <__d2b+0xa8>)
 8008aa2:	4825      	ldr	r0, [pc, #148]	; (8008b38 <__d2b+0xac>)
 8008aa4:	4925      	ldr	r1, [pc, #148]	; (8008b3c <__d2b+0xb0>)
 8008aa6:	f000 fa97 	bl	8008fd8 <__assert_func>
 8008aaa:	032b      	lsls	r3, r5, #12
 8008aac:	006d      	lsls	r5, r5, #1
 8008aae:	0b1b      	lsrs	r3, r3, #12
 8008ab0:	0d6d      	lsrs	r5, r5, #21
 8008ab2:	d125      	bne.n	8008b00 <__d2b+0x74>
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	2c00      	cmp	r4, #0
 8008ab8:	d028      	beq.n	8008b0c <__d2b+0x80>
 8008aba:	4668      	mov	r0, sp
 8008abc:	9400      	str	r4, [sp, #0]
 8008abe:	f7ff fd71 	bl	80085a4 <__lo0bits>
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	9900      	ldr	r1, [sp, #0]
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d01e      	beq.n	8008b08 <__d2b+0x7c>
 8008aca:	2220      	movs	r2, #32
 8008acc:	001c      	movs	r4, r3
 8008ace:	1a12      	subs	r2, r2, r0
 8008ad0:	4094      	lsls	r4, r2
 8008ad2:	0022      	movs	r2, r4
 8008ad4:	40c3      	lsrs	r3, r0
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	6172      	str	r2, [r6, #20]
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	9c01      	ldr	r4, [sp, #4]
 8008ade:	61b4      	str	r4, [r6, #24]
 8008ae0:	1e63      	subs	r3, r4, #1
 8008ae2:	419c      	sbcs	r4, r3
 8008ae4:	3401      	adds	r4, #1
 8008ae6:	6134      	str	r4, [r6, #16]
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	d017      	beq.n	8008b1c <__d2b+0x90>
 8008aec:	2435      	movs	r4, #53	; 0x35
 8008aee:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <__d2b+0xb4>)
 8008af0:	18ed      	adds	r5, r5, r3
 8008af2:	182d      	adds	r5, r5, r0
 8008af4:	603d      	str	r5, [r7, #0]
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	1a24      	subs	r4, r4, r0
 8008afa:	601c      	str	r4, [r3, #0]
 8008afc:	0030      	movs	r0, r6
 8008afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b00:	2280      	movs	r2, #128	; 0x80
 8008b02:	0352      	lsls	r2, r2, #13
 8008b04:	4313      	orrs	r3, r2
 8008b06:	e7d5      	b.n	8008ab4 <__d2b+0x28>
 8008b08:	6171      	str	r1, [r6, #20]
 8008b0a:	e7e7      	b.n	8008adc <__d2b+0x50>
 8008b0c:	a801      	add	r0, sp, #4
 8008b0e:	f7ff fd49 	bl	80085a4 <__lo0bits>
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	2401      	movs	r4, #1
 8008b16:	6173      	str	r3, [r6, #20]
 8008b18:	3020      	adds	r0, #32
 8008b1a:	e7e4      	b.n	8008ae6 <__d2b+0x5a>
 8008b1c:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <__d2b+0xb8>)
 8008b1e:	18c0      	adds	r0, r0, r3
 8008b20:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <__d2b+0xbc>)
 8008b22:	6038      	str	r0, [r7, #0]
 8008b24:	18e3      	adds	r3, r4, r3
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	18f3      	adds	r3, r6, r3
 8008b2a:	6958      	ldr	r0, [r3, #20]
 8008b2c:	f7ff fd20 	bl	8008570 <__hi0bits>
 8008b30:	0164      	lsls	r4, r4, #5
 8008b32:	e7e0      	b.n	8008af6 <__d2b+0x6a>
 8008b34:	0800b920 	.word	0x0800b920
 8008b38:	0800b931 	.word	0x0800b931
 8008b3c:	0000030f 	.word	0x0000030f
 8008b40:	fffffbcd 	.word	0xfffffbcd
 8008b44:	fffffbce 	.word	0xfffffbce
 8008b48:	3fffffff 	.word	0x3fffffff

08008b4c <__ssputs_r>:
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	9203      	str	r2, [sp, #12]
 8008b54:	688e      	ldr	r6, [r1, #8]
 8008b56:	9a01      	ldr	r2, [sp, #4]
 8008b58:	0007      	movs	r7, r0
 8008b5a:	000c      	movs	r4, r1
 8008b5c:	680b      	ldr	r3, [r1, #0]
 8008b5e:	4296      	cmp	r6, r2
 8008b60:	d831      	bhi.n	8008bc6 <__ssputs_r+0x7a>
 8008b62:	898a      	ldrh	r2, [r1, #12]
 8008b64:	2190      	movs	r1, #144	; 0x90
 8008b66:	00c9      	lsls	r1, r1, #3
 8008b68:	420a      	tst	r2, r1
 8008b6a:	d029      	beq.n	8008bc0 <__ssputs_r+0x74>
 8008b6c:	2003      	movs	r0, #3
 8008b6e:	6921      	ldr	r1, [r4, #16]
 8008b70:	1a5b      	subs	r3, r3, r1
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	6963      	ldr	r3, [r4, #20]
 8008b76:	4343      	muls	r3, r0
 8008b78:	0fdd      	lsrs	r5, r3, #31
 8008b7a:	18ed      	adds	r5, r5, r3
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	9802      	ldr	r0, [sp, #8]
 8008b80:	3301      	adds	r3, #1
 8008b82:	181b      	adds	r3, r3, r0
 8008b84:	106d      	asrs	r5, r5, #1
 8008b86:	42ab      	cmp	r3, r5
 8008b88:	d900      	bls.n	8008b8c <__ssputs_r+0x40>
 8008b8a:	001d      	movs	r5, r3
 8008b8c:	0552      	lsls	r2, r2, #21
 8008b8e:	d529      	bpl.n	8008be4 <__ssputs_r+0x98>
 8008b90:	0029      	movs	r1, r5
 8008b92:	0038      	movs	r0, r7
 8008b94:	f7ff fbae 	bl	80082f4 <_malloc_r>
 8008b98:	1e06      	subs	r6, r0, #0
 8008b9a:	d02d      	beq.n	8008bf8 <__ssputs_r+0xac>
 8008b9c:	9a02      	ldr	r2, [sp, #8]
 8008b9e:	6921      	ldr	r1, [r4, #16]
 8008ba0:	f000 fa10 	bl	8008fc4 <memcpy>
 8008ba4:	89a2      	ldrh	r2, [r4, #12]
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <__ssputs_r+0xc0>)
 8008ba8:	401a      	ands	r2, r3
 8008baa:	2380      	movs	r3, #128	; 0x80
 8008bac:	4313      	orrs	r3, r2
 8008bae:	81a3      	strh	r3, [r4, #12]
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	6126      	str	r6, [r4, #16]
 8008bb4:	18f6      	adds	r6, r6, r3
 8008bb6:	6026      	str	r6, [r4, #0]
 8008bb8:	6165      	str	r5, [r4, #20]
 8008bba:	9e01      	ldr	r6, [sp, #4]
 8008bbc:	1aed      	subs	r5, r5, r3
 8008bbe:	60a5      	str	r5, [r4, #8]
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	429e      	cmp	r6, r3
 8008bc4:	d900      	bls.n	8008bc8 <__ssputs_r+0x7c>
 8008bc6:	9e01      	ldr	r6, [sp, #4]
 8008bc8:	0032      	movs	r2, r6
 8008bca:	9903      	ldr	r1, [sp, #12]
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	f000 f9d4 	bl	8008f7a <memmove>
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	1b9b      	subs	r3, r3, r6
 8008bd8:	60a3      	str	r3, [r4, #8]
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	199b      	adds	r3, r3, r6
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	b005      	add	sp, #20
 8008be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be4:	002a      	movs	r2, r5
 8008be6:	0038      	movs	r0, r7
 8008be8:	f000 fa53 	bl	8009092 <_realloc_r>
 8008bec:	1e06      	subs	r6, r0, #0
 8008bee:	d1df      	bne.n	8008bb0 <__ssputs_r+0x64>
 8008bf0:	0038      	movs	r0, r7
 8008bf2:	6921      	ldr	r1, [r4, #16]
 8008bf4:	f7ff fb08 	bl	8008208 <_free_r>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	603b      	str	r3, [r7, #0]
 8008bfe:	89a2      	ldrh	r2, [r4, #12]
 8008c00:	3334      	adds	r3, #52	; 0x34
 8008c02:	4313      	orrs	r3, r2
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	4240      	negs	r0, r0
 8008c08:	e7ea      	b.n	8008be0 <__ssputs_r+0x94>
 8008c0a:	46c0      	nop			; (mov r8, r8)
 8008c0c:	fffffb7f 	.word	0xfffffb7f

08008c10 <_svfiprintf_r>:
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	b0a1      	sub	sp, #132	; 0x84
 8008c14:	9003      	str	r0, [sp, #12]
 8008c16:	001d      	movs	r5, r3
 8008c18:	898b      	ldrh	r3, [r1, #12]
 8008c1a:	000f      	movs	r7, r1
 8008c1c:	0016      	movs	r6, r2
 8008c1e:	061b      	lsls	r3, r3, #24
 8008c20:	d511      	bpl.n	8008c46 <_svfiprintf_r+0x36>
 8008c22:	690b      	ldr	r3, [r1, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10e      	bne.n	8008c46 <_svfiprintf_r+0x36>
 8008c28:	2140      	movs	r1, #64	; 0x40
 8008c2a:	f7ff fb63 	bl	80082f4 <_malloc_r>
 8008c2e:	6038      	str	r0, [r7, #0]
 8008c30:	6138      	str	r0, [r7, #16]
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d105      	bne.n	8008c42 <_svfiprintf_r+0x32>
 8008c36:	230c      	movs	r3, #12
 8008c38:	9a03      	ldr	r2, [sp, #12]
 8008c3a:	3801      	subs	r0, #1
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	b021      	add	sp, #132	; 0x84
 8008c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c42:	2340      	movs	r3, #64	; 0x40
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	2300      	movs	r3, #0
 8008c48:	ac08      	add	r4, sp, #32
 8008c4a:	6163      	str	r3, [r4, #20]
 8008c4c:	3320      	adds	r3, #32
 8008c4e:	7663      	strb	r3, [r4, #25]
 8008c50:	3310      	adds	r3, #16
 8008c52:	76a3      	strb	r3, [r4, #26]
 8008c54:	9507      	str	r5, [sp, #28]
 8008c56:	0035      	movs	r5, r6
 8008c58:	782b      	ldrb	r3, [r5, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <_svfiprintf_r+0x52>
 8008c5e:	2b25      	cmp	r3, #37	; 0x25
 8008c60:	d148      	bne.n	8008cf4 <_svfiprintf_r+0xe4>
 8008c62:	1bab      	subs	r3, r5, r6
 8008c64:	9305      	str	r3, [sp, #20]
 8008c66:	42b5      	cmp	r5, r6
 8008c68:	d00b      	beq.n	8008c82 <_svfiprintf_r+0x72>
 8008c6a:	0032      	movs	r2, r6
 8008c6c:	0039      	movs	r1, r7
 8008c6e:	9803      	ldr	r0, [sp, #12]
 8008c70:	f7ff ff6c 	bl	8008b4c <__ssputs_r>
 8008c74:	3001      	adds	r0, #1
 8008c76:	d100      	bne.n	8008c7a <_svfiprintf_r+0x6a>
 8008c78:	e0af      	b.n	8008dda <_svfiprintf_r+0x1ca>
 8008c7a:	6963      	ldr	r3, [r4, #20]
 8008c7c:	9a05      	ldr	r2, [sp, #20]
 8008c7e:	189b      	adds	r3, r3, r2
 8008c80:	6163      	str	r3, [r4, #20]
 8008c82:	782b      	ldrb	r3, [r5, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d100      	bne.n	8008c8a <_svfiprintf_r+0x7a>
 8008c88:	e0a7      	b.n	8008dda <_svfiprintf_r+0x1ca>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4252      	negs	r2, r2
 8008c90:	6062      	str	r2, [r4, #4]
 8008c92:	a904      	add	r1, sp, #16
 8008c94:	3254      	adds	r2, #84	; 0x54
 8008c96:	1852      	adds	r2, r2, r1
 8008c98:	1c6e      	adds	r6, r5, #1
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	60e3      	str	r3, [r4, #12]
 8008c9e:	60a3      	str	r3, [r4, #8]
 8008ca0:	7013      	strb	r3, [r2, #0]
 8008ca2:	65a3      	str	r3, [r4, #88]	; 0x58
 8008ca4:	4b55      	ldr	r3, [pc, #340]	; (8008dfc <_svfiprintf_r+0x1ec>)
 8008ca6:	2205      	movs	r2, #5
 8008ca8:	0018      	movs	r0, r3
 8008caa:	7831      	ldrb	r1, [r6, #0]
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	f7fe fc02 	bl	80074b6 <memchr>
 8008cb2:	1c75      	adds	r5, r6, #1
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d11f      	bne.n	8008cf8 <_svfiprintf_r+0xe8>
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	06d3      	lsls	r3, r2, #27
 8008cbc:	d504      	bpl.n	8008cc8 <_svfiprintf_r+0xb8>
 8008cbe:	2353      	movs	r3, #83	; 0x53
 8008cc0:	a904      	add	r1, sp, #16
 8008cc2:	185b      	adds	r3, r3, r1
 8008cc4:	2120      	movs	r1, #32
 8008cc6:	7019      	strb	r1, [r3, #0]
 8008cc8:	0713      	lsls	r3, r2, #28
 8008cca:	d504      	bpl.n	8008cd6 <_svfiprintf_r+0xc6>
 8008ccc:	2353      	movs	r3, #83	; 0x53
 8008cce:	a904      	add	r1, sp, #16
 8008cd0:	185b      	adds	r3, r3, r1
 8008cd2:	212b      	movs	r1, #43	; 0x2b
 8008cd4:	7019      	strb	r1, [r3, #0]
 8008cd6:	7833      	ldrb	r3, [r6, #0]
 8008cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cda:	d016      	beq.n	8008d0a <_svfiprintf_r+0xfa>
 8008cdc:	0035      	movs	r5, r6
 8008cde:	2100      	movs	r1, #0
 8008ce0:	200a      	movs	r0, #10
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	782a      	ldrb	r2, [r5, #0]
 8008ce6:	1c6e      	adds	r6, r5, #1
 8008ce8:	3a30      	subs	r2, #48	; 0x30
 8008cea:	2a09      	cmp	r2, #9
 8008cec:	d94e      	bls.n	8008d8c <_svfiprintf_r+0x17c>
 8008cee:	2900      	cmp	r1, #0
 8008cf0:	d111      	bne.n	8008d16 <_svfiprintf_r+0x106>
 8008cf2:	e017      	b.n	8008d24 <_svfiprintf_r+0x114>
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	e7af      	b.n	8008c58 <_svfiprintf_r+0x48>
 8008cf8:	9b05      	ldr	r3, [sp, #20]
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4083      	lsls	r3, r0
 8008d02:	4313      	orrs	r3, r2
 8008d04:	002e      	movs	r6, r5
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	e7cc      	b.n	8008ca4 <_svfiprintf_r+0x94>
 8008d0a:	9b07      	ldr	r3, [sp, #28]
 8008d0c:	1d19      	adds	r1, r3, #4
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	9107      	str	r1, [sp, #28]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	db01      	blt.n	8008d1a <_svfiprintf_r+0x10a>
 8008d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d18:	e004      	b.n	8008d24 <_svfiprintf_r+0x114>
 8008d1a:	425b      	negs	r3, r3
 8008d1c:	60e3      	str	r3, [r4, #12]
 8008d1e:	2302      	movs	r3, #2
 8008d20:	4313      	orrs	r3, r2
 8008d22:	6023      	str	r3, [r4, #0]
 8008d24:	782b      	ldrb	r3, [r5, #0]
 8008d26:	2b2e      	cmp	r3, #46	; 0x2e
 8008d28:	d10a      	bne.n	8008d40 <_svfiprintf_r+0x130>
 8008d2a:	786b      	ldrb	r3, [r5, #1]
 8008d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d2e:	d135      	bne.n	8008d9c <_svfiprintf_r+0x18c>
 8008d30:	9b07      	ldr	r3, [sp, #28]
 8008d32:	3502      	adds	r5, #2
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	9207      	str	r2, [sp, #28]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db2b      	blt.n	8008d96 <_svfiprintf_r+0x186>
 8008d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d40:	4e2f      	ldr	r6, [pc, #188]	; (8008e00 <_svfiprintf_r+0x1f0>)
 8008d42:	2203      	movs	r2, #3
 8008d44:	0030      	movs	r0, r6
 8008d46:	7829      	ldrb	r1, [r5, #0]
 8008d48:	f7fe fbb5 	bl	80074b6 <memchr>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d006      	beq.n	8008d5e <_svfiprintf_r+0x14e>
 8008d50:	2340      	movs	r3, #64	; 0x40
 8008d52:	1b80      	subs	r0, r0, r6
 8008d54:	4083      	lsls	r3, r0
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	3501      	adds	r5, #1
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	7829      	ldrb	r1, [r5, #0]
 8008d60:	2206      	movs	r2, #6
 8008d62:	4828      	ldr	r0, [pc, #160]	; (8008e04 <_svfiprintf_r+0x1f4>)
 8008d64:	1c6e      	adds	r6, r5, #1
 8008d66:	7621      	strb	r1, [r4, #24]
 8008d68:	f7fe fba5 	bl	80074b6 <memchr>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d03c      	beq.n	8008dea <_svfiprintf_r+0x1da>
 8008d70:	4b25      	ldr	r3, [pc, #148]	; (8008e08 <_svfiprintf_r+0x1f8>)
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d125      	bne.n	8008dc2 <_svfiprintf_r+0x1b2>
 8008d76:	2207      	movs	r2, #7
 8008d78:	9b07      	ldr	r3, [sp, #28]
 8008d7a:	3307      	adds	r3, #7
 8008d7c:	4393      	bics	r3, r2
 8008d7e:	3308      	adds	r3, #8
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	6963      	ldr	r3, [r4, #20]
 8008d84:	9a04      	ldr	r2, [sp, #16]
 8008d86:	189b      	adds	r3, r3, r2
 8008d88:	6163      	str	r3, [r4, #20]
 8008d8a:	e764      	b.n	8008c56 <_svfiprintf_r+0x46>
 8008d8c:	4343      	muls	r3, r0
 8008d8e:	0035      	movs	r5, r6
 8008d90:	2101      	movs	r1, #1
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	e7a6      	b.n	8008ce4 <_svfiprintf_r+0xd4>
 8008d96:	2301      	movs	r3, #1
 8008d98:	425b      	negs	r3, r3
 8008d9a:	e7d0      	b.n	8008d3e <_svfiprintf_r+0x12e>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	200a      	movs	r0, #10
 8008da0:	001a      	movs	r2, r3
 8008da2:	3501      	adds	r5, #1
 8008da4:	6063      	str	r3, [r4, #4]
 8008da6:	7829      	ldrb	r1, [r5, #0]
 8008da8:	1c6e      	adds	r6, r5, #1
 8008daa:	3930      	subs	r1, #48	; 0x30
 8008dac:	2909      	cmp	r1, #9
 8008dae:	d903      	bls.n	8008db8 <_svfiprintf_r+0x1a8>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0c5      	beq.n	8008d40 <_svfiprintf_r+0x130>
 8008db4:	9209      	str	r2, [sp, #36]	; 0x24
 8008db6:	e7c3      	b.n	8008d40 <_svfiprintf_r+0x130>
 8008db8:	4342      	muls	r2, r0
 8008dba:	0035      	movs	r5, r6
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	1852      	adds	r2, r2, r1
 8008dc0:	e7f1      	b.n	8008da6 <_svfiprintf_r+0x196>
 8008dc2:	aa07      	add	r2, sp, #28
 8008dc4:	9200      	str	r2, [sp, #0]
 8008dc6:	0021      	movs	r1, r4
 8008dc8:	003a      	movs	r2, r7
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <_svfiprintf_r+0x1fc>)
 8008dcc:	9803      	ldr	r0, [sp, #12]
 8008dce:	f7fd fde5 	bl	800699c <_printf_float>
 8008dd2:	9004      	str	r0, [sp, #16]
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	d1d3      	bne.n	8008d82 <_svfiprintf_r+0x172>
 8008dda:	89bb      	ldrh	r3, [r7, #12]
 8008ddc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008dde:	065b      	lsls	r3, r3, #25
 8008de0:	d400      	bmi.n	8008de4 <_svfiprintf_r+0x1d4>
 8008de2:	e72c      	b.n	8008c3e <_svfiprintf_r+0x2e>
 8008de4:	2001      	movs	r0, #1
 8008de6:	4240      	negs	r0, r0
 8008de8:	e729      	b.n	8008c3e <_svfiprintf_r+0x2e>
 8008dea:	aa07      	add	r2, sp, #28
 8008dec:	9200      	str	r2, [sp, #0]
 8008dee:	0021      	movs	r1, r4
 8008df0:	003a      	movs	r2, r7
 8008df2:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <_svfiprintf_r+0x1fc>)
 8008df4:	9803      	ldr	r0, [sp, #12]
 8008df6:	f7fe f897 	bl	8006f28 <_printf_i>
 8008dfa:	e7ea      	b.n	8008dd2 <_svfiprintf_r+0x1c2>
 8008dfc:	0800ba8c 	.word	0x0800ba8c
 8008e00:	0800ba92 	.word	0x0800ba92
 8008e04:	0800ba96 	.word	0x0800ba96
 8008e08:	0800699d 	.word	0x0800699d
 8008e0c:	08008b4d 	.word	0x08008b4d

08008e10 <__sflush_r>:
 8008e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e12:	898b      	ldrh	r3, [r1, #12]
 8008e14:	0005      	movs	r5, r0
 8008e16:	000c      	movs	r4, r1
 8008e18:	071a      	lsls	r2, r3, #28
 8008e1a:	d45c      	bmi.n	8008ed6 <__sflush_r+0xc6>
 8008e1c:	684a      	ldr	r2, [r1, #4]
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	dc04      	bgt.n	8008e2c <__sflush_r+0x1c>
 8008e22:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008e24:	2a00      	cmp	r2, #0
 8008e26:	dc01      	bgt.n	8008e2c <__sflush_r+0x1c>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e2e:	2f00      	cmp	r7, #0
 8008e30:	d0fa      	beq.n	8008e28 <__sflush_r+0x18>
 8008e32:	2200      	movs	r2, #0
 8008e34:	2080      	movs	r0, #128	; 0x80
 8008e36:	682e      	ldr	r6, [r5, #0]
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	001a      	movs	r2, r3
 8008e3c:	0140      	lsls	r0, r0, #5
 8008e3e:	6a21      	ldr	r1, [r4, #32]
 8008e40:	4002      	ands	r2, r0
 8008e42:	4203      	tst	r3, r0
 8008e44:	d034      	beq.n	8008eb0 <__sflush_r+0xa0>
 8008e46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	075b      	lsls	r3, r3, #29
 8008e4c:	d506      	bpl.n	8008e5c <__sflush_r+0x4c>
 8008e4e:	6863      	ldr	r3, [r4, #4]
 8008e50:	1ac0      	subs	r0, r0, r3
 8008e52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <__sflush_r+0x4c>
 8008e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e5a:	1ac0      	subs	r0, r0, r3
 8008e5c:	0002      	movs	r2, r0
 8008e5e:	2300      	movs	r3, #0
 8008e60:	0028      	movs	r0, r5
 8008e62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e64:	6a21      	ldr	r1, [r4, #32]
 8008e66:	47b8      	blx	r7
 8008e68:	89a2      	ldrh	r2, [r4, #12]
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d106      	bne.n	8008e7c <__sflush_r+0x6c>
 8008e6e:	6829      	ldr	r1, [r5, #0]
 8008e70:	291d      	cmp	r1, #29
 8008e72:	d82c      	bhi.n	8008ece <__sflush_r+0xbe>
 8008e74:	4b2a      	ldr	r3, [pc, #168]	; (8008f20 <__sflush_r+0x110>)
 8008e76:	410b      	asrs	r3, r1
 8008e78:	07db      	lsls	r3, r3, #31
 8008e7a:	d428      	bmi.n	8008ece <__sflush_r+0xbe>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	04d2      	lsls	r2, r2, #19
 8008e86:	d505      	bpl.n	8008e94 <__sflush_r+0x84>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <__sflush_r+0x82>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d100      	bne.n	8008e94 <__sflush_r+0x84>
 8008e92:	6560      	str	r0, [r4, #84]	; 0x54
 8008e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e96:	602e      	str	r6, [r5, #0]
 8008e98:	2900      	cmp	r1, #0
 8008e9a:	d0c5      	beq.n	8008e28 <__sflush_r+0x18>
 8008e9c:	0023      	movs	r3, r4
 8008e9e:	3344      	adds	r3, #68	; 0x44
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	d002      	beq.n	8008eaa <__sflush_r+0x9a>
 8008ea4:	0028      	movs	r0, r5
 8008ea6:	f7ff f9af 	bl	8008208 <_free_r>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	6360      	str	r0, [r4, #52]	; 0x34
 8008eae:	e7bc      	b.n	8008e2a <__sflush_r+0x1a>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	0028      	movs	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d1c6      	bne.n	8008e48 <__sflush_r+0x38>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0c3      	beq.n	8008e48 <__sflush_r+0x38>
 8008ec0:	2b1d      	cmp	r3, #29
 8008ec2:	d001      	beq.n	8008ec8 <__sflush_r+0xb8>
 8008ec4:	2b16      	cmp	r3, #22
 8008ec6:	d101      	bne.n	8008ecc <__sflush_r+0xbc>
 8008ec8:	602e      	str	r6, [r5, #0]
 8008eca:	e7ad      	b.n	8008e28 <__sflush_r+0x18>
 8008ecc:	89a2      	ldrh	r2, [r4, #12]
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	e7a9      	b.n	8008e2a <__sflush_r+0x1a>
 8008ed6:	690e      	ldr	r6, [r1, #16]
 8008ed8:	2e00      	cmp	r6, #0
 8008eda:	d0a5      	beq.n	8008e28 <__sflush_r+0x18>
 8008edc:	680f      	ldr	r7, [r1, #0]
 8008ede:	600e      	str	r6, [r1, #0]
 8008ee0:	1bba      	subs	r2, r7, r6
 8008ee2:	9201      	str	r2, [sp, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	079b      	lsls	r3, r3, #30
 8008ee8:	d100      	bne.n	8008eec <__sflush_r+0xdc>
 8008eea:	694a      	ldr	r2, [r1, #20]
 8008eec:	60a2      	str	r2, [r4, #8]
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dd99      	ble.n	8008e28 <__sflush_r+0x18>
 8008ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ef6:	0032      	movs	r2, r6
 8008ef8:	001f      	movs	r7, r3
 8008efa:	0028      	movs	r0, r5
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	6a21      	ldr	r1, [r4, #32]
 8008f00:	47b8      	blx	r7
 8008f02:	2800      	cmp	r0, #0
 8008f04:	dc06      	bgt.n	8008f14 <__sflush_r+0x104>
 8008f06:	2340      	movs	r3, #64	; 0x40
 8008f08:	2001      	movs	r0, #1
 8008f0a:	89a2      	ldrh	r2, [r4, #12]
 8008f0c:	4240      	negs	r0, r0
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	e78a      	b.n	8008e2a <__sflush_r+0x1a>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	1836      	adds	r6, r6, r0
 8008f18:	1a1b      	subs	r3, r3, r0
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	e7e7      	b.n	8008eee <__sflush_r+0xde>
 8008f1e:	46c0      	nop			; (mov r8, r8)
 8008f20:	dfbffffe 	.word	0xdfbffffe

08008f24 <_fflush_r>:
 8008f24:	690b      	ldr	r3, [r1, #16]
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	0005      	movs	r5, r0
 8008f2a:	000c      	movs	r4, r1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <_fflush_r+0x12>
 8008f30:	2500      	movs	r5, #0
 8008f32:	0028      	movs	r0, r5
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d004      	beq.n	8008f44 <_fflush_r+0x20>
 8008f3a:	6a03      	ldr	r3, [r0, #32]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <_fflush_r+0x20>
 8008f40:	f7fe f992 	bl	8007268 <__sinit>
 8008f44:	220c      	movs	r2, #12
 8008f46:	5ea3      	ldrsh	r3, [r4, r2]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f1      	beq.n	8008f30 <_fflush_r+0xc>
 8008f4c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f4e:	07d2      	lsls	r2, r2, #31
 8008f50:	d404      	bmi.n	8008f5c <_fflush_r+0x38>
 8008f52:	059b      	lsls	r3, r3, #22
 8008f54:	d402      	bmi.n	8008f5c <_fflush_r+0x38>
 8008f56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f58:	f7fe faab 	bl	80074b2 <__retarget_lock_acquire_recursive>
 8008f5c:	0028      	movs	r0, r5
 8008f5e:	0021      	movs	r1, r4
 8008f60:	f7ff ff56 	bl	8008e10 <__sflush_r>
 8008f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f66:	0005      	movs	r5, r0
 8008f68:	07db      	lsls	r3, r3, #31
 8008f6a:	d4e2      	bmi.n	8008f32 <_fflush_r+0xe>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	059b      	lsls	r3, r3, #22
 8008f70:	d4df      	bmi.n	8008f32 <_fflush_r+0xe>
 8008f72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f74:	f7fe fa9e 	bl	80074b4 <__retarget_lock_release_recursive>
 8008f78:	e7db      	b.n	8008f32 <_fflush_r+0xe>

08008f7a <memmove>:
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	4288      	cmp	r0, r1
 8008f7e:	d902      	bls.n	8008f86 <memmove+0xc>
 8008f80:	188b      	adds	r3, r1, r2
 8008f82:	4298      	cmp	r0, r3
 8008f84:	d303      	bcc.n	8008f8e <memmove+0x14>
 8008f86:	2300      	movs	r3, #0
 8008f88:	e007      	b.n	8008f9a <memmove+0x20>
 8008f8a:	5c8b      	ldrb	r3, [r1, r2]
 8008f8c:	5483      	strb	r3, [r0, r2]
 8008f8e:	3a01      	subs	r2, #1
 8008f90:	d2fb      	bcs.n	8008f8a <memmove+0x10>
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	5ccc      	ldrb	r4, [r1, r3]
 8008f96:	54c4      	strb	r4, [r0, r3]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d1fa      	bne.n	8008f94 <memmove+0x1a>
 8008f9e:	e7f8      	b.n	8008f92 <memmove+0x18>

08008fa0 <_sbrk_r>:
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	b570      	push	{r4, r5, r6, lr}
 8008fa4:	4d06      	ldr	r5, [pc, #24]	; (8008fc0 <_sbrk_r+0x20>)
 8008fa6:	0004      	movs	r4, r0
 8008fa8:	0008      	movs	r0, r1
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	f7fc f87c 	bl	80050a8 <_sbrk>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d103      	bne.n	8008fbc <_sbrk_r+0x1c>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d000      	beq.n	8008fbc <_sbrk_r+0x1c>
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	200008d4 	.word	0x200008d4

08008fc4 <memcpy>:
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d100      	bne.n	8008fce <memcpy+0xa>
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	5ccc      	ldrb	r4, [r1, r3]
 8008fd0:	54c4      	strb	r4, [r0, r3]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	e7f8      	b.n	8008fc8 <memcpy+0x4>
	...

08008fd8 <__assert_func>:
 8008fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008fda:	0014      	movs	r4, r2
 8008fdc:	001a      	movs	r2, r3
 8008fde:	4b09      	ldr	r3, [pc, #36]	; (8009004 <__assert_func+0x2c>)
 8008fe0:	0005      	movs	r5, r0
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	000e      	movs	r6, r1
 8008fe6:	68d8      	ldr	r0, [r3, #12]
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <__assert_func+0x30>)
 8008fea:	2c00      	cmp	r4, #0
 8008fec:	d101      	bne.n	8008ff2 <__assert_func+0x1a>
 8008fee:	4b07      	ldr	r3, [pc, #28]	; (800900c <__assert_func+0x34>)
 8008ff0:	001c      	movs	r4, r3
 8008ff2:	4907      	ldr	r1, [pc, #28]	; (8009010 <__assert_func+0x38>)
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	9402      	str	r4, [sp, #8]
 8008ff8:	002b      	movs	r3, r5
 8008ffa:	9600      	str	r6, [sp, #0]
 8008ffc:	f000 f886 	bl	800910c <fiprintf>
 8009000:	f000 f894 	bl	800912c <abort>
 8009004:	2000010c 	.word	0x2000010c
 8009008:	0800baa7 	.word	0x0800baa7
 800900c:	0800bae2 	.word	0x0800bae2
 8009010:	0800bab4 	.word	0x0800bab4

08009014 <_calloc_r>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	0c0b      	lsrs	r3, r1, #16
 8009018:	0c15      	lsrs	r5, r2, #16
 800901a:	2b00      	cmp	r3, #0
 800901c:	d11e      	bne.n	800905c <_calloc_r+0x48>
 800901e:	2d00      	cmp	r5, #0
 8009020:	d10c      	bne.n	800903c <_calloc_r+0x28>
 8009022:	b289      	uxth	r1, r1
 8009024:	b294      	uxth	r4, r2
 8009026:	434c      	muls	r4, r1
 8009028:	0021      	movs	r1, r4
 800902a:	f7ff f963 	bl	80082f4 <_malloc_r>
 800902e:	1e05      	subs	r5, r0, #0
 8009030:	d01b      	beq.n	800906a <_calloc_r+0x56>
 8009032:	0022      	movs	r2, r4
 8009034:	2100      	movs	r1, #0
 8009036:	f7fe f9b7 	bl	80073a8 <memset>
 800903a:	e016      	b.n	800906a <_calloc_r+0x56>
 800903c:	1c2b      	adds	r3, r5, #0
 800903e:	1c0c      	adds	r4, r1, #0
 8009040:	b289      	uxth	r1, r1
 8009042:	b292      	uxth	r2, r2
 8009044:	434a      	muls	r2, r1
 8009046:	b2a1      	uxth	r1, r4
 8009048:	b29c      	uxth	r4, r3
 800904a:	434c      	muls	r4, r1
 800904c:	0c13      	lsrs	r3, r2, #16
 800904e:	18e4      	adds	r4, r4, r3
 8009050:	0c23      	lsrs	r3, r4, #16
 8009052:	d107      	bne.n	8009064 <_calloc_r+0x50>
 8009054:	0424      	lsls	r4, r4, #16
 8009056:	b292      	uxth	r2, r2
 8009058:	4314      	orrs	r4, r2
 800905a:	e7e5      	b.n	8009028 <_calloc_r+0x14>
 800905c:	2d00      	cmp	r5, #0
 800905e:	d101      	bne.n	8009064 <_calloc_r+0x50>
 8009060:	1c14      	adds	r4, r2, #0
 8009062:	e7ed      	b.n	8009040 <_calloc_r+0x2c>
 8009064:	230c      	movs	r3, #12
 8009066:	2500      	movs	r5, #0
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	0028      	movs	r0, r5
 800906c:	bd70      	pop	{r4, r5, r6, pc}

0800906e <__ascii_mbtowc>:
 800906e:	b082      	sub	sp, #8
 8009070:	2900      	cmp	r1, #0
 8009072:	d100      	bne.n	8009076 <__ascii_mbtowc+0x8>
 8009074:	a901      	add	r1, sp, #4
 8009076:	1e10      	subs	r0, r2, #0
 8009078:	d006      	beq.n	8009088 <__ascii_mbtowc+0x1a>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d006      	beq.n	800908c <__ascii_mbtowc+0x1e>
 800907e:	7813      	ldrb	r3, [r2, #0]
 8009080:	600b      	str	r3, [r1, #0]
 8009082:	7810      	ldrb	r0, [r2, #0]
 8009084:	1e43      	subs	r3, r0, #1
 8009086:	4198      	sbcs	r0, r3
 8009088:	b002      	add	sp, #8
 800908a:	4770      	bx	lr
 800908c:	2002      	movs	r0, #2
 800908e:	4240      	negs	r0, r0
 8009090:	e7fa      	b.n	8009088 <__ascii_mbtowc+0x1a>

08009092 <_realloc_r>:
 8009092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009094:	0007      	movs	r7, r0
 8009096:	000e      	movs	r6, r1
 8009098:	0014      	movs	r4, r2
 800909a:	2900      	cmp	r1, #0
 800909c:	d105      	bne.n	80090aa <_realloc_r+0x18>
 800909e:	0011      	movs	r1, r2
 80090a0:	f7ff f928 	bl	80082f4 <_malloc_r>
 80090a4:	0005      	movs	r5, r0
 80090a6:	0028      	movs	r0, r5
 80090a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	d103      	bne.n	80090b6 <_realloc_r+0x24>
 80090ae:	f7ff f8ab 	bl	8008208 <_free_r>
 80090b2:	0025      	movs	r5, r4
 80090b4:	e7f7      	b.n	80090a6 <_realloc_r+0x14>
 80090b6:	f000 f840 	bl	800913a <_malloc_usable_size_r>
 80090ba:	9001      	str	r0, [sp, #4]
 80090bc:	4284      	cmp	r4, r0
 80090be:	d803      	bhi.n	80090c8 <_realloc_r+0x36>
 80090c0:	0035      	movs	r5, r6
 80090c2:	0843      	lsrs	r3, r0, #1
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	d3ee      	bcc.n	80090a6 <_realloc_r+0x14>
 80090c8:	0021      	movs	r1, r4
 80090ca:	0038      	movs	r0, r7
 80090cc:	f7ff f912 	bl	80082f4 <_malloc_r>
 80090d0:	1e05      	subs	r5, r0, #0
 80090d2:	d0e8      	beq.n	80090a6 <_realloc_r+0x14>
 80090d4:	9b01      	ldr	r3, [sp, #4]
 80090d6:	0022      	movs	r2, r4
 80090d8:	429c      	cmp	r4, r3
 80090da:	d900      	bls.n	80090de <_realloc_r+0x4c>
 80090dc:	001a      	movs	r2, r3
 80090de:	0031      	movs	r1, r6
 80090e0:	0028      	movs	r0, r5
 80090e2:	f7ff ff6f 	bl	8008fc4 <memcpy>
 80090e6:	0031      	movs	r1, r6
 80090e8:	0038      	movs	r0, r7
 80090ea:	f7ff f88d 	bl	8008208 <_free_r>
 80090ee:	e7da      	b.n	80090a6 <_realloc_r+0x14>

080090f0 <__ascii_wctomb>:
 80090f0:	0003      	movs	r3, r0
 80090f2:	1e08      	subs	r0, r1, #0
 80090f4:	d005      	beq.n	8009102 <__ascii_wctomb+0x12>
 80090f6:	2aff      	cmp	r2, #255	; 0xff
 80090f8:	d904      	bls.n	8009104 <__ascii_wctomb+0x14>
 80090fa:	228a      	movs	r2, #138	; 0x8a
 80090fc:	2001      	movs	r0, #1
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	4240      	negs	r0, r0
 8009102:	4770      	bx	lr
 8009104:	2001      	movs	r0, #1
 8009106:	700a      	strb	r2, [r1, #0]
 8009108:	e7fb      	b.n	8009102 <__ascii_wctomb+0x12>
	...

0800910c <fiprintf>:
 800910c:	b40e      	push	{r1, r2, r3}
 800910e:	b517      	push	{r0, r1, r2, r4, lr}
 8009110:	4c05      	ldr	r4, [pc, #20]	; (8009128 <fiprintf+0x1c>)
 8009112:	ab05      	add	r3, sp, #20
 8009114:	cb04      	ldmia	r3!, {r2}
 8009116:	0001      	movs	r1, r0
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	f000 f83c 	bl	8009198 <_vfiprintf_r>
 8009120:	bc1e      	pop	{r1, r2, r3, r4}
 8009122:	bc08      	pop	{r3}
 8009124:	b003      	add	sp, #12
 8009126:	4718      	bx	r3
 8009128:	2000010c 	.word	0x2000010c

0800912c <abort>:
 800912c:	2006      	movs	r0, #6
 800912e:	b510      	push	{r4, lr}
 8009130:	f000 fa1e 	bl	8009570 <raise>
 8009134:	2001      	movs	r0, #1
 8009136:	f7fb ff46 	bl	8004fc6 <_exit>

0800913a <_malloc_usable_size_r>:
 800913a:	1f0b      	subs	r3, r1, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	1f18      	subs	r0, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	da01      	bge.n	8009148 <_malloc_usable_size_r+0xe>
 8009144:	580b      	ldr	r3, [r1, r0]
 8009146:	18c0      	adds	r0, r0, r3
 8009148:	4770      	bx	lr

0800914a <__sfputc_r>:
 800914a:	6893      	ldr	r3, [r2, #8]
 800914c:	b510      	push	{r4, lr}
 800914e:	3b01      	subs	r3, #1
 8009150:	6093      	str	r3, [r2, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	da04      	bge.n	8009160 <__sfputc_r+0x16>
 8009156:	6994      	ldr	r4, [r2, #24]
 8009158:	42a3      	cmp	r3, r4
 800915a:	db07      	blt.n	800916c <__sfputc_r+0x22>
 800915c:	290a      	cmp	r1, #10
 800915e:	d005      	beq.n	800916c <__sfputc_r+0x22>
 8009160:	6813      	ldr	r3, [r2, #0]
 8009162:	1c58      	adds	r0, r3, #1
 8009164:	6010      	str	r0, [r2, #0]
 8009166:	7019      	strb	r1, [r3, #0]
 8009168:	0008      	movs	r0, r1
 800916a:	bd10      	pop	{r4, pc}
 800916c:	f000 f930 	bl	80093d0 <__swbuf_r>
 8009170:	0001      	movs	r1, r0
 8009172:	e7f9      	b.n	8009168 <__sfputc_r+0x1e>

08009174 <__sfputs_r>:
 8009174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009176:	0006      	movs	r6, r0
 8009178:	000f      	movs	r7, r1
 800917a:	0014      	movs	r4, r2
 800917c:	18d5      	adds	r5, r2, r3
 800917e:	42ac      	cmp	r4, r5
 8009180:	d101      	bne.n	8009186 <__sfputs_r+0x12>
 8009182:	2000      	movs	r0, #0
 8009184:	e007      	b.n	8009196 <__sfputs_r+0x22>
 8009186:	7821      	ldrb	r1, [r4, #0]
 8009188:	003a      	movs	r2, r7
 800918a:	0030      	movs	r0, r6
 800918c:	f7ff ffdd 	bl	800914a <__sfputc_r>
 8009190:	3401      	adds	r4, #1
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	d1f3      	bne.n	800917e <__sfputs_r+0xa>
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009198 <_vfiprintf_r>:
 8009198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919a:	b0a1      	sub	sp, #132	; 0x84
 800919c:	000f      	movs	r7, r1
 800919e:	0015      	movs	r5, r2
 80091a0:	001e      	movs	r6, r3
 80091a2:	9003      	str	r0, [sp, #12]
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d004      	beq.n	80091b2 <_vfiprintf_r+0x1a>
 80091a8:	6a03      	ldr	r3, [r0, #32]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d101      	bne.n	80091b2 <_vfiprintf_r+0x1a>
 80091ae:	f7fe f85b 	bl	8007268 <__sinit>
 80091b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091b4:	07db      	lsls	r3, r3, #31
 80091b6:	d405      	bmi.n	80091c4 <_vfiprintf_r+0x2c>
 80091b8:	89bb      	ldrh	r3, [r7, #12]
 80091ba:	059b      	lsls	r3, r3, #22
 80091bc:	d402      	bmi.n	80091c4 <_vfiprintf_r+0x2c>
 80091be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80091c0:	f7fe f977 	bl	80074b2 <__retarget_lock_acquire_recursive>
 80091c4:	89bb      	ldrh	r3, [r7, #12]
 80091c6:	071b      	lsls	r3, r3, #28
 80091c8:	d502      	bpl.n	80091d0 <_vfiprintf_r+0x38>
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d113      	bne.n	80091f8 <_vfiprintf_r+0x60>
 80091d0:	0039      	movs	r1, r7
 80091d2:	9803      	ldr	r0, [sp, #12]
 80091d4:	f000 f93e 	bl	8009454 <__swsetup_r>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d00d      	beq.n	80091f8 <_vfiprintf_r+0x60>
 80091dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d503      	bpl.n	80091ea <_vfiprintf_r+0x52>
 80091e2:	2001      	movs	r0, #1
 80091e4:	4240      	negs	r0, r0
 80091e6:	b021      	add	sp, #132	; 0x84
 80091e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ea:	89bb      	ldrh	r3, [r7, #12]
 80091ec:	059b      	lsls	r3, r3, #22
 80091ee:	d4f8      	bmi.n	80091e2 <_vfiprintf_r+0x4a>
 80091f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80091f2:	f7fe f95f 	bl	80074b4 <__retarget_lock_release_recursive>
 80091f6:	e7f4      	b.n	80091e2 <_vfiprintf_r+0x4a>
 80091f8:	2300      	movs	r3, #0
 80091fa:	ac08      	add	r4, sp, #32
 80091fc:	6163      	str	r3, [r4, #20]
 80091fe:	3320      	adds	r3, #32
 8009200:	7663      	strb	r3, [r4, #25]
 8009202:	3310      	adds	r3, #16
 8009204:	76a3      	strb	r3, [r4, #26]
 8009206:	9607      	str	r6, [sp, #28]
 8009208:	002e      	movs	r6, r5
 800920a:	7833      	ldrb	r3, [r6, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <_vfiprintf_r+0x7c>
 8009210:	2b25      	cmp	r3, #37	; 0x25
 8009212:	d148      	bne.n	80092a6 <_vfiprintf_r+0x10e>
 8009214:	1b73      	subs	r3, r6, r5
 8009216:	9305      	str	r3, [sp, #20]
 8009218:	42ae      	cmp	r6, r5
 800921a:	d00b      	beq.n	8009234 <_vfiprintf_r+0x9c>
 800921c:	002a      	movs	r2, r5
 800921e:	0039      	movs	r1, r7
 8009220:	9803      	ldr	r0, [sp, #12]
 8009222:	f7ff ffa7 	bl	8009174 <__sfputs_r>
 8009226:	3001      	adds	r0, #1
 8009228:	d100      	bne.n	800922c <_vfiprintf_r+0x94>
 800922a:	e0af      	b.n	800938c <_vfiprintf_r+0x1f4>
 800922c:	6963      	ldr	r3, [r4, #20]
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	189b      	adds	r3, r3, r2
 8009232:	6163      	str	r3, [r4, #20]
 8009234:	7833      	ldrb	r3, [r6, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d100      	bne.n	800923c <_vfiprintf_r+0xa4>
 800923a:	e0a7      	b.n	800938c <_vfiprintf_r+0x1f4>
 800923c:	2201      	movs	r2, #1
 800923e:	2300      	movs	r3, #0
 8009240:	4252      	negs	r2, r2
 8009242:	6062      	str	r2, [r4, #4]
 8009244:	a904      	add	r1, sp, #16
 8009246:	3254      	adds	r2, #84	; 0x54
 8009248:	1852      	adds	r2, r2, r1
 800924a:	1c75      	adds	r5, r6, #1
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	60e3      	str	r3, [r4, #12]
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	7013      	strb	r3, [r2, #0]
 8009254:	65a3      	str	r3, [r4, #88]	; 0x58
 8009256:	4b59      	ldr	r3, [pc, #356]	; (80093bc <_vfiprintf_r+0x224>)
 8009258:	2205      	movs	r2, #5
 800925a:	0018      	movs	r0, r3
 800925c:	7829      	ldrb	r1, [r5, #0]
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	f7fe f929 	bl	80074b6 <memchr>
 8009264:	1c6e      	adds	r6, r5, #1
 8009266:	2800      	cmp	r0, #0
 8009268:	d11f      	bne.n	80092aa <_vfiprintf_r+0x112>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	06d3      	lsls	r3, r2, #27
 800926e:	d504      	bpl.n	800927a <_vfiprintf_r+0xe2>
 8009270:	2353      	movs	r3, #83	; 0x53
 8009272:	a904      	add	r1, sp, #16
 8009274:	185b      	adds	r3, r3, r1
 8009276:	2120      	movs	r1, #32
 8009278:	7019      	strb	r1, [r3, #0]
 800927a:	0713      	lsls	r3, r2, #28
 800927c:	d504      	bpl.n	8009288 <_vfiprintf_r+0xf0>
 800927e:	2353      	movs	r3, #83	; 0x53
 8009280:	a904      	add	r1, sp, #16
 8009282:	185b      	adds	r3, r3, r1
 8009284:	212b      	movs	r1, #43	; 0x2b
 8009286:	7019      	strb	r1, [r3, #0]
 8009288:	782b      	ldrb	r3, [r5, #0]
 800928a:	2b2a      	cmp	r3, #42	; 0x2a
 800928c:	d016      	beq.n	80092bc <_vfiprintf_r+0x124>
 800928e:	002e      	movs	r6, r5
 8009290:	2100      	movs	r1, #0
 8009292:	200a      	movs	r0, #10
 8009294:	68e3      	ldr	r3, [r4, #12]
 8009296:	7832      	ldrb	r2, [r6, #0]
 8009298:	1c75      	adds	r5, r6, #1
 800929a:	3a30      	subs	r2, #48	; 0x30
 800929c:	2a09      	cmp	r2, #9
 800929e:	d94e      	bls.n	800933e <_vfiprintf_r+0x1a6>
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d111      	bne.n	80092c8 <_vfiprintf_r+0x130>
 80092a4:	e017      	b.n	80092d6 <_vfiprintf_r+0x13e>
 80092a6:	3601      	adds	r6, #1
 80092a8:	e7af      	b.n	800920a <_vfiprintf_r+0x72>
 80092aa:	9b05      	ldr	r3, [sp, #20]
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	1ac0      	subs	r0, r0, r3
 80092b0:	2301      	movs	r3, #1
 80092b2:	4083      	lsls	r3, r0
 80092b4:	4313      	orrs	r3, r2
 80092b6:	0035      	movs	r5, r6
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	e7cc      	b.n	8009256 <_vfiprintf_r+0xbe>
 80092bc:	9b07      	ldr	r3, [sp, #28]
 80092be:	1d19      	adds	r1, r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	9107      	str	r1, [sp, #28]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	db01      	blt.n	80092cc <_vfiprintf_r+0x134>
 80092c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80092ca:	e004      	b.n	80092d6 <_vfiprintf_r+0x13e>
 80092cc:	425b      	negs	r3, r3
 80092ce:	60e3      	str	r3, [r4, #12]
 80092d0:	2302      	movs	r3, #2
 80092d2:	4313      	orrs	r3, r2
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	7833      	ldrb	r3, [r6, #0]
 80092d8:	2b2e      	cmp	r3, #46	; 0x2e
 80092da:	d10a      	bne.n	80092f2 <_vfiprintf_r+0x15a>
 80092dc:	7873      	ldrb	r3, [r6, #1]
 80092de:	2b2a      	cmp	r3, #42	; 0x2a
 80092e0:	d135      	bne.n	800934e <_vfiprintf_r+0x1b6>
 80092e2:	9b07      	ldr	r3, [sp, #28]
 80092e4:	3602      	adds	r6, #2
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	9207      	str	r2, [sp, #28]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	db2b      	blt.n	8009348 <_vfiprintf_r+0x1b0>
 80092f0:	9309      	str	r3, [sp, #36]	; 0x24
 80092f2:	4d33      	ldr	r5, [pc, #204]	; (80093c0 <_vfiprintf_r+0x228>)
 80092f4:	2203      	movs	r2, #3
 80092f6:	0028      	movs	r0, r5
 80092f8:	7831      	ldrb	r1, [r6, #0]
 80092fa:	f7fe f8dc 	bl	80074b6 <memchr>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d006      	beq.n	8009310 <_vfiprintf_r+0x178>
 8009302:	2340      	movs	r3, #64	; 0x40
 8009304:	1b40      	subs	r0, r0, r5
 8009306:	4083      	lsls	r3, r0
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	3601      	adds	r6, #1
 800930c:	4313      	orrs	r3, r2
 800930e:	6023      	str	r3, [r4, #0]
 8009310:	7831      	ldrb	r1, [r6, #0]
 8009312:	2206      	movs	r2, #6
 8009314:	482b      	ldr	r0, [pc, #172]	; (80093c4 <_vfiprintf_r+0x22c>)
 8009316:	1c75      	adds	r5, r6, #1
 8009318:	7621      	strb	r1, [r4, #24]
 800931a:	f7fe f8cc 	bl	80074b6 <memchr>
 800931e:	2800      	cmp	r0, #0
 8009320:	d043      	beq.n	80093aa <_vfiprintf_r+0x212>
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <_vfiprintf_r+0x230>)
 8009324:	2b00      	cmp	r3, #0
 8009326:	d125      	bne.n	8009374 <_vfiprintf_r+0x1dc>
 8009328:	2207      	movs	r2, #7
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	3307      	adds	r3, #7
 800932e:	4393      	bics	r3, r2
 8009330:	3308      	adds	r3, #8
 8009332:	9307      	str	r3, [sp, #28]
 8009334:	6963      	ldr	r3, [r4, #20]
 8009336:	9a04      	ldr	r2, [sp, #16]
 8009338:	189b      	adds	r3, r3, r2
 800933a:	6163      	str	r3, [r4, #20]
 800933c:	e764      	b.n	8009208 <_vfiprintf_r+0x70>
 800933e:	4343      	muls	r3, r0
 8009340:	002e      	movs	r6, r5
 8009342:	2101      	movs	r1, #1
 8009344:	189b      	adds	r3, r3, r2
 8009346:	e7a6      	b.n	8009296 <_vfiprintf_r+0xfe>
 8009348:	2301      	movs	r3, #1
 800934a:	425b      	negs	r3, r3
 800934c:	e7d0      	b.n	80092f0 <_vfiprintf_r+0x158>
 800934e:	2300      	movs	r3, #0
 8009350:	200a      	movs	r0, #10
 8009352:	001a      	movs	r2, r3
 8009354:	3601      	adds	r6, #1
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	7831      	ldrb	r1, [r6, #0]
 800935a:	1c75      	adds	r5, r6, #1
 800935c:	3930      	subs	r1, #48	; 0x30
 800935e:	2909      	cmp	r1, #9
 8009360:	d903      	bls.n	800936a <_vfiprintf_r+0x1d2>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0c5      	beq.n	80092f2 <_vfiprintf_r+0x15a>
 8009366:	9209      	str	r2, [sp, #36]	; 0x24
 8009368:	e7c3      	b.n	80092f2 <_vfiprintf_r+0x15a>
 800936a:	4342      	muls	r2, r0
 800936c:	002e      	movs	r6, r5
 800936e:	2301      	movs	r3, #1
 8009370:	1852      	adds	r2, r2, r1
 8009372:	e7f1      	b.n	8009358 <_vfiprintf_r+0x1c0>
 8009374:	aa07      	add	r2, sp, #28
 8009376:	9200      	str	r2, [sp, #0]
 8009378:	0021      	movs	r1, r4
 800937a:	003a      	movs	r2, r7
 800937c:	4b13      	ldr	r3, [pc, #76]	; (80093cc <_vfiprintf_r+0x234>)
 800937e:	9803      	ldr	r0, [sp, #12]
 8009380:	f7fd fb0c 	bl	800699c <_printf_float>
 8009384:	9004      	str	r0, [sp, #16]
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	3301      	adds	r3, #1
 800938a:	d1d3      	bne.n	8009334 <_vfiprintf_r+0x19c>
 800938c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800938e:	07db      	lsls	r3, r3, #31
 8009390:	d405      	bmi.n	800939e <_vfiprintf_r+0x206>
 8009392:	89bb      	ldrh	r3, [r7, #12]
 8009394:	059b      	lsls	r3, r3, #22
 8009396:	d402      	bmi.n	800939e <_vfiprintf_r+0x206>
 8009398:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800939a:	f7fe f88b 	bl	80074b4 <__retarget_lock_release_recursive>
 800939e:	89bb      	ldrh	r3, [r7, #12]
 80093a0:	065b      	lsls	r3, r3, #25
 80093a2:	d500      	bpl.n	80093a6 <_vfiprintf_r+0x20e>
 80093a4:	e71d      	b.n	80091e2 <_vfiprintf_r+0x4a>
 80093a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093a8:	e71d      	b.n	80091e6 <_vfiprintf_r+0x4e>
 80093aa:	aa07      	add	r2, sp, #28
 80093ac:	9200      	str	r2, [sp, #0]
 80093ae:	0021      	movs	r1, r4
 80093b0:	003a      	movs	r2, r7
 80093b2:	4b06      	ldr	r3, [pc, #24]	; (80093cc <_vfiprintf_r+0x234>)
 80093b4:	9803      	ldr	r0, [sp, #12]
 80093b6:	f7fd fdb7 	bl	8006f28 <_printf_i>
 80093ba:	e7e3      	b.n	8009384 <_vfiprintf_r+0x1ec>
 80093bc:	0800ba8c 	.word	0x0800ba8c
 80093c0:	0800ba92 	.word	0x0800ba92
 80093c4:	0800ba96 	.word	0x0800ba96
 80093c8:	0800699d 	.word	0x0800699d
 80093cc:	08009175 	.word	0x08009175

080093d0 <__swbuf_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	0006      	movs	r6, r0
 80093d4:	000d      	movs	r5, r1
 80093d6:	0014      	movs	r4, r2
 80093d8:	2800      	cmp	r0, #0
 80093da:	d004      	beq.n	80093e6 <__swbuf_r+0x16>
 80093dc:	6a03      	ldr	r3, [r0, #32]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <__swbuf_r+0x16>
 80093e2:	f7fd ff41 	bl	8007268 <__sinit>
 80093e6:	69a3      	ldr	r3, [r4, #24]
 80093e8:	60a3      	str	r3, [r4, #8]
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	071b      	lsls	r3, r3, #28
 80093ee:	d528      	bpl.n	8009442 <__swbuf_r+0x72>
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d025      	beq.n	8009442 <__swbuf_r+0x72>
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	6820      	ldr	r0, [r4, #0]
 80093fa:	b2ef      	uxtb	r7, r5
 80093fc:	1ac0      	subs	r0, r0, r3
 80093fe:	6963      	ldr	r3, [r4, #20]
 8009400:	b2ed      	uxtb	r5, r5
 8009402:	4283      	cmp	r3, r0
 8009404:	dc05      	bgt.n	8009412 <__swbuf_r+0x42>
 8009406:	0021      	movs	r1, r4
 8009408:	0030      	movs	r0, r6
 800940a:	f7ff fd8b 	bl	8008f24 <_fflush_r>
 800940e:	2800      	cmp	r0, #0
 8009410:	d11d      	bne.n	800944e <__swbuf_r+0x7e>
 8009412:	68a3      	ldr	r3, [r4, #8]
 8009414:	3001      	adds	r0, #1
 8009416:	3b01      	subs	r3, #1
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	6022      	str	r2, [r4, #0]
 8009420:	701f      	strb	r7, [r3, #0]
 8009422:	6963      	ldr	r3, [r4, #20]
 8009424:	4283      	cmp	r3, r0
 8009426:	d004      	beq.n	8009432 <__swbuf_r+0x62>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	07db      	lsls	r3, r3, #31
 800942c:	d507      	bpl.n	800943e <__swbuf_r+0x6e>
 800942e:	2d0a      	cmp	r5, #10
 8009430:	d105      	bne.n	800943e <__swbuf_r+0x6e>
 8009432:	0021      	movs	r1, r4
 8009434:	0030      	movs	r0, r6
 8009436:	f7ff fd75 	bl	8008f24 <_fflush_r>
 800943a:	2800      	cmp	r0, #0
 800943c:	d107      	bne.n	800944e <__swbuf_r+0x7e>
 800943e:	0028      	movs	r0, r5
 8009440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009442:	0021      	movs	r1, r4
 8009444:	0030      	movs	r0, r6
 8009446:	f000 f805 	bl	8009454 <__swsetup_r>
 800944a:	2800      	cmp	r0, #0
 800944c:	d0d3      	beq.n	80093f6 <__swbuf_r+0x26>
 800944e:	2501      	movs	r5, #1
 8009450:	426d      	negs	r5, r5
 8009452:	e7f4      	b.n	800943e <__swbuf_r+0x6e>

08009454 <__swsetup_r>:
 8009454:	4b30      	ldr	r3, [pc, #192]	; (8009518 <__swsetup_r+0xc4>)
 8009456:	b570      	push	{r4, r5, r6, lr}
 8009458:	0005      	movs	r5, r0
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	000c      	movs	r4, r1
 800945e:	2800      	cmp	r0, #0
 8009460:	d004      	beq.n	800946c <__swsetup_r+0x18>
 8009462:	6a03      	ldr	r3, [r0, #32]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <__swsetup_r+0x18>
 8009468:	f7fd fefe 	bl	8007268 <__sinit>
 800946c:	230c      	movs	r3, #12
 800946e:	5ee2      	ldrsh	r2, [r4, r3]
 8009470:	b293      	uxth	r3, r2
 8009472:	0711      	lsls	r1, r2, #28
 8009474:	d423      	bmi.n	80094be <__swsetup_r+0x6a>
 8009476:	06d9      	lsls	r1, r3, #27
 8009478:	d407      	bmi.n	800948a <__swsetup_r+0x36>
 800947a:	2309      	movs	r3, #9
 800947c:	2001      	movs	r0, #1
 800947e:	602b      	str	r3, [r5, #0]
 8009480:	3337      	adds	r3, #55	; 0x37
 8009482:	4313      	orrs	r3, r2
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	4240      	negs	r0, r0
 8009488:	bd70      	pop	{r4, r5, r6, pc}
 800948a:	075b      	lsls	r3, r3, #29
 800948c:	d513      	bpl.n	80094b6 <__swsetup_r+0x62>
 800948e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009490:	2900      	cmp	r1, #0
 8009492:	d008      	beq.n	80094a6 <__swsetup_r+0x52>
 8009494:	0023      	movs	r3, r4
 8009496:	3344      	adds	r3, #68	; 0x44
 8009498:	4299      	cmp	r1, r3
 800949a:	d002      	beq.n	80094a2 <__swsetup_r+0x4e>
 800949c:	0028      	movs	r0, r5
 800949e:	f7fe feb3 	bl	8008208 <_free_r>
 80094a2:	2300      	movs	r3, #0
 80094a4:	6363      	str	r3, [r4, #52]	; 0x34
 80094a6:	2224      	movs	r2, #36	; 0x24
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	4393      	bics	r3, r2
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	2308      	movs	r3, #8
 80094b8:	89a2      	ldrh	r2, [r4, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10b      	bne.n	80094dc <__swsetup_r+0x88>
 80094c4:	21a0      	movs	r1, #160	; 0xa0
 80094c6:	2280      	movs	r2, #128	; 0x80
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	0089      	lsls	r1, r1, #2
 80094cc:	0092      	lsls	r2, r2, #2
 80094ce:	400b      	ands	r3, r1
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d003      	beq.n	80094dc <__swsetup_r+0x88>
 80094d4:	0021      	movs	r1, r4
 80094d6:	0028      	movs	r0, r5
 80094d8:	f000 f892 	bl	8009600 <__smakebuf_r>
 80094dc:	220c      	movs	r2, #12
 80094de:	5ea3      	ldrsh	r3, [r4, r2]
 80094e0:	2001      	movs	r0, #1
 80094e2:	001a      	movs	r2, r3
 80094e4:	b299      	uxth	r1, r3
 80094e6:	4002      	ands	r2, r0
 80094e8:	4203      	tst	r3, r0
 80094ea:	d00f      	beq.n	800950c <__swsetup_r+0xb8>
 80094ec:	2200      	movs	r2, #0
 80094ee:	60a2      	str	r2, [r4, #8]
 80094f0:	6962      	ldr	r2, [r4, #20]
 80094f2:	4252      	negs	r2, r2
 80094f4:	61a2      	str	r2, [r4, #24]
 80094f6:	2000      	movs	r0, #0
 80094f8:	6922      	ldr	r2, [r4, #16]
 80094fa:	4282      	cmp	r2, r0
 80094fc:	d1c4      	bne.n	8009488 <__swsetup_r+0x34>
 80094fe:	0609      	lsls	r1, r1, #24
 8009500:	d5c2      	bpl.n	8009488 <__swsetup_r+0x34>
 8009502:	2240      	movs	r2, #64	; 0x40
 8009504:	4313      	orrs	r3, r2
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	3801      	subs	r0, #1
 800950a:	e7bd      	b.n	8009488 <__swsetup_r+0x34>
 800950c:	0788      	lsls	r0, r1, #30
 800950e:	d400      	bmi.n	8009512 <__swsetup_r+0xbe>
 8009510:	6962      	ldr	r2, [r4, #20]
 8009512:	60a2      	str	r2, [r4, #8]
 8009514:	e7ef      	b.n	80094f6 <__swsetup_r+0xa2>
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	2000010c 	.word	0x2000010c

0800951c <_raise_r>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	0004      	movs	r4, r0
 8009520:	000d      	movs	r5, r1
 8009522:	291f      	cmp	r1, #31
 8009524:	d904      	bls.n	8009530 <_raise_r+0x14>
 8009526:	2316      	movs	r3, #22
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	2001      	movs	r0, #1
 800952c:	4240      	negs	r0, r0
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <_raise_r+0x24>
 8009536:	008a      	lsls	r2, r1, #2
 8009538:	189b      	adds	r3, r3, r2
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	2a00      	cmp	r2, #0
 800953e:	d108      	bne.n	8009552 <_raise_r+0x36>
 8009540:	0020      	movs	r0, r4
 8009542:	f000 f831 	bl	80095a8 <_getpid_r>
 8009546:	002a      	movs	r2, r5
 8009548:	0001      	movs	r1, r0
 800954a:	0020      	movs	r0, r4
 800954c:	f000 f81a 	bl	8009584 <_kill_r>
 8009550:	e7ed      	b.n	800952e <_raise_r+0x12>
 8009552:	2000      	movs	r0, #0
 8009554:	2a01      	cmp	r2, #1
 8009556:	d0ea      	beq.n	800952e <_raise_r+0x12>
 8009558:	1c51      	adds	r1, r2, #1
 800955a:	d103      	bne.n	8009564 <_raise_r+0x48>
 800955c:	2316      	movs	r3, #22
 800955e:	3001      	adds	r0, #1
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	e7e4      	b.n	800952e <_raise_r+0x12>
 8009564:	2400      	movs	r4, #0
 8009566:	0028      	movs	r0, r5
 8009568:	601c      	str	r4, [r3, #0]
 800956a:	4790      	blx	r2
 800956c:	0020      	movs	r0, r4
 800956e:	e7de      	b.n	800952e <_raise_r+0x12>

08009570 <raise>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4b03      	ldr	r3, [pc, #12]	; (8009580 <raise+0x10>)
 8009574:	0001      	movs	r1, r0
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	f7ff ffd0 	bl	800951c <_raise_r>
 800957c:	bd10      	pop	{r4, pc}
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	2000010c 	.word	0x2000010c

08009584 <_kill_r>:
 8009584:	2300      	movs	r3, #0
 8009586:	b570      	push	{r4, r5, r6, lr}
 8009588:	4d06      	ldr	r5, [pc, #24]	; (80095a4 <_kill_r+0x20>)
 800958a:	0004      	movs	r4, r0
 800958c:	0008      	movs	r0, r1
 800958e:	0011      	movs	r1, r2
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	f7fb fd08 	bl	8004fa6 <_kill>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d103      	bne.n	80095a2 <_kill_r+0x1e>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d000      	beq.n	80095a2 <_kill_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	200008d4 	.word	0x200008d4

080095a8 <_getpid_r>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	f7fb fcf6 	bl	8004f9a <_getpid>
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <__swhatbuf_r>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	000e      	movs	r6, r1
 80095b4:	001d      	movs	r5, r3
 80095b6:	230e      	movs	r3, #14
 80095b8:	5ec9      	ldrsh	r1, [r1, r3]
 80095ba:	0014      	movs	r4, r2
 80095bc:	b096      	sub	sp, #88	; 0x58
 80095be:	2900      	cmp	r1, #0
 80095c0:	da0c      	bge.n	80095dc <__swhatbuf_r+0x2c>
 80095c2:	89b2      	ldrh	r2, [r6, #12]
 80095c4:	2380      	movs	r3, #128	; 0x80
 80095c6:	0011      	movs	r1, r2
 80095c8:	4019      	ands	r1, r3
 80095ca:	421a      	tst	r2, r3
 80095cc:	d013      	beq.n	80095f6 <__swhatbuf_r+0x46>
 80095ce:	2100      	movs	r1, #0
 80095d0:	3b40      	subs	r3, #64	; 0x40
 80095d2:	2000      	movs	r0, #0
 80095d4:	6029      	str	r1, [r5, #0]
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	b016      	add	sp, #88	; 0x58
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	466a      	mov	r2, sp
 80095de:	f000 f84d 	bl	800967c <_fstat_r>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	dbed      	blt.n	80095c2 <__swhatbuf_r+0x12>
 80095e6:	23f0      	movs	r3, #240	; 0xf0
 80095e8:	9901      	ldr	r1, [sp, #4]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	4019      	ands	r1, r3
 80095ee:	4b03      	ldr	r3, [pc, #12]	; (80095fc <__swhatbuf_r+0x4c>)
 80095f0:	18c9      	adds	r1, r1, r3
 80095f2:	424b      	negs	r3, r1
 80095f4:	4159      	adcs	r1, r3
 80095f6:	2380      	movs	r3, #128	; 0x80
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	e7ea      	b.n	80095d2 <__swhatbuf_r+0x22>
 80095fc:	ffffe000 	.word	0xffffe000

08009600 <__smakebuf_r>:
 8009600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009602:	2602      	movs	r6, #2
 8009604:	898b      	ldrh	r3, [r1, #12]
 8009606:	0005      	movs	r5, r0
 8009608:	000c      	movs	r4, r1
 800960a:	4233      	tst	r3, r6
 800960c:	d006      	beq.n	800961c <__smakebuf_r+0x1c>
 800960e:	0023      	movs	r3, r4
 8009610:	3347      	adds	r3, #71	; 0x47
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	2301      	movs	r3, #1
 8009618:	6163      	str	r3, [r4, #20]
 800961a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800961c:	466a      	mov	r2, sp
 800961e:	ab01      	add	r3, sp, #4
 8009620:	f7ff ffc6 	bl	80095b0 <__swhatbuf_r>
 8009624:	9900      	ldr	r1, [sp, #0]
 8009626:	0007      	movs	r7, r0
 8009628:	0028      	movs	r0, r5
 800962a:	f7fe fe63 	bl	80082f4 <_malloc_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	d108      	bne.n	8009644 <__smakebuf_r+0x44>
 8009632:	220c      	movs	r2, #12
 8009634:	5ea3      	ldrsh	r3, [r4, r2]
 8009636:	059a      	lsls	r2, r3, #22
 8009638:	d4ef      	bmi.n	800961a <__smakebuf_r+0x1a>
 800963a:	2203      	movs	r2, #3
 800963c:	4393      	bics	r3, r2
 800963e:	431e      	orrs	r6, r3
 8009640:	81a6      	strh	r6, [r4, #12]
 8009642:	e7e4      	b.n	800960e <__smakebuf_r+0xe>
 8009644:	2380      	movs	r3, #128	; 0x80
 8009646:	89a2      	ldrh	r2, [r4, #12]
 8009648:	6020      	str	r0, [r4, #0]
 800964a:	4313      	orrs	r3, r2
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	6120      	str	r0, [r4, #16]
 8009652:	6163      	str	r3, [r4, #20]
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00c      	beq.n	8009674 <__smakebuf_r+0x74>
 800965a:	0028      	movs	r0, r5
 800965c:	230e      	movs	r3, #14
 800965e:	5ee1      	ldrsh	r1, [r4, r3]
 8009660:	f000 f81e 	bl	80096a0 <_isatty_r>
 8009664:	2800      	cmp	r0, #0
 8009666:	d005      	beq.n	8009674 <__smakebuf_r+0x74>
 8009668:	2303      	movs	r3, #3
 800966a:	89a2      	ldrh	r2, [r4, #12]
 800966c:	439a      	bics	r2, r3
 800966e:	3b02      	subs	r3, #2
 8009670:	4313      	orrs	r3, r2
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	433b      	orrs	r3, r7
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	e7ce      	b.n	800961a <__smakebuf_r+0x1a>

0800967c <_fstat_r>:
 800967c:	2300      	movs	r3, #0
 800967e:	b570      	push	{r4, r5, r6, lr}
 8009680:	4d06      	ldr	r5, [pc, #24]	; (800969c <_fstat_r+0x20>)
 8009682:	0004      	movs	r4, r0
 8009684:	0008      	movs	r0, r1
 8009686:	0011      	movs	r1, r2
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f7fb fceb 	bl	8005064 <_fstat>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	d103      	bne.n	800969a <_fstat_r+0x1e>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d000      	beq.n	800969a <_fstat_r+0x1e>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	200008d4 	.word	0x200008d4

080096a0 <_isatty_r>:
 80096a0:	2300      	movs	r3, #0
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	4d06      	ldr	r5, [pc, #24]	; (80096c0 <_isatty_r+0x20>)
 80096a6:	0004      	movs	r4, r0
 80096a8:	0008      	movs	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7fb fce8 	bl	8005080 <_isatty>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d103      	bne.n	80096bc <_isatty_r+0x1c>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d000      	beq.n	80096bc <_isatty_r+0x1c>
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	200008d4 	.word	0x200008d4

080096c4 <atan2>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	f000 fb2b 	bl	8009d20 <__ieee754_atan2>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <sqrt>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	0004      	movs	r4, r0
 80096d0:	000d      	movs	r5, r1
 80096d2:	f000 f9c1 	bl	8009a58 <__ieee754_sqrt>
 80096d6:	0022      	movs	r2, r4
 80096d8:	0006      	movs	r6, r0
 80096da:	000f      	movs	r7, r1
 80096dc:	002b      	movs	r3, r5
 80096de:	0020      	movs	r0, r4
 80096e0:	0029      	movs	r1, r5
 80096e2:	f7f9 fbe1 	bl	8002ea8 <__aeabi_dcmpun>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d113      	bne.n	8009712 <sqrt+0x46>
 80096ea:	2200      	movs	r2, #0
 80096ec:	2300      	movs	r3, #0
 80096ee:	0020      	movs	r0, r4
 80096f0:	0029      	movs	r1, r5
 80096f2:	f7f6 feb1 	bl	8000458 <__aeabi_dcmplt>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d00b      	beq.n	8009712 <sqrt+0x46>
 80096fa:	f7fd feaf 	bl	800745c <__errno>
 80096fe:	2321      	movs	r3, #33	; 0x21
 8009700:	2200      	movs	r2, #0
 8009702:	6003      	str	r3, [r0, #0]
 8009704:	2300      	movs	r3, #0
 8009706:	0010      	movs	r0, r2
 8009708:	0019      	movs	r1, r3
 800970a:	f7f8 f98f 	bl	8001a2c <__aeabi_ddiv>
 800970e:	0006      	movs	r6, r0
 8009710:	000f      	movs	r7, r1
 8009712:	0030      	movs	r0, r6
 8009714:	0039      	movs	r1, r7
 8009716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009718 <atan>:
 8009718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800971a:	4b98      	ldr	r3, [pc, #608]	; (800997c <atan+0x264>)
 800971c:	b085      	sub	sp, #20
 800971e:	004e      	lsls	r6, r1, #1
 8009720:	0004      	movs	r4, r0
 8009722:	000d      	movs	r5, r1
 8009724:	9103      	str	r1, [sp, #12]
 8009726:	0876      	lsrs	r6, r6, #1
 8009728:	429e      	cmp	r6, r3
 800972a:	dd18      	ble.n	800975e <atan+0x46>
 800972c:	4b94      	ldr	r3, [pc, #592]	; (8009980 <atan+0x268>)
 800972e:	429e      	cmp	r6, r3
 8009730:	dc02      	bgt.n	8009738 <atan+0x20>
 8009732:	d10a      	bne.n	800974a <atan+0x32>
 8009734:	2800      	cmp	r0, #0
 8009736:	d008      	beq.n	800974a <atan+0x32>
 8009738:	0022      	movs	r2, r4
 800973a:	002b      	movs	r3, r5
 800973c:	0020      	movs	r0, r4
 800973e:	0029      	movs	r1, r5
 8009740:	f7f7 fe14 	bl	800136c <__aeabi_dadd>
 8009744:	0004      	movs	r4, r0
 8009746:	000d      	movs	r5, r1
 8009748:	e005      	b.n	8009756 <atan+0x3e>
 800974a:	9b03      	ldr	r3, [sp, #12]
 800974c:	4c8d      	ldr	r4, [pc, #564]	; (8009984 <atan+0x26c>)
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd00      	ble.n	8009754 <atan+0x3c>
 8009752:	e110      	b.n	8009976 <atan+0x25e>
 8009754:	4d8c      	ldr	r5, [pc, #560]	; (8009988 <atan+0x270>)
 8009756:	0020      	movs	r0, r4
 8009758:	0029      	movs	r1, r5
 800975a:	b005      	add	sp, #20
 800975c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975e:	4b8b      	ldr	r3, [pc, #556]	; (800998c <atan+0x274>)
 8009760:	429e      	cmp	r6, r3
 8009762:	dc0f      	bgt.n	8009784 <atan+0x6c>
 8009764:	4b8a      	ldr	r3, [pc, #552]	; (8009990 <atan+0x278>)
 8009766:	429e      	cmp	r6, r3
 8009768:	dc09      	bgt.n	800977e <atan+0x66>
 800976a:	4a8a      	ldr	r2, [pc, #552]	; (8009994 <atan+0x27c>)
 800976c:	4b8a      	ldr	r3, [pc, #552]	; (8009998 <atan+0x280>)
 800976e:	f7f7 fdfd 	bl	800136c <__aeabi_dadd>
 8009772:	2200      	movs	r2, #0
 8009774:	4b89      	ldr	r3, [pc, #548]	; (800999c <atan+0x284>)
 8009776:	f7f6 fe83 	bl	8000480 <__aeabi_dcmpgt>
 800977a:	2800      	cmp	r0, #0
 800977c:	d1eb      	bne.n	8009756 <atan+0x3e>
 800977e:	2301      	movs	r3, #1
 8009780:	425b      	negs	r3, r3
 8009782:	e025      	b.n	80097d0 <atan+0xb8>
 8009784:	f000 f948 	bl	8009a18 <fabs>
 8009788:	4b85      	ldr	r3, [pc, #532]	; (80099a0 <atan+0x288>)
 800978a:	0004      	movs	r4, r0
 800978c:	000d      	movs	r5, r1
 800978e:	429e      	cmp	r6, r3
 8009790:	dd00      	ble.n	8009794 <atan+0x7c>
 8009792:	e0aa      	b.n	80098ea <atan+0x1d2>
 8009794:	4b83      	ldr	r3, [pc, #524]	; (80099a4 <atan+0x28c>)
 8009796:	429e      	cmp	r6, r3
 8009798:	dd00      	ble.n	800979c <atan+0x84>
 800979a:	e090      	b.n	80098be <atan+0x1a6>
 800979c:	0002      	movs	r2, r0
 800979e:	000b      	movs	r3, r1
 80097a0:	f7f7 fde4 	bl	800136c <__aeabi_dadd>
 80097a4:	2200      	movs	r2, #0
 80097a6:	4b7d      	ldr	r3, [pc, #500]	; (800999c <atan+0x284>)
 80097a8:	f7f8 fffc 	bl	80027a4 <__aeabi_dsub>
 80097ac:	2380      	movs	r3, #128	; 0x80
 80097ae:	0006      	movs	r6, r0
 80097b0:	000f      	movs	r7, r1
 80097b2:	2200      	movs	r2, #0
 80097b4:	0020      	movs	r0, r4
 80097b6:	0029      	movs	r1, r5
 80097b8:	05db      	lsls	r3, r3, #23
 80097ba:	f7f7 fdd7 	bl	800136c <__aeabi_dadd>
 80097be:	000b      	movs	r3, r1
 80097c0:	0002      	movs	r2, r0
 80097c2:	0039      	movs	r1, r7
 80097c4:	0030      	movs	r0, r6
 80097c6:	f7f8 f931 	bl	8001a2c <__aeabi_ddiv>
 80097ca:	2300      	movs	r3, #0
 80097cc:	0004      	movs	r4, r0
 80097ce:	000d      	movs	r5, r1
 80097d0:	0022      	movs	r2, r4
 80097d2:	9302      	str	r3, [sp, #8]
 80097d4:	0020      	movs	r0, r4
 80097d6:	002b      	movs	r3, r5
 80097d8:	0029      	movs	r1, r5
 80097da:	f7f8 fd21 	bl	8002220 <__aeabi_dmul>
 80097de:	0002      	movs	r2, r0
 80097e0:	000b      	movs	r3, r1
 80097e2:	9000      	str	r0, [sp, #0]
 80097e4:	9101      	str	r1, [sp, #4]
 80097e6:	f7f8 fd1b 	bl	8002220 <__aeabi_dmul>
 80097ea:	0006      	movs	r6, r0
 80097ec:	000f      	movs	r7, r1
 80097ee:	4a6e      	ldr	r2, [pc, #440]	; (80099a8 <atan+0x290>)
 80097f0:	4b6e      	ldr	r3, [pc, #440]	; (80099ac <atan+0x294>)
 80097f2:	f7f8 fd15 	bl	8002220 <__aeabi_dmul>
 80097f6:	4a6e      	ldr	r2, [pc, #440]	; (80099b0 <atan+0x298>)
 80097f8:	4b6e      	ldr	r3, [pc, #440]	; (80099b4 <atan+0x29c>)
 80097fa:	f7f7 fdb7 	bl	800136c <__aeabi_dadd>
 80097fe:	0032      	movs	r2, r6
 8009800:	003b      	movs	r3, r7
 8009802:	f7f8 fd0d 	bl	8002220 <__aeabi_dmul>
 8009806:	4a6c      	ldr	r2, [pc, #432]	; (80099b8 <atan+0x2a0>)
 8009808:	4b6c      	ldr	r3, [pc, #432]	; (80099bc <atan+0x2a4>)
 800980a:	f7f7 fdaf 	bl	800136c <__aeabi_dadd>
 800980e:	0032      	movs	r2, r6
 8009810:	003b      	movs	r3, r7
 8009812:	f7f8 fd05 	bl	8002220 <__aeabi_dmul>
 8009816:	4a6a      	ldr	r2, [pc, #424]	; (80099c0 <atan+0x2a8>)
 8009818:	4b6a      	ldr	r3, [pc, #424]	; (80099c4 <atan+0x2ac>)
 800981a:	f7f7 fda7 	bl	800136c <__aeabi_dadd>
 800981e:	0032      	movs	r2, r6
 8009820:	003b      	movs	r3, r7
 8009822:	f7f8 fcfd 	bl	8002220 <__aeabi_dmul>
 8009826:	4a68      	ldr	r2, [pc, #416]	; (80099c8 <atan+0x2b0>)
 8009828:	4b68      	ldr	r3, [pc, #416]	; (80099cc <atan+0x2b4>)
 800982a:	f7f7 fd9f 	bl	800136c <__aeabi_dadd>
 800982e:	0032      	movs	r2, r6
 8009830:	003b      	movs	r3, r7
 8009832:	f7f8 fcf5 	bl	8002220 <__aeabi_dmul>
 8009836:	4a66      	ldr	r2, [pc, #408]	; (80099d0 <atan+0x2b8>)
 8009838:	4b66      	ldr	r3, [pc, #408]	; (80099d4 <atan+0x2bc>)
 800983a:	f7f7 fd97 	bl	800136c <__aeabi_dadd>
 800983e:	9a00      	ldr	r2, [sp, #0]
 8009840:	9b01      	ldr	r3, [sp, #4]
 8009842:	f7f8 fced 	bl	8002220 <__aeabi_dmul>
 8009846:	4a64      	ldr	r2, [pc, #400]	; (80099d8 <atan+0x2c0>)
 8009848:	9000      	str	r0, [sp, #0]
 800984a:	9101      	str	r1, [sp, #4]
 800984c:	4b63      	ldr	r3, [pc, #396]	; (80099dc <atan+0x2c4>)
 800984e:	0030      	movs	r0, r6
 8009850:	0039      	movs	r1, r7
 8009852:	f7f8 fce5 	bl	8002220 <__aeabi_dmul>
 8009856:	4a62      	ldr	r2, [pc, #392]	; (80099e0 <atan+0x2c8>)
 8009858:	4b62      	ldr	r3, [pc, #392]	; (80099e4 <atan+0x2cc>)
 800985a:	f7f8 ffa3 	bl	80027a4 <__aeabi_dsub>
 800985e:	0032      	movs	r2, r6
 8009860:	003b      	movs	r3, r7
 8009862:	f7f8 fcdd 	bl	8002220 <__aeabi_dmul>
 8009866:	4a60      	ldr	r2, [pc, #384]	; (80099e8 <atan+0x2d0>)
 8009868:	4b60      	ldr	r3, [pc, #384]	; (80099ec <atan+0x2d4>)
 800986a:	f7f8 ff9b 	bl	80027a4 <__aeabi_dsub>
 800986e:	0032      	movs	r2, r6
 8009870:	003b      	movs	r3, r7
 8009872:	f7f8 fcd5 	bl	8002220 <__aeabi_dmul>
 8009876:	4a5e      	ldr	r2, [pc, #376]	; (80099f0 <atan+0x2d8>)
 8009878:	4b5e      	ldr	r3, [pc, #376]	; (80099f4 <atan+0x2dc>)
 800987a:	f7f8 ff93 	bl	80027a4 <__aeabi_dsub>
 800987e:	0032      	movs	r2, r6
 8009880:	003b      	movs	r3, r7
 8009882:	f7f8 fccd 	bl	8002220 <__aeabi_dmul>
 8009886:	4a5c      	ldr	r2, [pc, #368]	; (80099f8 <atan+0x2e0>)
 8009888:	4b5c      	ldr	r3, [pc, #368]	; (80099fc <atan+0x2e4>)
 800988a:	f7f8 ff8b 	bl	80027a4 <__aeabi_dsub>
 800988e:	0032      	movs	r2, r6
 8009890:	003b      	movs	r3, r7
 8009892:	f7f8 fcc5 	bl	8002220 <__aeabi_dmul>
 8009896:	0002      	movs	r2, r0
 8009898:	000b      	movs	r3, r1
 800989a:	9800      	ldr	r0, [sp, #0]
 800989c:	9901      	ldr	r1, [sp, #4]
 800989e:	f7f7 fd65 	bl	800136c <__aeabi_dadd>
 80098a2:	002b      	movs	r3, r5
 80098a4:	0022      	movs	r2, r4
 80098a6:	f7f8 fcbb 	bl	8002220 <__aeabi_dmul>
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	3301      	adds	r3, #1
 80098ae:	d143      	bne.n	8009938 <atan+0x220>
 80098b0:	0002      	movs	r2, r0
 80098b2:	000b      	movs	r3, r1
 80098b4:	0020      	movs	r0, r4
 80098b6:	0029      	movs	r1, r5
 80098b8:	f7f8 ff74 	bl	80027a4 <__aeabi_dsub>
 80098bc:	e742      	b.n	8009744 <atan+0x2c>
 80098be:	2200      	movs	r2, #0
 80098c0:	4b36      	ldr	r3, [pc, #216]	; (800999c <atan+0x284>)
 80098c2:	f7f8 ff6f 	bl	80027a4 <__aeabi_dsub>
 80098c6:	2200      	movs	r2, #0
 80098c8:	0006      	movs	r6, r0
 80098ca:	000f      	movs	r7, r1
 80098cc:	0020      	movs	r0, r4
 80098ce:	0029      	movs	r1, r5
 80098d0:	4b32      	ldr	r3, [pc, #200]	; (800999c <atan+0x284>)
 80098d2:	f7f7 fd4b 	bl	800136c <__aeabi_dadd>
 80098d6:	000b      	movs	r3, r1
 80098d8:	0002      	movs	r2, r0
 80098da:	0039      	movs	r1, r7
 80098dc:	0030      	movs	r0, r6
 80098de:	f7f8 f8a5 	bl	8001a2c <__aeabi_ddiv>
 80098e2:	2301      	movs	r3, #1
 80098e4:	0004      	movs	r4, r0
 80098e6:	000d      	movs	r5, r1
 80098e8:	e772      	b.n	80097d0 <atan+0xb8>
 80098ea:	4b45      	ldr	r3, [pc, #276]	; (8009a00 <atan+0x2e8>)
 80098ec:	429e      	cmp	r6, r3
 80098ee:	dc19      	bgt.n	8009924 <atan+0x20c>
 80098f0:	2200      	movs	r2, #0
 80098f2:	4b44      	ldr	r3, [pc, #272]	; (8009a04 <atan+0x2ec>)
 80098f4:	f7f8 ff56 	bl	80027a4 <__aeabi_dsub>
 80098f8:	2200      	movs	r2, #0
 80098fa:	0006      	movs	r6, r0
 80098fc:	000f      	movs	r7, r1
 80098fe:	0020      	movs	r0, r4
 8009900:	0029      	movs	r1, r5
 8009902:	4b40      	ldr	r3, [pc, #256]	; (8009a04 <atan+0x2ec>)
 8009904:	f7f8 fc8c 	bl	8002220 <__aeabi_dmul>
 8009908:	2200      	movs	r2, #0
 800990a:	4b24      	ldr	r3, [pc, #144]	; (800999c <atan+0x284>)
 800990c:	f7f7 fd2e 	bl	800136c <__aeabi_dadd>
 8009910:	000b      	movs	r3, r1
 8009912:	0002      	movs	r2, r0
 8009914:	0039      	movs	r1, r7
 8009916:	0030      	movs	r0, r6
 8009918:	f7f8 f888 	bl	8001a2c <__aeabi_ddiv>
 800991c:	2302      	movs	r3, #2
 800991e:	0004      	movs	r4, r0
 8009920:	000d      	movs	r5, r1
 8009922:	e755      	b.n	80097d0 <atan+0xb8>
 8009924:	000b      	movs	r3, r1
 8009926:	0002      	movs	r2, r0
 8009928:	4937      	ldr	r1, [pc, #220]	; (8009a08 <atan+0x2f0>)
 800992a:	2000      	movs	r0, #0
 800992c:	f7f8 f87e 	bl	8001a2c <__aeabi_ddiv>
 8009930:	2303      	movs	r3, #3
 8009932:	0004      	movs	r4, r0
 8009934:	000d      	movs	r5, r1
 8009936:	e74b      	b.n	80097d0 <atan+0xb8>
 8009938:	9b02      	ldr	r3, [sp, #8]
 800993a:	4e34      	ldr	r6, [pc, #208]	; (8009a0c <atan+0x2f4>)
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	4f34      	ldr	r7, [pc, #208]	; (8009a10 <atan+0x2f8>)
 8009940:	18f6      	adds	r6, r6, r3
 8009942:	18ff      	adds	r7, r7, r3
 8009944:	6832      	ldr	r2, [r6, #0]
 8009946:	6873      	ldr	r3, [r6, #4]
 8009948:	f7f8 ff2c 	bl	80027a4 <__aeabi_dsub>
 800994c:	0022      	movs	r2, r4
 800994e:	002b      	movs	r3, r5
 8009950:	f7f8 ff28 	bl	80027a4 <__aeabi_dsub>
 8009954:	000b      	movs	r3, r1
 8009956:	0002      	movs	r2, r0
 8009958:	6838      	ldr	r0, [r7, #0]
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	f7f8 ff22 	bl	80027a4 <__aeabi_dsub>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	0004      	movs	r4, r0
 8009964:	000d      	movs	r5, r1
 8009966:	2b00      	cmp	r3, #0
 8009968:	db00      	blt.n	800996c <atan+0x254>
 800996a:	e6f4      	b.n	8009756 <atan+0x3e>
 800996c:	2180      	movs	r1, #128	; 0x80
 800996e:	0609      	lsls	r1, r1, #24
 8009970:	186b      	adds	r3, r5, r1
 8009972:	001d      	movs	r5, r3
 8009974:	e6ef      	b.n	8009756 <atan+0x3e>
 8009976:	4d27      	ldr	r5, [pc, #156]	; (8009a14 <atan+0x2fc>)
 8009978:	e6ed      	b.n	8009756 <atan+0x3e>
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	440fffff 	.word	0x440fffff
 8009980:	7ff00000 	.word	0x7ff00000
 8009984:	54442d18 	.word	0x54442d18
 8009988:	bff921fb 	.word	0xbff921fb
 800998c:	3fdbffff 	.word	0x3fdbffff
 8009990:	3e1fffff 	.word	0x3e1fffff
 8009994:	8800759c 	.word	0x8800759c
 8009998:	7e37e43c 	.word	0x7e37e43c
 800999c:	3ff00000 	.word	0x3ff00000
 80099a0:	3ff2ffff 	.word	0x3ff2ffff
 80099a4:	3fe5ffff 	.word	0x3fe5ffff
 80099a8:	e322da11 	.word	0xe322da11
 80099ac:	3f90ad3a 	.word	0x3f90ad3a
 80099b0:	24760deb 	.word	0x24760deb
 80099b4:	3fa97b4b 	.word	0x3fa97b4b
 80099b8:	a0d03d51 	.word	0xa0d03d51
 80099bc:	3fb10d66 	.word	0x3fb10d66
 80099c0:	c54c206e 	.word	0xc54c206e
 80099c4:	3fb745cd 	.word	0x3fb745cd
 80099c8:	920083ff 	.word	0x920083ff
 80099cc:	3fc24924 	.word	0x3fc24924
 80099d0:	5555550d 	.word	0x5555550d
 80099d4:	3fd55555 	.word	0x3fd55555
 80099d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80099dc:	bfa2b444 	.word	0xbfa2b444
 80099e0:	52defd9a 	.word	0x52defd9a
 80099e4:	3fadde2d 	.word	0x3fadde2d
 80099e8:	af749a6d 	.word	0xaf749a6d
 80099ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80099f0:	fe231671 	.word	0xfe231671
 80099f4:	3fbc71c6 	.word	0x3fbc71c6
 80099f8:	9998ebc4 	.word	0x9998ebc4
 80099fc:	3fc99999 	.word	0x3fc99999
 8009a00:	40037fff 	.word	0x40037fff
 8009a04:	3ff80000 	.word	0x3ff80000
 8009a08:	bff00000 	.word	0xbff00000
 8009a0c:	0800bc08 	.word	0x0800bc08
 8009a10:	0800bbe8 	.word	0x0800bbe8
 8009a14:	3ff921fb 	.word	0x3ff921fb

08009a18 <fabs>:
 8009a18:	0049      	lsls	r1, r1, #1
 8009a1a:	084b      	lsrs	r3, r1, #1
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	4770      	bx	lr

08009a20 <sqrtf>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	1c05      	adds	r5, r0, #0
 8009a24:	f000 f904 	bl	8009c30 <__ieee754_sqrtf>
 8009a28:	1c29      	adds	r1, r5, #0
 8009a2a:	1c04      	adds	r4, r0, #0
 8009a2c:	1c28      	adds	r0, r5, #0
 8009a2e:	f7f7 fbcd 	bl	80011cc <__aeabi_fcmpun>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d10e      	bne.n	8009a54 <sqrtf+0x34>
 8009a36:	2100      	movs	r1, #0
 8009a38:	1c28      	adds	r0, r5, #0
 8009a3a:	f7f6 fd47 	bl	80004cc <__aeabi_fcmplt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d008      	beq.n	8009a54 <sqrtf+0x34>
 8009a42:	f7fd fd0b 	bl	800745c <__errno>
 8009a46:	2321      	movs	r3, #33	; 0x21
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6003      	str	r3, [r0, #0]
 8009a4c:	1c08      	adds	r0, r1, #0
 8009a4e:	f7f6 ff05 	bl	800085c <__aeabi_fdiv>
 8009a52:	1c04      	adds	r4, r0, #0
 8009a54:	1c20      	adds	r0, r4, #0
 8009a56:	bd70      	pop	{r4, r5, r6, pc}

08009a58 <__ieee754_sqrt>:
 8009a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a5a:	000a      	movs	r2, r1
 8009a5c:	000c      	movs	r4, r1
 8009a5e:	496f      	ldr	r1, [pc, #444]	; (8009c1c <__ieee754_sqrt+0x1c4>)
 8009a60:	0005      	movs	r5, r0
 8009a62:	0003      	movs	r3, r0
 8009a64:	0008      	movs	r0, r1
 8009a66:	b087      	sub	sp, #28
 8009a68:	4020      	ands	r0, r4
 8009a6a:	4288      	cmp	r0, r1
 8009a6c:	d111      	bne.n	8009a92 <__ieee754_sqrt+0x3a>
 8009a6e:	002a      	movs	r2, r5
 8009a70:	0023      	movs	r3, r4
 8009a72:	0028      	movs	r0, r5
 8009a74:	0021      	movs	r1, r4
 8009a76:	f7f8 fbd3 	bl	8002220 <__aeabi_dmul>
 8009a7a:	0002      	movs	r2, r0
 8009a7c:	000b      	movs	r3, r1
 8009a7e:	0028      	movs	r0, r5
 8009a80:	0021      	movs	r1, r4
 8009a82:	f7f7 fc73 	bl	800136c <__aeabi_dadd>
 8009a86:	0005      	movs	r5, r0
 8009a88:	000c      	movs	r4, r1
 8009a8a:	0028      	movs	r0, r5
 8009a8c:	0021      	movs	r1, r4
 8009a8e:	b007      	add	sp, #28
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	2c00      	cmp	r4, #0
 8009a94:	dc12      	bgt.n	8009abc <__ieee754_sqrt+0x64>
 8009a96:	0061      	lsls	r1, r4, #1
 8009a98:	0849      	lsrs	r1, r1, #1
 8009a9a:	4329      	orrs	r1, r5
 8009a9c:	d0f5      	beq.n	8009a8a <__ieee754_sqrt+0x32>
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	428c      	cmp	r4, r1
 8009aa2:	d100      	bne.n	8009aa6 <__ieee754_sqrt+0x4e>
 8009aa4:	e09f      	b.n	8009be6 <__ieee754_sqrt+0x18e>
 8009aa6:	002a      	movs	r2, r5
 8009aa8:	0023      	movs	r3, r4
 8009aaa:	0028      	movs	r0, r5
 8009aac:	0021      	movs	r1, r4
 8009aae:	f7f8 fe79 	bl	80027a4 <__aeabi_dsub>
 8009ab2:	0002      	movs	r2, r0
 8009ab4:	000b      	movs	r3, r1
 8009ab6:	f7f7 ffb9 	bl	8001a2c <__aeabi_ddiv>
 8009aba:	e7e4      	b.n	8009a86 <__ieee754_sqrt+0x2e>
 8009abc:	1521      	asrs	r1, r4, #20
 8009abe:	d100      	bne.n	8009ac2 <__ieee754_sqrt+0x6a>
 8009ac0:	e091      	b.n	8009be6 <__ieee754_sqrt+0x18e>
 8009ac2:	4857      	ldr	r0, [pc, #348]	; (8009c20 <__ieee754_sqrt+0x1c8>)
 8009ac4:	0312      	lsls	r2, r2, #12
 8009ac6:	180c      	adds	r4, r1, r0
 8009ac8:	2080      	movs	r0, #128	; 0x80
 8009aca:	0b12      	lsrs	r2, r2, #12
 8009acc:	0340      	lsls	r0, r0, #13
 8009ace:	4310      	orrs	r0, r2
 8009ad0:	07c9      	lsls	r1, r1, #31
 8009ad2:	d403      	bmi.n	8009adc <__ieee754_sqrt+0x84>
 8009ad4:	0fda      	lsrs	r2, r3, #31
 8009ad6:	0040      	lsls	r0, r0, #1
 8009ad8:	1810      	adds	r0, r2, r0
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	2500      	movs	r5, #0
 8009ade:	1062      	asrs	r2, r4, #1
 8009ae0:	0040      	lsls	r0, r0, #1
 8009ae2:	2480      	movs	r4, #128	; 0x80
 8009ae4:	9205      	str	r2, [sp, #20]
 8009ae6:	0fda      	lsrs	r2, r3, #31
 8009ae8:	1812      	adds	r2, r2, r0
 8009aea:	0029      	movs	r1, r5
 8009aec:	2016      	movs	r0, #22
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	03a4      	lsls	r4, r4, #14
 8009af2:	190e      	adds	r6, r1, r4
 8009af4:	4296      	cmp	r6, r2
 8009af6:	dc02      	bgt.n	8009afe <__ieee754_sqrt+0xa6>
 8009af8:	1931      	adds	r1, r6, r4
 8009afa:	1b92      	subs	r2, r2, r6
 8009afc:	192d      	adds	r5, r5, r4
 8009afe:	0fde      	lsrs	r6, r3, #31
 8009b00:	0052      	lsls	r2, r2, #1
 8009b02:	3801      	subs	r0, #1
 8009b04:	18b2      	adds	r2, r6, r2
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	0864      	lsrs	r4, r4, #1
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d1f1      	bne.n	8009af2 <__ieee754_sqrt+0x9a>
 8009b0e:	2620      	movs	r6, #32
 8009b10:	2780      	movs	r7, #128	; 0x80
 8009b12:	0004      	movs	r4, r0
 8009b14:	9604      	str	r6, [sp, #16]
 8009b16:	063f      	lsls	r7, r7, #24
 8009b18:	183e      	adds	r6, r7, r0
 8009b1a:	46b4      	mov	ip, r6
 8009b1c:	428a      	cmp	r2, r1
 8009b1e:	dc02      	bgt.n	8009b26 <__ieee754_sqrt+0xce>
 8009b20:	d114      	bne.n	8009b4c <__ieee754_sqrt+0xf4>
 8009b22:	429e      	cmp	r6, r3
 8009b24:	d812      	bhi.n	8009b4c <__ieee754_sqrt+0xf4>
 8009b26:	4660      	mov	r0, ip
 8009b28:	4666      	mov	r6, ip
 8009b2a:	19c0      	adds	r0, r0, r7
 8009b2c:	9100      	str	r1, [sp, #0]
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	da03      	bge.n	8009b3a <__ieee754_sqrt+0xe2>
 8009b32:	43c6      	mvns	r6, r0
 8009b34:	0ff6      	lsrs	r6, r6, #31
 8009b36:	198e      	adds	r6, r1, r6
 8009b38:	9600      	str	r6, [sp, #0]
 8009b3a:	1a52      	subs	r2, r2, r1
 8009b3c:	4563      	cmp	r3, ip
 8009b3e:	4189      	sbcs	r1, r1
 8009b40:	4249      	negs	r1, r1
 8009b42:	1a52      	subs	r2, r2, r1
 8009b44:	4661      	mov	r1, ip
 8009b46:	1a5b      	subs	r3, r3, r1
 8009b48:	9900      	ldr	r1, [sp, #0]
 8009b4a:	19e4      	adds	r4, r4, r7
 8009b4c:	0fde      	lsrs	r6, r3, #31
 8009b4e:	0052      	lsls	r2, r2, #1
 8009b50:	18b2      	adds	r2, r6, r2
 8009b52:	9e04      	ldr	r6, [sp, #16]
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	3e01      	subs	r6, #1
 8009b58:	087f      	lsrs	r7, r7, #1
 8009b5a:	9604      	str	r6, [sp, #16]
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	d1db      	bne.n	8009b18 <__ieee754_sqrt+0xc0>
 8009b60:	431a      	orrs	r2, r3
 8009b62:	d01f      	beq.n	8009ba4 <__ieee754_sqrt+0x14c>
 8009b64:	4e2f      	ldr	r6, [pc, #188]	; (8009c24 <__ieee754_sqrt+0x1cc>)
 8009b66:	4f30      	ldr	r7, [pc, #192]	; (8009c28 <__ieee754_sqrt+0x1d0>)
 8009b68:	6830      	ldr	r0, [r6, #0]
 8009b6a:	6871      	ldr	r1, [r6, #4]
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	9200      	str	r2, [sp, #0]
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	6832      	ldr	r2, [r6, #0]
 8009b76:	6873      	ldr	r3, [r6, #4]
 8009b78:	9202      	str	r2, [sp, #8]
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	9a00      	ldr	r2, [sp, #0]
 8009b7e:	9b01      	ldr	r3, [sp, #4]
 8009b80:	f7f8 fe10 	bl	80027a4 <__aeabi_dsub>
 8009b84:	0002      	movs	r2, r0
 8009b86:	000b      	movs	r3, r1
 8009b88:	9802      	ldr	r0, [sp, #8]
 8009b8a:	9903      	ldr	r1, [sp, #12]
 8009b8c:	f7f6 fc6e 	bl	800046c <__aeabi_dcmple>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d007      	beq.n	8009ba4 <__ieee754_sqrt+0x14c>
 8009b94:	6830      	ldr	r0, [r6, #0]
 8009b96:	6871      	ldr	r1, [r6, #4]
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	1c67      	adds	r7, r4, #1
 8009b9e:	d127      	bne.n	8009bf0 <__ieee754_sqrt+0x198>
 8009ba0:	9c04      	ldr	r4, [sp, #16]
 8009ba2:	3501      	adds	r5, #1
 8009ba4:	4b21      	ldr	r3, [pc, #132]	; (8009c2c <__ieee754_sqrt+0x1d4>)
 8009ba6:	1069      	asrs	r1, r5, #1
 8009ba8:	18c9      	adds	r1, r1, r3
 8009baa:	0864      	lsrs	r4, r4, #1
 8009bac:	07ed      	lsls	r5, r5, #31
 8009bae:	d502      	bpl.n	8009bb6 <__ieee754_sqrt+0x15e>
 8009bb0:	2380      	movs	r3, #128	; 0x80
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	431c      	orrs	r4, r3
 8009bb6:	9b05      	ldr	r3, [sp, #20]
 8009bb8:	0025      	movs	r5, r4
 8009bba:	0518      	lsls	r0, r3, #20
 8009bbc:	1843      	adds	r3, r0, r1
 8009bbe:	001c      	movs	r4, r3
 8009bc0:	e763      	b.n	8009a8a <__ieee754_sqrt+0x32>
 8009bc2:	0ada      	lsrs	r2, r3, #11
 8009bc4:	3815      	subs	r0, #21
 8009bc6:	055b      	lsls	r3, r3, #21
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	d0fa      	beq.n	8009bc2 <__ieee754_sqrt+0x16a>
 8009bcc:	2480      	movs	r4, #128	; 0x80
 8009bce:	0364      	lsls	r4, r4, #13
 8009bd0:	4222      	tst	r2, r4
 8009bd2:	d00a      	beq.n	8009bea <__ieee754_sqrt+0x192>
 8009bd4:	2420      	movs	r4, #32
 8009bd6:	001e      	movs	r6, r3
 8009bd8:	1a64      	subs	r4, r4, r1
 8009bda:	40e6      	lsrs	r6, r4
 8009bdc:	1e4d      	subs	r5, r1, #1
 8009bde:	408b      	lsls	r3, r1
 8009be0:	4332      	orrs	r2, r6
 8009be2:	1b41      	subs	r1, r0, r5
 8009be4:	e76d      	b.n	8009ac2 <__ieee754_sqrt+0x6a>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e7ee      	b.n	8009bc8 <__ieee754_sqrt+0x170>
 8009bea:	0052      	lsls	r2, r2, #1
 8009bec:	3101      	adds	r1, #1
 8009bee:	e7ef      	b.n	8009bd0 <__ieee754_sqrt+0x178>
 8009bf0:	f7f7 fbbc 	bl	800136c <__aeabi_dadd>
 8009bf4:	6877      	ldr	r7, [r6, #4]
 8009bf6:	6836      	ldr	r6, [r6, #0]
 8009bf8:	0002      	movs	r2, r0
 8009bfa:	000b      	movs	r3, r1
 8009bfc:	0030      	movs	r0, r6
 8009bfe:	0039      	movs	r1, r7
 8009c00:	f7f6 fc2a 	bl	8000458 <__aeabi_dcmplt>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d004      	beq.n	8009c12 <__ieee754_sqrt+0x1ba>
 8009c08:	3402      	adds	r4, #2
 8009c0a:	4263      	negs	r3, r4
 8009c0c:	4163      	adcs	r3, r4
 8009c0e:	18ed      	adds	r5, r5, r3
 8009c10:	e7c8      	b.n	8009ba4 <__ieee754_sqrt+0x14c>
 8009c12:	2301      	movs	r3, #1
 8009c14:	3401      	adds	r4, #1
 8009c16:	439c      	bics	r4, r3
 8009c18:	e7c4      	b.n	8009ba4 <__ieee754_sqrt+0x14c>
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	7ff00000 	.word	0x7ff00000
 8009c20:	fffffc01 	.word	0xfffffc01
 8009c24:	20000280 	.word	0x20000280
 8009c28:	20000288 	.word	0x20000288
 8009c2c:	3fe00000 	.word	0x3fe00000

08009c30 <__ieee754_sqrtf>:
 8009c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c32:	0003      	movs	r3, r0
 8009c34:	0042      	lsls	r2, r0, #1
 8009c36:	1c04      	adds	r4, r0, #0
 8009c38:	20ff      	movs	r0, #255	; 0xff
 8009c3a:	0852      	lsrs	r2, r2, #1
 8009c3c:	05c0      	lsls	r0, r0, #23
 8009c3e:	4282      	cmp	r2, r0
 8009c40:	d30a      	bcc.n	8009c58 <__ieee754_sqrtf+0x28>
 8009c42:	1c21      	adds	r1, r4, #0
 8009c44:	1c20      	adds	r0, r4, #0
 8009c46:	f7f6 ffd3 	bl	8000bf0 <__aeabi_fmul>
 8009c4a:	1c01      	adds	r1, r0, #0
 8009c4c:	1c20      	adds	r0, r4, #0
 8009c4e:	f7f6 fc65 	bl	800051c <__aeabi_fadd>
 8009c52:	1c04      	adds	r4, r0, #0
 8009c54:	1c20      	adds	r0, r4, #0
 8009c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c58:	2a00      	cmp	r2, #0
 8009c5a:	d0fb      	beq.n	8009c54 <__ieee754_sqrtf+0x24>
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	da07      	bge.n	8009c70 <__ieee754_sqrtf+0x40>
 8009c60:	1c21      	adds	r1, r4, #0
 8009c62:	1c20      	adds	r0, r4, #0
 8009c64:	f7f7 f912 	bl	8000e8c <__aeabi_fsub>
 8009c68:	1c01      	adds	r1, r0, #0
 8009c6a:	f7f6 fdf7 	bl	800085c <__aeabi_fdiv>
 8009c6e:	e7f0      	b.n	8009c52 <__ieee754_sqrtf+0x22>
 8009c70:	0022      	movs	r2, r4
 8009c72:	15e1      	asrs	r1, r4, #23
 8009c74:	4002      	ands	r2, r0
 8009c76:	4204      	tst	r4, r0
 8009c78:	d047      	beq.n	8009d0a <__ieee754_sqrtf+0xda>
 8009c7a:	2280      	movs	r2, #128	; 0x80
 8009c7c:	0008      	movs	r0, r1
 8009c7e:	025b      	lsls	r3, r3, #9
 8009c80:	0a5b      	lsrs	r3, r3, #9
 8009c82:	0412      	lsls	r2, r2, #16
 8009c84:	387f      	subs	r0, #127	; 0x7f
 8009c86:	4313      	orrs	r3, r2
 8009c88:	07c9      	lsls	r1, r1, #31
 8009c8a:	d400      	bmi.n	8009c8e <__ieee754_sqrtf+0x5e>
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	2400      	movs	r4, #0
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	1042      	asrs	r2, r0, #1
 8009c94:	0026      	movs	r6, r4
 8009c96:	2019      	movs	r0, #25
 8009c98:	9201      	str	r2, [sp, #4]
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	0449      	lsls	r1, r1, #17
 8009c9e:	1875      	adds	r5, r6, r1
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	dc02      	bgt.n	8009cac <__ieee754_sqrtf+0x7c>
 8009ca6:	186e      	adds	r6, r5, r1
 8009ca8:	1b5a      	subs	r2, r3, r5
 8009caa:	1864      	adds	r4, r4, r1
 8009cac:	3801      	subs	r0, #1
 8009cae:	0053      	lsls	r3, r2, #1
 8009cb0:	0849      	lsrs	r1, r1, #1
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1f3      	bne.n	8009c9e <__ieee754_sqrtf+0x6e>
 8009cb6:	2a00      	cmp	r2, #0
 8009cb8:	d018      	beq.n	8009cec <__ieee754_sqrtf+0xbc>
 8009cba:	4d17      	ldr	r5, [pc, #92]	; (8009d18 <__ieee754_sqrtf+0xe8>)
 8009cbc:	4e17      	ldr	r6, [pc, #92]	; (8009d1c <__ieee754_sqrtf+0xec>)
 8009cbe:	6828      	ldr	r0, [r5, #0]
 8009cc0:	6831      	ldr	r1, [r6, #0]
 8009cc2:	f7f7 f8e3 	bl	8000e8c <__aeabi_fsub>
 8009cc6:	682f      	ldr	r7, [r5, #0]
 8009cc8:	1c01      	adds	r1, r0, #0
 8009cca:	1c38      	adds	r0, r7, #0
 8009ccc:	f7f6 fc08 	bl	80004e0 <__aeabi_fcmple>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d00b      	beq.n	8009cec <__ieee754_sqrtf+0xbc>
 8009cd4:	6828      	ldr	r0, [r5, #0]
 8009cd6:	6831      	ldr	r1, [r6, #0]
 8009cd8:	f7f6 fc20 	bl	800051c <__aeabi_fadd>
 8009cdc:	682d      	ldr	r5, [r5, #0]
 8009cde:	1c01      	adds	r1, r0, #0
 8009ce0:	1c28      	adds	r0, r5, #0
 8009ce2:	f7f6 fbf3 	bl	80004cc <__aeabi_fcmplt>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d012      	beq.n	8009d10 <__ieee754_sqrtf+0xe0>
 8009cea:	3402      	adds	r4, #2
 8009cec:	22fc      	movs	r2, #252	; 0xfc
 8009cee:	1063      	asrs	r3, r4, #1
 8009cf0:	0592      	lsls	r2, r2, #22
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	9a01      	ldr	r2, [sp, #4]
 8009cf6:	05d4      	lsls	r4, r2, #23
 8009cf8:	18e4      	adds	r4, r4, r3
 8009cfa:	e7ab      	b.n	8009c54 <__ieee754_sqrtf+0x24>
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	3201      	adds	r2, #1
 8009d00:	4203      	tst	r3, r0
 8009d02:	d0fb      	beq.n	8009cfc <__ieee754_sqrtf+0xcc>
 8009d04:	3a01      	subs	r2, #1
 8009d06:	1a89      	subs	r1, r1, r2
 8009d08:	e7b7      	b.n	8009c7a <__ieee754_sqrtf+0x4a>
 8009d0a:	2080      	movs	r0, #128	; 0x80
 8009d0c:	0400      	lsls	r0, r0, #16
 8009d0e:	e7f7      	b.n	8009d00 <__ieee754_sqrtf+0xd0>
 8009d10:	2301      	movs	r3, #1
 8009d12:	3401      	adds	r4, #1
 8009d14:	439c      	bics	r4, r3
 8009d16:	e7e9      	b.n	8009cec <__ieee754_sqrtf+0xbc>
 8009d18:	20000290 	.word	0x20000290
 8009d1c:	20000294 	.word	0x20000294

08009d20 <__ieee754_atan2>:
 8009d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d22:	0016      	movs	r6, r2
 8009d24:	001d      	movs	r5, r3
 8009d26:	005a      	lsls	r2, r3, #1
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4273      	negs	r3, r6
 8009d2c:	4333      	orrs	r3, r6
 8009d2e:	4f45      	ldr	r7, [pc, #276]	; (8009e44 <__ieee754_atan2+0x124>)
 8009d30:	0852      	lsrs	r2, r2, #1
 8009d32:	0fdb      	lsrs	r3, r3, #31
 8009d34:	4313      	orrs	r3, r2
 8009d36:	42bb      	cmp	r3, r7
 8009d38:	d809      	bhi.n	8009d4e <__ieee754_atan2+0x2e>
 8009d3a:	4244      	negs	r4, r0
 8009d3c:	004b      	lsls	r3, r1, #1
 8009d3e:	4304      	orrs	r4, r0
 8009d40:	085b      	lsrs	r3, r3, #1
 8009d42:	0fe4      	lsrs	r4, r4, #31
 8009d44:	9100      	str	r1, [sp, #0]
 8009d46:	9001      	str	r0, [sp, #4]
 8009d48:	431c      	orrs	r4, r3
 8009d4a:	42bc      	cmp	r4, r7
 8009d4c:	d905      	bls.n	8009d5a <__ieee754_atan2+0x3a>
 8009d4e:	0032      	movs	r2, r6
 8009d50:	002b      	movs	r3, r5
 8009d52:	f7f7 fb0b 	bl	800136c <__aeabi_dadd>
 8009d56:	b003      	add	sp, #12
 8009d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5a:	4c3b      	ldr	r4, [pc, #236]	; (8009e48 <__ieee754_atan2+0x128>)
 8009d5c:	192c      	adds	r4, r5, r4
 8009d5e:	4334      	orrs	r4, r6
 8009d60:	d102      	bne.n	8009d68 <__ieee754_atan2+0x48>
 8009d62:	f7ff fcd9 	bl	8009718 <atan>
 8009d66:	e7f6      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009d68:	17ac      	asrs	r4, r5, #30
 8009d6a:	46a4      	mov	ip, r4
 8009d6c:	2402      	movs	r4, #2
 8009d6e:	4667      	mov	r7, ip
 8009d70:	403c      	ands	r4, r7
 8009d72:	9f00      	ldr	r7, [sp, #0]
 8009d74:	0fff      	lsrs	r7, r7, #31
 8009d76:	433c      	orrs	r4, r7
 8009d78:	9f01      	ldr	r7, [sp, #4]
 8009d7a:	431f      	orrs	r7, r3
 8009d7c:	d106      	bne.n	8009d8c <__ieee754_atan2+0x6c>
 8009d7e:	2c02      	cmp	r4, #2
 8009d80:	d057      	beq.n	8009e32 <__ieee754_atan2+0x112>
 8009d82:	2c03      	cmp	r4, #3
 8009d84:	d1e7      	bne.n	8009d56 <__ieee754_atan2+0x36>
 8009d86:	4831      	ldr	r0, [pc, #196]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009d88:	4931      	ldr	r1, [pc, #196]	; (8009e50 <__ieee754_atan2+0x130>)
 8009d8a:	e7e4      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009d8c:	0017      	movs	r7, r2
 8009d8e:	4337      	orrs	r7, r6
 8009d90:	d105      	bne.n	8009d9e <__ieee754_atan2+0x7e>
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	482d      	ldr	r0, [pc, #180]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da51      	bge.n	8009e3e <__ieee754_atan2+0x11e>
 8009d9a:	492e      	ldr	r1, [pc, #184]	; (8009e54 <__ieee754_atan2+0x134>)
 8009d9c:	e7db      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009d9e:	4f29      	ldr	r7, [pc, #164]	; (8009e44 <__ieee754_atan2+0x124>)
 8009da0:	42ba      	cmp	r2, r7
 8009da2:	d110      	bne.n	8009dc6 <__ieee754_atan2+0xa6>
 8009da4:	3c01      	subs	r4, #1
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d105      	bne.n	8009db6 <__ieee754_atan2+0x96>
 8009daa:	4b2b      	ldr	r3, [pc, #172]	; (8009e58 <__ieee754_atan2+0x138>)
 8009dac:	2c02      	cmp	r4, #2
 8009dae:	d905      	bls.n	8009dbc <__ieee754_atan2+0x9c>
 8009db0:	4826      	ldr	r0, [pc, #152]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009db2:	492a      	ldr	r1, [pc, #168]	; (8009e5c <__ieee754_atan2+0x13c>)
 8009db4:	e7cf      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009db6:	2c02      	cmp	r4, #2
 8009db8:	d83e      	bhi.n	8009e38 <__ieee754_atan2+0x118>
 8009dba:	4b29      	ldr	r3, [pc, #164]	; (8009e60 <__ieee754_atan2+0x140>)
 8009dbc:	00e4      	lsls	r4, r4, #3
 8009dbe:	191b      	adds	r3, r3, r4
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	6859      	ldr	r1, [r3, #4]
 8009dc4:	e7c7      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009dc6:	4f1f      	ldr	r7, [pc, #124]	; (8009e44 <__ieee754_atan2+0x124>)
 8009dc8:	42bb      	cmp	r3, r7
 8009dca:	d0e2      	beq.n	8009d92 <__ieee754_atan2+0x72>
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	151b      	asrs	r3, r3, #20
 8009dd0:	2b3c      	cmp	r3, #60	; 0x3c
 8009dd2:	dc18      	bgt.n	8009e06 <__ieee754_atan2+0xe6>
 8009dd4:	2d00      	cmp	r5, #0
 8009dd6:	da01      	bge.n	8009ddc <__ieee754_atan2+0xbc>
 8009dd8:	333c      	adds	r3, #60	; 0x3c
 8009dda:	db17      	blt.n	8009e0c <__ieee754_atan2+0xec>
 8009ddc:	0032      	movs	r2, r6
 8009dde:	002b      	movs	r3, r5
 8009de0:	f7f7 fe24 	bl	8001a2c <__aeabi_ddiv>
 8009de4:	f7ff fe18 	bl	8009a18 <fabs>
 8009de8:	f7ff fc96 	bl	8009718 <atan>
 8009dec:	2c01      	cmp	r4, #1
 8009dee:	d010      	beq.n	8009e12 <__ieee754_atan2+0xf2>
 8009df0:	2c02      	cmp	r4, #2
 8009df2:	d013      	beq.n	8009e1c <__ieee754_atan2+0xfc>
 8009df4:	2c00      	cmp	r4, #0
 8009df6:	d0ae      	beq.n	8009d56 <__ieee754_atan2+0x36>
 8009df8:	4a1a      	ldr	r2, [pc, #104]	; (8009e64 <__ieee754_atan2+0x144>)
 8009dfa:	4b1b      	ldr	r3, [pc, #108]	; (8009e68 <__ieee754_atan2+0x148>)
 8009dfc:	f7f8 fcd2 	bl	80027a4 <__aeabi_dsub>
 8009e00:	4a12      	ldr	r2, [pc, #72]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009e02:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <__ieee754_atan2+0x14c>)
 8009e04:	e012      	b.n	8009e2c <__ieee754_atan2+0x10c>
 8009e06:	4811      	ldr	r0, [pc, #68]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009e08:	4919      	ldr	r1, [pc, #100]	; (8009e70 <__ieee754_atan2+0x150>)
 8009e0a:	e7ef      	b.n	8009dec <__ieee754_atan2+0xcc>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	2100      	movs	r1, #0
 8009e10:	e7ec      	b.n	8009dec <__ieee754_atan2+0xcc>
 8009e12:	2480      	movs	r4, #128	; 0x80
 8009e14:	0624      	lsls	r4, r4, #24
 8009e16:	190b      	adds	r3, r1, r4
 8009e18:	0019      	movs	r1, r3
 8009e1a:	e79c      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009e1c:	4a11      	ldr	r2, [pc, #68]	; (8009e64 <__ieee754_atan2+0x144>)
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <__ieee754_atan2+0x148>)
 8009e20:	f7f8 fcc0 	bl	80027a4 <__aeabi_dsub>
 8009e24:	0002      	movs	r2, r0
 8009e26:	000b      	movs	r3, r1
 8009e28:	4808      	ldr	r0, [pc, #32]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009e2a:	4910      	ldr	r1, [pc, #64]	; (8009e6c <__ieee754_atan2+0x14c>)
 8009e2c:	f7f8 fcba 	bl	80027a4 <__aeabi_dsub>
 8009e30:	e791      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009e32:	4806      	ldr	r0, [pc, #24]	; (8009e4c <__ieee754_atan2+0x12c>)
 8009e34:	490d      	ldr	r1, [pc, #52]	; (8009e6c <__ieee754_atan2+0x14c>)
 8009e36:	e78e      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	e78b      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009e3e:	490c      	ldr	r1, [pc, #48]	; (8009e70 <__ieee754_atan2+0x150>)
 8009e40:	e789      	b.n	8009d56 <__ieee754_atan2+0x36>
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	7ff00000 	.word	0x7ff00000
 8009e48:	c0100000 	.word	0xc0100000
 8009e4c:	54442d18 	.word	0x54442d18
 8009e50:	c00921fb 	.word	0xc00921fb
 8009e54:	bff921fb 	.word	0xbff921fb
 8009e58:	0800bc28 	.word	0x0800bc28
 8009e5c:	3fe921fb 	.word	0x3fe921fb
 8009e60:	0800bc40 	.word	0x0800bc40
 8009e64:	33145c07 	.word	0x33145c07
 8009e68:	3ca1a626 	.word	0x3ca1a626
 8009e6c:	400921fb 	.word	0x400921fb
 8009e70:	3ff921fb 	.word	0x3ff921fb

08009e74 <_init>:
 8009e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7a:	bc08      	pop	{r3}
 8009e7c:	469e      	mov	lr, r3
 8009e7e:	4770      	bx	lr

08009e80 <_fini>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e86:	bc08      	pop	{r3}
 8009e88:	469e      	mov	lr, r3
 8009e8a:	4770      	bx	lr
